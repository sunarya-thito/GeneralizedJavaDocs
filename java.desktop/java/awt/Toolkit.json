{
  "packageName": "java.awt",
  "simpleName": "Toolkit",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 20,
      "name": "desktopProperties",
      "comment": "The desktop properties.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.beans.PropertyChangeSupport",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 20,
      "name": "desktopPropsSupport",
      "comment": "The desktop properties change support.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "systemColors"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "loadSystemColors",
      "comment": "Fills in the integer array that is supplied as an argument with the current system color values.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esystemColors\u003c/code\u003e - an integer array."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "dynamic"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDynamicLayout",
      "comment": "Controls whether the layout of Containers is validated dynamically during resizing, or statically, after resizing is complete. Use isDynamicLayoutActive() to detect if this feature enabled in this program and is supported by this operating system and/or window manager. Note that this feature is supported not on all platforms, and conversely, that this feature cannot be turned off on some platforms. On these platforms where dynamic layout during resizing is not supported (or is always supported), setting this property has no effect. Note that this feature can be set or unset as a property of the operating system or window manager on some platforms. On such platforms, the dynamic resize property must be set at the operating system or window manager level before this method can take effect. This method does not change support or settings of the underlying operating system or window manager. The OS/WM support can be queried using getDesktopProperty(\"awt.dynamicLayoutSupported\") method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#isDynamicLayoutSet()\"\u003e\u003ccode\u003eisDynamicLayoutSet()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#isDynamicLayoutActive()\"\u003e\u003ccode\u003eisDynamicLayoutActive()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getDesktopProperty(java.lang.String)\"\u003e\u003ccode\u003egetDesktopProperty(String propertyName)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edynamic\u003c/code\u003e - If true, Containers should re-layout their components as the Container is being resized. If false, the layout will be validated after resizing is completed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isDynamicLayoutSet",
      "comment": "Returns whether the layout of Containers is validated dynamically during resizing, or statically, after resizing is complete. Note: this method returns the value that was set programmatically; it does not reflect support at the level of the operating system or window manager for dynamic layout on resizing, or the current operating system or window manager settings. The OS/WM support can be queried using getDesktopProperty(\"awt.dynamicLayoutSupported\").",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#setDynamicLayout(boolean)\"\u003e\u003ccode\u003esetDynamicLayout(boolean dynamic)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#isDynamicLayoutActive()\"\u003e\u003ccode\u003eisDynamicLayoutActive()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getDesktopProperty(java.lang.String)\"\u003e\u003ccode\u003egetDesktopProperty(String propertyName)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "return": [
          "true if validation of Containers is done dynamically, false if validation is done after resizing is finished."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDynamicLayoutActive",
      "comment": "Returns whether dynamic layout of Containers on resize is currently enabled on the underlying operating system and/or window manager. If the platform supports it, setDynamicLayout(boolean) may be used to programmatically enable or disable platform dynamic layout. Regardless of whether that toggling is supported, or whether true or false is specified as an argument, or has never been called at all, this method will return the active current platform behavior and which will be followed by the JDK in determining layout policy during resizing. If dynamic layout is currently inactive then Containers re-layout their components when resizing is completed. As a result the Component.validate() method will be invoked only once per resize. If dynamic layout is currently active then Containers re-layout their components on every native resize event and the validate() method will be invoked each time. The OS/WM support can be queried using the getDesktopProperty(\"awt.dynamicLayoutSupported\") method. This property will reflect the platform capability but is not sufficient to tell if it is presently enabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#setDynamicLayout(boolean)\"\u003e\u003ccode\u003esetDynamicLayout(boolean dynamic)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#isDynamicLayoutSet()\"\u003e\u003ccode\u003eisDynamicLayoutSet()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getDesktopProperty(java.lang.String)\"\u003e\u003ccode\u003egetDesktopProperty(String propertyName)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if the GraphicsEnvironment.isHeadless() method returns true"
        ],
        "return": [
          "true if dynamic layout of Containers on resize is currently active, false otherwise."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getScreenSize",
      "comment": "Gets the size of the screen. On systems with multiple displays, the primary display is used. Multi-screen aware display dimensions are available from GraphicsConfiguration and GraphicsDevice.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html#getBounds()\"\u003e\u003ccode\u003eGraphicsConfiguration.getBounds()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#getDisplayMode()\"\u003e\u003ccode\u003eGraphicsDevice.getDisplayMode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "return": [
          "the size of this toolkit\u0027s screen, in pixels."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getScreenResolution",
      "comment": "Returns the screen resolution in dots-per-inch.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "return": [
          "this toolkit\u0027s screen resolution, in dots-per-inch."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Insets",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.awt.GraphicsConfiguration",
            "type": "Class"
          },
          "field": {
            "name": "gc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScreenInsets",
      "comment": "Gets the insets of the screen.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003egc\u003c/code\u003e - a \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "return": [
          "the insets of this toolkit\u0027s screen, in pixels."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.ColorModel",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getColorModel",
      "comment": "Determines the color model of this toolkit\u0027s screen. ColorModel is an abstract class that encapsulates the ability to translate between the pixel values of an image and its red, green, blue, and alpha components. This toolkit method is called by the getColorModel method of the Component class.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eColorModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getColorModel()\"\u003e\u003ccode\u003eComponent.getColorModel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "return": [
          "the color model of this toolkit\u0027s screen."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getFontList",
      "comment": "Returns the names of the available fonts in this toolkit. For 1.1, the following font names are deprecated (the replacement name follows): TimesRoman (use Serif) Helvetica (use SansSerif) Courier (use Monospaced) The ZapfDingbats fontname is also deprecated in 1.1 but the characters are defined in Unicode starting at 0x2700, and as of 1.1 Java supports those characters.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#getAvailableFontFamilyNames()\"\u003e\u003ccode\u003eGraphicsEnvironment.getAvailableFontFamilyNames()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the names of the available fonts in this toolkit."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.FontMetrics",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "field": {
            "name": "font"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getFontMetrics",
      "comment": "Gets the screen device metrics for rendering of the font.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/LineMetrics.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eLineMetrics\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getLineMetrics(java.lang.String,java.awt.font.FontRenderContext)\"\u003e\u003ccode\u003eFont.getLineMetrics(java.lang.String, java.awt.font.FontRenderContext)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#getScreenDevices()\"\u003e\u003ccode\u003eGraphicsEnvironment.getScreenDevices()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efont\u003c/code\u003e - a font"
        ],
        "return": [
          "the screen metrics of the specified font in this toolkit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "sync",
      "comment": "Synchronizes this toolkit\u0027s graphics state. Some window systems may do buffering of graphics events. This method ensures that the display is up-to-date. It is useful for animation.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.awt.Toolkit",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefaultToolkit",
      "comment": "Gets the default toolkit. If a system property named \"java.awt.headless\" is set to true then the headless implementation of Toolkit is used, otherwise the default platform-specific implementation of Toolkit is used. If this Toolkit is not a headless implementation and if they exist, service providers of AccessibilityProvider will be loaded if specified by the system property javax.accessibility.assistive_technologies. An example of setting this property is to invoke Java with -Djavax.accessibility.assistive_technologies\u003dMyServiceProvider. In addition to MyServiceProvider other service providers can be specified using a comma separated list. Service providers are loaded after the AWT toolkit is created. If the list of assistive technology providers as provided through system property \"javax.accessibility.assistive_technologies\" is the empty string or contains only white space characters it is ignored. All other errors are handled via an AWTError exception. The names specified in the assistive_technologies property are used to query each service provider implementation. If the requested name matches the name of the service provider, the AccessibilityProvider.activate() method will be invoked to activate the matching service provider.",
      "tagMap": {
        "implSpec": [
          "If assistive technology service providers are not specified with a system property this implementation will look in a properties file located as follows: \n\u003cul\u003e \n \u003cli\u003e \u003ccode\u003e${user.home}/.accessibility.properties\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e \u003ccode\u003e${java.home}/conf/accessibility.properties\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e Only the first of these files to be located will be consulted. The requested service providers are specified by setting the \n\u003ccode\u003eassistive_technologies\u003d\u003c/code\u003e property. A single provider or a comma separated list of providers can be specified."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ServiceLoader.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eServiceLoader\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/AccessibilityProvider.html\" title\u003d\"class in javax.accessibility\"\u003e\u003ccode\u003eAccessibilityProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTError.html\" title\u003d\"class in java.awt\"\u003eAWTError\u003c/a\u003e\u003c/code\u003e - in case of an error loading assistive technologies."
        ],
        "return": [
          "the default toolkit."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Image",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "filename"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getImage",
      "comment": "Returns an image which gets pixel data from the specified file, whose format can be either GIF, JPEG or PNG. The underlying toolkit attempts to resolve multiple requests with the same filename to the same returned Image. Since the mechanism required to facilitate this sharing of Image objects may continue to hold onto images that are no longer in use for an indefinite period of time, developers are encouraged to implement their own caching of images by using the createImage variant wherever available. If the image data contained in the specified file changes, the Image object returned from this method may still contain stale information which was loaded from the file after a prior call. Previously loaded image data can be manually discarded by calling the flush method on the returned Image. This method first checks if there is a security manager installed. If so, the method calls the security manager\u0027s checkRead method with the file specified to ensure that the access to the image is allowed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#createImage(java.lang.String)\"\u003e\u003ccode\u003ecreateImage(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efilename\u003c/code\u003e - the name of a file containing pixel data in a recognized file format."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its checkRead method doesn\u0027t allow the operation."
        ],
        "return": [
          "an image which gets its pixel data from the specified file."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Image",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "url"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getImage",
      "comment": "Returns an image which gets pixel data from the specified URL. The pixel data referenced by the specified URL must be in one of the following formats: GIF, JPEG or PNG. The underlying toolkit attempts to resolve multiple requests with the same URL to the same returned Image. Since the mechanism required to facilitate this sharing of Image objects may continue to hold onto images that are no longer in use for an indefinite period of time, developers are encouraged to implement their own caching of images by using the createImage variant wherever available. If the image data stored at the specified URL changes, the Image object returned from this method may still contain stale information which was fetched from the URL after a prior call. Previously loaded image data can be manually discarded by calling the flush method on the returned Image. This method first checks if there is a security manager installed. If so, the method calls the security manager\u0027s checkPermission method with the corresponding permission to ensure that the access to the image is allowed. If the connection to the specified URL requires either URLPermission or SocketPermission, then URLPermission is used for security checks.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#createImage(java.net.URL)\"\u003e\u003ccode\u003ecreateImage(java.net.URL)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - the URL to use in fetching the pixel data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its checkPermission method doesn\u0027t allow the operation."
        ],
        "return": [
          "an image which gets its pixel data from the specified URL."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Image",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "filename"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createImage",
      "comment": "Returns an image which gets pixel data from the specified file. The returned Image is a new object which will not be shared with any other caller of this method or its getImage variant. This method first checks if there is a security manager installed. If so, the method calls the security manager\u0027s checkRead method with the specified file to ensure that the image creation is allowed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getImage(java.lang.String)\"\u003e\u003ccode\u003egetImage(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efilename\u003c/code\u003e - the name of a file containing pixel data in a recognized file format."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its checkRead method doesn\u0027t allow the operation."
        ],
        "return": [
          "an image which gets its pixel data from the specified file."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Image",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "url"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createImage",
      "comment": "Returns an image which gets pixel data from the specified URL. The returned Image is a new object which will not be shared with any other caller of this method or its getImage variant. This method first checks if there is a security manager installed. If so, the method calls the security manager\u0027s checkPermission method with the corresponding permission to ensure that the image creation is allowed. If the connection to the specified URL requires either URLPermission or SocketPermission, then URLPermission is used for security checks.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getImage(java.net.URL)\"\u003e\u003ccode\u003egetImage(java.net.URL)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - the URL to use in fetching the pixel data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its checkPermission method doesn\u0027t allow the operation."
        ],
        "return": [
          "an image which gets its pixel data from the specified URL."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Image",
            "type": "Class"
          },
          "field": {
            "name": "image"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        },
        {
          "type": {
            "name": "java.awt.image.ImageObserver",
            "type": "Class"
          },
          "field": {
            "name": "observer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "prepareImage",
      "comment": "Prepares an image for rendering. If the values of the width and height arguments are both -1, this method prepares the image for rendering on the default screen; otherwise, this method prepares an image for rendering on the default screen at the specified width and height. The image data is downloaded asynchronously in another thread, and an appropriately scaled screen representation of the image is generated. This method is called by components prepareImage methods. Information on the flags returned by this method can be found with the definition of the ImageObserver interface.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#prepareImage(java.awt.Image,java.awt.image.ImageObserver)\"\u003e\u003ccode\u003eComponent.prepareImage(java.awt.Image, java.awt.image.ImageObserver)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)\"\u003e\u003ccode\u003eComponent.prepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageObserver\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimage\u003c/code\u003e - the image for which to prepare a screen representation.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the desired screen representation, or \n\u003ccode\u003e-1\u003c/code\u003e.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the desired screen representation, or \n\u003ccode\u003e-1\u003c/code\u003e.",
          "\u003ccode\u003eobserver\u003c/code\u003e - the \n\u003ccode\u003eImageObserver\u003c/code\u003e object to be notified as the image is being prepared."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the image has already been fully prepared; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Image",
            "type": "Class"
          },
          "field": {
            "name": "image"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        },
        {
          "type": {
            "name": "java.awt.image.ImageObserver",
            "type": "Class"
          },
          "field": {
            "name": "observer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "checkImage",
      "comment": "Indicates the construction status of a specified image that is being prepared for display. If the values of the width and height arguments are both -1, this method returns the construction status of a screen representation of the specified image in this toolkit. Otherwise, this method returns the construction status of a scaled representation of the image at the specified width and height. This method does not cause the image to begin loading. An application must call prepareImage to force the loading of an image. This method is called by the component\u0027s checkImage methods. Information on the flags returned by this method can be found with the definition of the ImageObserver interface.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)\"\u003e\u003ccode\u003eprepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#checkImage(java.awt.Image,java.awt.image.ImageObserver)\"\u003e\u003ccode\u003eComponent.checkImage(java.awt.Image, java.awt.image.ImageObserver)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)\"\u003e\u003ccode\u003eComponent.checkImage(java.awt.Image, int, int, java.awt.image.ImageObserver)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageObserver\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimage\u003c/code\u003e - the image whose status is being checked.",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the scaled version whose status is being checked, or \n\u003ccode\u003e-1\u003c/code\u003e.",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the scaled version whose status is being checked, or \n\u003ccode\u003e-1\u003c/code\u003e.",
          "\u003ccode\u003eobserver\u003c/code\u003e - the \n\u003ccode\u003eImageObserver\u003c/code\u003e object to be notified as the image is being prepared."
        ],
        "return": [
          "the bitwise inclusive \n\u003cstrong\u003eOR\u003c/strong\u003e of the \n\u003ccode\u003eImageObserver\u003c/code\u003e flags for the image data that is currently available."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Image",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.ImageProducer",
            "type": "Class"
          },
          "field": {
            "name": "producer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createImage",
      "comment": "Creates an image with the specified image producer.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Image.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eImage\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageProducer.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageProducer\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#createImage(java.awt.image.ImageProducer)\"\u003e\u003ccode\u003eComponent.createImage(java.awt.image.ImageProducer)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eproducer\u003c/code\u003e - the image producer to be used."
        ],
        "return": [
          "an image with the specified image producer."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Image",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "imagedata"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createImage",
      "comment": "Creates an image which decodes the image stored in the specified byte array. The data must be in some image format, such as GIF or JPEG, that is supported by this toolkit.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eimagedata\u003c/code\u003e - an array of bytes, representing image data in a supported image format."
        ],
        "return": [
          "an image."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Image",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "imagedata"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "imageoffset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "imagelength"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createImage",
      "comment": "Creates an image which decodes the image stored in the specified byte array, and at the specified offset and length. The data must be in some image format, such as GIF or JPEG, that is supported by this toolkit.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eimagedata\u003c/code\u003e - an array of bytes, representing image data in a supported image format.",
          "\u003ccode\u003eimageoffset\u003c/code\u003e - the offset of the beginning of the data in the array.",
          "\u003ccode\u003eimagelength\u003c/code\u003e - the length of the data in the array."
        ],
        "return": [
          "an image."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.PrintJob",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Frame",
            "type": "Class"
          },
          "field": {
            "name": "frame"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "jobtitle"
          }
        },
        {
          "type": {
            "name": "java.util.Properties",
            "type": "Class"
          },
          "field": {
            "name": "props"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPrintJob",
      "comment": "Gets a PrintJob object which is the result of initiating a print operation on the toolkit\u0027s platform. Each actual implementation of this method should first check if there is a security manager installed. If there is, the method should call the security manager\u0027s checkPrintJobAccess method to ensure initiation of a print operation is allowed. If the default implementation of checkPrintJobAccess is used (that is, that method is not overriden), then this results in a call to the security manager\u0027s checkPermission method with a RuntimePermission(\"queuePrintJob\") permission.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/PrintJob.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003ePrintJob\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eframe\u003c/code\u003e - the parent of the print dialog. May not be null.",
          "\u003ccode\u003ejobtitle\u003c/code\u003e - the title of the PrintJob. A null title is equivalent to \"\".",
          "\u003ccode\u003eprops\u003c/code\u003e - a Properties object containing zero or more properties. Properties are not standardized and are not consistent across implementations. Because of this, PrintJobs which require job and page control should use the version of this function which takes JobAttributes and PageAttributes objects. This object may be updated to reflect the user\u0027s job choices on exit. May be null."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if frame is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this thread is not allowed to initiate a print job request"
        ],
        "return": [
          "a \n\u003ccode\u003ePrintJob\u003c/code\u003e object, or \n\u003ccode\u003enull\u003c/code\u003e if the user cancelled the print job."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.PrintJob",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Frame",
            "type": "Class"
          },
          "field": {
            "name": "frame"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "jobtitle"
          }
        },
        {
          "type": {
            "name": "java.awt.JobAttributes",
            "type": "Class"
          },
          "field": {
            "name": "jobAttributes"
          }
        },
        {
          "type": {
            "name": "java.awt.PageAttributes",
            "type": "Class"
          },
          "field": {
            "name": "pageAttributes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPrintJob",
      "comment": "Gets a PrintJob object which is the result of initiating a print operation on the toolkit\u0027s platform. Each actual implementation of this method should first check if there is a security manager installed. If there is, the method should call the security manager\u0027s checkPrintJobAccess method to ensure initiation of a print operation is allowed. If the default implementation of checkPrintJobAccess is used (that is, that method is not overriden), then this results in a call to the security manager\u0027s checkPermission method with a RuntimePermission(\"queuePrintJob\") permission.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/PrintJob.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003ePrintJob\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/JobAttributes.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eJobAttributes\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/PageAttributes.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003ePageAttributes\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eframe\u003c/code\u003e - the parent of the print dialog. May not be null.",
          "\u003ccode\u003ejobtitle\u003c/code\u003e - the title of the PrintJob. A null title is equivalent to \"\".",
          "\u003ccode\u003ejobAttributes\u003c/code\u003e - a set of job attributes which will control the PrintJob. The attributes will be updated to reflect the user\u0027s choices as outlined in the JobAttributes documentation. May be null.",
          "\u003ccode\u003epageAttributes\u003c/code\u003e - a set of page attributes which will control the PrintJob. The attributes will be applied to every page in the job. The attributes will be updated to reflect the user\u0027s choices as outlined in the PageAttributes documentation. May be null."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if frame is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if pageAttributes specifies differing cross feed and feed resolutions. Also if this thread has access to the file system and jobAttributes specifies print to file, and the specified destination file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason. However in the case of print to file, if a dialog is also requested to be displayed then the user will be given an opportunity to select a file and proceed with printing. The dialog will ensure that the selected output file is valid before returning from this method.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this thread is not allowed to initiate a print job request, or if jobAttributes specifies print to file, and this thread is not allowed to access the file system"
        ],
        "return": [
          "a \n\u003ccode\u003ePrintJob\u003c/code\u003e object, or \n\u003ccode\u003enull\u003c/code\u003e if the user cancelled the print job."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "beep",
      "comment": "Emits an audio beep depending on native system settings and hardware capabilities.",
      "tagMap": {
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.datatransfer.Clipboard",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSystemClipboard",
      "comment": "Gets the singleton instance of the system Clipboard which interfaces with clipboard facilities provided by the native platform. This clipboard enables data transfer between Java programs and native applications which use native clipboard facilities. In addition to any and all default formats text returned by the system Clipboard\u0027s getTransferData() method is available in the following flavors: DataFlavor.stringFlavor DataFlavor.plainTextFlavor (deprecated) As with java.awt.datatransfer.StringSelection, if the requested flavor is DataFlavor.plainTextFlavor, or an equivalent flavor, a Reader is returned. Note: The behavior of the system Clipboard\u0027s getTransferData() method for DataFlavor.plainTextFlavor, and equivalent DataFlavors, is inconsistent with the definition of DataFlavor.plainTextFlavor. Because of this, support for DataFlavor.plainTextFlavor, and equivalent flavors, is deprecated. Each actual implementation of this method should first check if there is a security manager installed. If there is, the method should call the security manager\u0027s checkPermission method to check AWTPermission(\"accessClipboard\").",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/Clipboard.html\" title\u003d\"class in java.awt.datatransfer\"\u003e\u003ccode\u003eClipboard\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/StringSelection.html\" title\u003d\"class in java.awt.datatransfer\"\u003e\u003ccode\u003eStringSelection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/DataFlavor.html#stringFlavor\"\u003e\u003ccode\u003eDataFlavor.stringFlavor\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/DataFlavor.html#plainTextFlavor\"\u003e\u003ccode\u003eDataFlavor.plainTextFlavor\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Reader.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eReader\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "return": [
          "the system Clipboard"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.datatransfer.Clipboard",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSystemSelection",
      "comment": "Gets the singleton instance of the system selection as a Clipboard object. This allows an application to read and modify the current, system-wide selection. An application is responsible for updating the system selection whenever the user selects text, using either the mouse or the keyboard. Typically, this is implemented by installing a FocusListener on all Components which support text selection, and, between FOCUS_GAINED and FOCUS_LOST events delivered to that Component, updating the system selection Clipboard when the selection changes inside the Component. Properly updating the system selection ensures that a Java application will interact correctly with native applications and other Java applications running simultaneously on the system. Note that java.awt.TextComponent and javax.swing.text.JTextComponent already adhere to this policy. When using these classes, and their subclasses, developers need not write any additional code. Some platforms do not support a system selection Clipboard. On those platforms, this method will return null. In such a case, an application is absolved from its responsibility to update the system selection Clipboard as described above. Each actual implementation of this method should first check if there is a security manager installed. If there is, the method should call the security manager\u0027s checkPermission method to check AWTPermission(\"accessClipboard\").",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.datatransfer/java/awt/datatransfer/Clipboard.html\" title\u003d\"class in java.awt.datatransfer\"\u003e\u003ccode\u003eClipboard\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/FocusListener.html\" title\u003d\"interface in java.awt.event\"\u003e\u003ccode\u003eFocusListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/FocusEvent.html#FOCUS_GAINED\"\u003e\u003ccode\u003eFocusEvent.FOCUS_GAINED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/FocusEvent.html#FOCUS_LOST\"\u003e\u003ccode\u003eFocusEvent.FOCUS_LOST\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/TextComponent.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eTextComponent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/text/JTextComponent.html\" title\u003d\"class in javax.swing.text\"\u003e\u003ccode\u003eJTextComponent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "return": [
          "the system selection as a \n\u003ccode\u003eClipboard\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if the native platform does not support a system selection \n\u003ccode\u003eClipboard\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMenuShortcutKeyMask",
      "comment": "Determines which modifier key is the appropriate accelerator key for menu shortcuts. Menu shortcuts, which are embodied in the MenuShortcut class, are handled by the MenuBar class. By default, this method returns Event.CTRL_MASK. Toolkit implementations should override this method if the Control key isn\u0027t the correct key for accelerators.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "10"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MenuBar.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eMenuBar\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MenuShortcut.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eMenuShortcut\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "return": [
          "the modifier mask on the \n\u003ccode\u003eEvent\u003c/code\u003e class that is used for menu shortcuts on this toolkit."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMenuShortcutKeyMaskEx",
      "comment": "Determines which extended modifier key is the appropriate accelerator key for menu shortcuts. Menu shortcuts, which are embodied in the MenuShortcut class, are handled by the MenuBar class. By default, this method returns InputEvent.CTRL_DOWN_MASK. Toolkit implementations should override this method if the Control key isn\u0027t the correct key for accelerators.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MenuBar.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eMenuBar\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MenuShortcut.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eMenuShortcut\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "return": [
          "the modifier mask on the \n\u003ccode\u003eInputEvent\u003c/code\u003e class that is used for menu shortcuts on this toolkit"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.UnsupportedOperationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "keyCode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLockingKeyState",
      "comment": "Returns whether the given locking key on the keyboard is currently in its \"on\" state. Valid key codes are VK_CAPS_LOCK, VK_NUM_LOCK, VK_SCROLL_LOCK, and VK_KANA_LOCK.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyCode\u003c/code\u003e - the key code"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekeyCode\u003c/code\u003e is not one of the valid key codes",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the host system doesn\u0027t allow getting the state of this key programmatically, or if the keyboard doesn\u0027t have this key",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the given key is currently in its \"on\" state; otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.UnsupportedOperationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "keyCode"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "on"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLockingKeyState",
      "comment": "Sets the state of the given locking key on the keyboard. Valid key codes are VK_CAPS_LOCK, VK_NUM_LOCK, VK_SCROLL_LOCK, and VK_KANA_LOCK. Depending on the platform, setting the state of a locking key may involve event processing and therefore may not be immediately observable through getLockingKeyState.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyCode\u003c/code\u003e - the key code",
          "\u003ccode\u003eon\u003c/code\u003e - the state of the key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekeyCode\u003c/code\u003e is not one of the valid key codes",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the host system doesn\u0027t allow setting the state of this key programmatically, or if the keyboard doesn\u0027t have this key",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 12,
      "name": "getNativeContainer",
      "comment": "Give native peers the ability to query the native container given a native component (eg the direct parent may be lightweight).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component to fetch the container for"
        ],
        "return": [
          "the native container object for the component"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Cursor",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IndexOutOfBoundsException",
          "type": "Class"
        },
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.awt.Image",
            "type": "Class"
          },
          "field": {
            "name": "cursor"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "hotSpot"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createCustomCursor",
      "comment": "Creates a new custom cursor object. If the image to display is invalid, the cursor will be hidden (made completely transparent), and the hotspot will be set to (0, 0). Note that multi-frame images are invalid and may cause this method to hang.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecursor\u003c/code\u003e - the image to display when the cursor is activated",
          "\u003ccode\u003ehotSpot\u003c/code\u003e - the X and Y of the large cursor\u0027s hot spot; the hotSpot values must be less than the Dimension returned by \n\u003ccode\u003egetBestCursorSize\u003c/code\u003e",
          "\u003ccode\u003ename\u003c/code\u003e - a localized description of the cursor, for Java Accessibility use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the hotSpot values are outside the bounds of the cursor",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "return": [
          "the cursor created"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dimension",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "preferredWidth"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "preferredHeight"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBestCursorSize",
      "comment": "Returns the supported cursor dimension which is closest to the desired sizes. Systems which only support a single cursor size will return that size regardless of the desired sizes. Systems which don\u0027t support custom cursors will return a dimension of 0, 0. Note: if an image is used whose dimensions don\u0027t match a supported size (as returned by this method), the Toolkit implementation will attempt to resize the image to a supported size. Since converting low-resolution images is difficult, no guarantees are made as to the quality of a cursor image which isn\u0027t a supported size. It is therefore recommended that this method be called and an appropriate image used so no image conversion is made.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epreferredWidth\u003c/code\u003e - the preferred cursor width the component would like to use.",
          "\u003ccode\u003epreferredHeight\u003c/code\u003e - the preferred cursor height the component would like to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "return": [
          "the closest matching supported cursor size, or a dimension of 0,0 if the Toolkit implementation doesn\u0027t support custom cursors."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumCursorColors",
      "comment": "Returns the maximum number of colors the Toolkit supports in a custom cursor palette. Note: if an image is used which has more colors in its palette than the supported maximum, the Toolkit implementation will attempt to flatten the palette to the maximum. Since converting low-resolution images is difficult, no guarantees are made as to the quality of a cursor image which has more colors than the system supports. It is therefore recommended that this method be called and an appropriate image used so no image conversion is made.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "return": [
          "the maximum number of colors, or zero if custom cursors are not supported by this Toolkit implementation."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "state"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFrameStateSupported",
      "comment": "Returns whether Toolkit supports this state for Frames. This method tells whether the UI concept of, say, maximization or iconification is supported. It will always return false for \"compound\" states like Frame.ICONIFIED|Frame.MAXIMIZED_VERT. In other words, the rule of thumb is that only queries with a single frame state constant as an argument are meaningful. Note that supporting a given concept is a platform- dependent feature. Due to native limitations the Toolkit object may report a particular state as supported, however at the same time the Toolkit object will be unable to apply the state to a given frame. This circumstance has two following consequences: Only the return value of false for the present method actually indicates that the given state is not supported. If the method returns true the given state may still be unsupported and/or unavailable for a particular frame. The developer should consider examining the value of the WindowEvent.getNewState() method of the WindowEvent received through the WindowStateListener, rather than assuming that the state given to the setExtendedState() method will be definitely applied. For more information see the documentation for the Frame.setExtendedState(int) method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#addWindowStateListener(java.awt.event.WindowStateListener)\"\u003e\u003ccode\u003eWindow.addWindowStateListener(java.awt.event.WindowStateListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estate\u003c/code\u003e - one of named frame state constants."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e returns \n\u003ccode\u003etrue\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e is this frame state is supported by this Toolkit implementation, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "defaultValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getProperty",
      "comment": "Gets a property with the specified key and default. This method returns defaultValue if the property is not found.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key",
          "\u003ccode\u003edefaultValue\u003c/code\u003e - the default value"
        ],
        "return": [
          "the value of the property or the default value if the property was not found"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.EventQueue",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getSystemEventQueue",
      "comment": "Get the application\u0027s or applet\u0027s EventQueue instance. Depending on the Toolkit implementation, different EventQueues may be returned for different applets. Applets should therefore not assume that the EventQueue instance returned by this method will be shared by other applets or the system. If there is a security manager then its checkPermission method is called to check AWTPermission(\"accessEventQueue\").",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is set and it denies access to the \n\u003ccode\u003eEventQueue\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eEventQueue\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.EventQueue",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "getSystemEventQueueImpl",
      "comment": "Gets the application\u0027s or applet\u0027s EventQueue instance, without checking access. For security reasons, this can only be called from a Toolkit subclass.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eEventQueue\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "abstractRecognizerClass"
          }
        },
        {
          "type": {
            "name": "java.awt.dnd.DragSource",
            "type": "Class"
          },
          "field": {
            "name": "ds"
          }
        },
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "srcActions"
          }
        },
        {
          "type": {
            "name": "java.awt.dnd.DragGestureListener",
            "type": "Class"
          },
          "field": {
            "name": "dgl"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.awt.dnd.DragGestureRecognizer",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createDragGestureRecognizer",
      "comment": "Creates a concrete, platform dependent, subclass of the abstract DragGestureRecognizer class requested, and associates it with the DragSource, Component and DragGestureListener specified. subclasses should override this to provide their own implementation",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of DragGestureRecognizer to create"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eabstractRecognizerClass\u003c/code\u003e - The abstract class of the required recognizer",
          "\u003ccode\u003eds\u003c/code\u003e - The DragSource",
          "\u003ccode\u003ec\u003c/code\u003e - The Component target for the DragGestureRecognizer",
          "\u003ccode\u003esrcActions\u003c/code\u003e - The actions permitted for the gesture",
          "\u003ccode\u003edgl\u003c/code\u003e - The DragGestureListener"
        ],
        "return": [
          "the new object or null. Always returns null if GraphicsEnvironment.isHeadless() returns true."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDesktopProperty",
      "comment": "Obtains a value for the specified desktop property. A desktop property is a uniquely named value for a resource that is Toolkit global in nature. Usually it also is an abstract representation for an underlying platform dependent desktop setting. For more information on desktop properties supported by the AWT see AWT Desktop Properties.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the property name"
        ],
        "return": [
          "the value for the specified desktop property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "setDesktopProperty",
      "comment": "Sets the named desktop property to the specified value and fires a property change event to notify any listeners that the value has changed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the property name",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new property value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "lazilyLoadDesktopProperty",
      "comment": "An opportunity to lazily evaluate desktop property values.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name"
        ],
        "return": [
          "the desktop property or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "initializeDesktopProperties",
      "comment": "initializeDesktopProperties",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "pcl"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addPropertyChangeListener",
      "comment": "Adds the specified property change listener for the named desktop property. When a PropertyChangeListenerProxy object is added, its property name is ignored, and the wrapped listener is added. If name is null or pcl is null, no exception is thrown and no action is performed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/PropertyChangeSupport.html#addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003ePropertyChangeSupport.addPropertyChangeListener(String, PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the property to listen for",
          "\u003ccode\u003epcl\u003c/code\u003e - The property change listener"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "pcl"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removePropertyChangeListener",
      "comment": "Removes the specified property change listener for the named desktop property. When a PropertyChangeListenerProxy object is removed, its property name is ignored, and the wrapped listener is removed. If name is null or pcl is null, no exception is thrown and no action is performed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/PropertyChangeSupport.html#removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003ePropertyChangeSupport.removePropertyChangeListener(String, PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the property to remove",
          "\u003ccode\u003epcl\u003c/code\u003e - The property change listener"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPropertyChangeListeners",
      "comment": "Returns an array of all the property change listeners registered on this toolkit. The returned array contains PropertyChangeListenerProxy objects that associate listeners with the names of desktop properties.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/PropertyChangeSupport.html#getPropertyChangeListeners()\"\u003e\u003ccode\u003ePropertyChangeSupport.getPropertyChangeListeners()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of this toolkit\u0027s \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/PropertyChangeListener.html\" title\u003d\"interface in java.beans\"\u003e\u003ccode\u003ePropertyChangeListener\u003c/code\u003e\u003c/a\u003e objects wrapped in \n\u003ccode\u003ejava.beans.PropertyChangeListenerProxy\u003c/code\u003e objects or an empty array if no listeners are added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPropertyChangeListeners",
      "comment": "Returns an array of all property change listeners associated with the specified name of a desktop property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/PropertyChangeSupport.html#getPropertyChangeListeners(java.lang.String)\"\u003e\u003ccode\u003ePropertyChangeSupport.getPropertyChangeListeners(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the named property"
        ],
        "return": [
          "all of the \n\u003ccode\u003ePropertyChangeListener\u003c/code\u003e objects associated with the specified name of a desktop property or an empty array if no such listeners are added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAlwaysOnTopSupported",
      "comment": "Returns whether the always-on-top mode is supported by this toolkit. To detect whether the always-on-top mode is supported for a particular Window, use Window.isAlwaysOnTopSupported().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isAlwaysOnTopSupported()\"\u003e\u003ccode\u003eWindow.isAlwaysOnTopSupported()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setAlwaysOnTop(boolean)\"\u003e\u003ccode\u003eWindow.setAlwaysOnTop(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e, if current toolkit supports the always-on-top mode, otherwise returns \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Dialog$ModalityType",
            "type": "Class"
          },
          "field": {
            "name": "modalityType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isModalityTypeSupported",
      "comment": "Returns whether the given modality type is supported by this toolkit. If a dialog with unsupported modality type is created, then Dialog.ModalityType.MODELESS is used instead.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Dialog.ModalityType.html\" title\u003d\"enum class in java.awt\"\u003e\u003ccode\u003eDialog.ModalityType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Dialog.html#getModalityType()\"\u003e\u003ccode\u003eDialog.getModalityType()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Dialog.html#setModalityType(java.awt.Dialog.ModalityType)\"\u003e\u003ccode\u003eDialog.setModalityType(java.awt.Dialog.ModalityType)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emodalityType\u003c/code\u003e - modality type to be checked for support by this toolkit"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e, if current toolkit supports given modality type, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Dialog$ModalExclusionType",
            "type": "Class"
          },
          "field": {
            "name": "modalExclusionType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isModalExclusionTypeSupported",
      "comment": "Returns whether the given modal exclusion type is supported by this toolkit. If an unsupported modal exclusion type property is set on a window, then Dialog.ModalExclusionType.NO_EXCLUDE is used instead.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Dialog.ModalExclusionType.html\" title\u003d\"enum class in java.awt\"\u003e\u003ccode\u003eDialog.ModalExclusionType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getModalExclusionType()\"\u003e\u003ccode\u003eWindow.getModalExclusionType()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setModalExclusionType(java.awt.Dialog.ModalExclusionType)\"\u003e\u003ccode\u003eWindow.setModalExclusionType(java.awt.Dialog.ModalExclusionType)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emodalExclusionType\u003c/code\u003e - modal exclusion type to be checked for support by this toolkit"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e, if current toolkit supports given modal exclusion type, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.AWTEventListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "eventMask"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addAWTEventListener",
      "comment": "Adds an AWTEventListener to receive all AWTEvents dispatched system-wide that conform to the given eventMask. First, if there is a security manager, its checkPermission method is called with an AWTPermission(\"listenToAllAWTEvents\") permission. This may result in a SecurityException. eventMask is a bitmask of event types to receive. It is constructed by bitwise OR-ing together the event masks defined in AWTEvent. Note: event listener use is not recommended for normal application use, but are intended solely to support special purpose facilities including support for accessibility, event record/playback, and diagnostic tracing. If listener is null, no exception is thrown and no action is performed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#removeAWTEventListener(java.awt.event.AWTEventListener)\"\u003e\u003ccode\u003eremoveAWTEventListener(java.awt.event.AWTEventListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getAWTEventListeners()\"\u003e\u003ccode\u003egetAWTEventListeners()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/AWTEventListener.html\" title\u003d\"interface in java.awt.event\"\u003e\u003ccode\u003eAWTEventListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/AWTEventListenerProxy.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eAWTEventListenerProxy\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the event listener.",
          "\u003ccode\u003eeventMask\u003c/code\u003e - the bitmask of event types to receive"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow the operation."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.AWTEventListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeAWTEventListener",
      "comment": "Removes an AWTEventListener from receiving dispatched AWTEvents. First, if there is a security manager, its checkPermission method is called with an AWTPermission(\"listenToAllAWTEvents\") permission. This may result in a SecurityException. Note: event listener use is not recommended for normal application use, but are intended solely to support special purpose facilities including support for accessibility, event record/playback, and diagnostic tracing. If listener is null, no exception is thrown and no action is performed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#addAWTEventListener(java.awt.event.AWTEventListener,long)\"\u003e\u003ccode\u003eaddAWTEventListener(java.awt.event.AWTEventListener, long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getAWTEventListeners()\"\u003e\u003ccode\u003egetAWTEventListeners()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/AWTEventListener.html\" title\u003d\"interface in java.awt.event\"\u003e\u003ccode\u003eAWTEventListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/AWTEventListenerProxy.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eAWTEventListenerProxy\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the event listener."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow the operation."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.AWTEventListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAWTEventListeners",
      "comment": "Returns an array of all the AWTEventListeners registered on this toolkit. If there is a security manager, its checkPermission method is called with an AWTPermission(\"listenToAllAWTEvents\") permission. This may result in a SecurityException. Listeners can be returned within AWTEventListenerProxy objects, which also contain the event mask for the given listener. Note that listener objects added multiple times appear only once in the returned array.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#addAWTEventListener(java.awt.event.AWTEventListener,long)\"\u003e\u003ccode\u003eaddAWTEventListener(java.awt.event.AWTEventListener, long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#removeAWTEventListener(java.awt.event.AWTEventListener)\"\u003e\u003ccode\u003eremoveAWTEventListener(java.awt.event.AWTEventListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/AWTEventListener.html\" title\u003d\"interface in java.awt.event\"\u003e\u003ccode\u003eAWTEventListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/AWTEventListenerProxy.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eAWTEventListenerProxy\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow the operation."
        ],
        "return": [
          "all of the \n\u003ccode\u003eAWTEventListener\u003c/code\u003es or an empty array if no listeners are currently registered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.AWTEventListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "eventMask"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAWTEventListeners",
      "comment": "Returns an array of all the AWTEventListeners registered on this toolkit which listen to all of the event types specified in the eventMask argument. If there is a security manager, its checkPermission method is called with an AWTPermission(\"listenToAllAWTEvents\") permission. This may result in a SecurityException. Listeners can be returned within AWTEventListenerProxy objects, which also contain the event mask for the given listener. Note that listener objects added multiple times appear only once in the returned array.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#addAWTEventListener(java.awt.event.AWTEventListener,long)\"\u003e\u003ccode\u003eaddAWTEventListener(java.awt.event.AWTEventListener, long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#removeAWTEventListener(java.awt.event.AWTEventListener)\"\u003e\u003ccode\u003eremoveAWTEventListener(java.awt.event.AWTEventListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/AWTEventListener.html\" title\u003d\"interface in java.awt.event\"\u003e\u003ccode\u003eAWTEventListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/AWTEventListenerProxy.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eAWTEventListenerProxy\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eeventMask\u003c/code\u003e - the bitmask of event types to listen for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow the operation."
        ],
        "return": [
          "all of the \n\u003ccode\u003eAWTEventListener\u003c/code\u003es registered on this toolkit for the specified event types, or an empty array if no such listeners are currently registered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.awt.font.TextAttribute",
            "type": "Class"
          },
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.awt.im.InputMethodHighlight",
            "type": "Class"
          },
          "field": {
            "name": "highlight"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "mapInputMethodHighlight",
      "comment": "Returns a map of visual attributes for the abstract level description of the given input method highlight, or null if no mapping is found. The style field of the input method highlight is ignored. The map returned is unmodifiable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehighlight\u003c/code\u003e - input method highlight"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eGraphicsEnvironment.isHeadless\u003c/code\u003e returns true"
        ],
        "return": [
          "style attribute map, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.HeadlessException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "areExtraMouseButtonsEnabled",
      "comment": "Reports whether events from extra mouse buttons are allowed to be processed and posted into EventQueue. To change the returned value it is necessary to set the sun.awt.enableExtraMouseButtons property before the Toolkit class initialization. This setting could be done on the application startup by the following command:  java -Dsun.awt.enableExtraMouseButtons\u003dfalse Application\n Alternatively, the property could be set in the application by using the following code:  System.setProperty(\"sun.awt.enableExtraMouseButtons\", \"true\");\n before the Toolkit class initialization. If not set by the time of the Toolkit class initialization, this property will be initialized with true. Changing this value after the Toolkit class initialization will have no effect.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty(String propertyName)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#setProperty(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eSystem.setProperty(String propertyName, String value)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/EventQueue.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eEventQueue\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - if GraphicsEnvironment.isHeadless() returns true"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if events from extra mouse buttons are allowed to be processed and posted; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a Toolkit.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.Toolkit",
  "comment": "This class is the abstract superclass of all actual implementations of the Abstract Window Toolkit. Subclasses of the \n\u003ccode\u003eToolkit\u003c/code\u003e class are used to bind the various components to particular native toolkit implementations. \n\u003cp\u003e Many GUI events may be delivered to user asynchronously, if the opposite is not specified explicitly. As well as many GUI operations may be performed asynchronously. This fact means that if the state of a component is set, and then the state immediately queried, the returned value may not yet reflect the requested change. This behavior includes, but is not limited to: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eScrolling to a specified position. \u003cbr\u003eFor example, calling \u003ccode\u003eScrollPane.setScrollPosition\u003c/code\u003e and then \u003ccode\u003egetScrollPosition\u003c/code\u003e may return an incorrect value if the original request has not yet been processed. \u003c/li\u003e\n \u003cli\u003eMoving the focus from one component to another. \u003cbr\u003eFor more information, see \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html#transferTiming\"\u003eTiming Focus Transfers\u003c/a\u003e, a section in \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/\"\u003eThe Swing Tutorial\u003c/a\u003e. \u003c/li\u003e\n \u003cli\u003eMaking a top-level container visible. \u003cbr\u003eCalling \u003ccode\u003esetVisible(true)\u003c/code\u003e on a \u003ccode\u003eWindow\u003c/code\u003e, \u003ccode\u003eFrame\u003c/code\u003e or \u003ccode\u003eDialog\u003c/code\u003e may occur asynchronously. \u003c/li\u003e\n \u003cli\u003eSetting the size or location of a top-level container. \u003cbr\u003eCalls to \u003ccode\u003esetSize\u003c/code\u003e, \u003ccode\u003esetBounds\u003c/code\u003e or \u003ccode\u003esetLocation\u003c/code\u003e on a \u003ccode\u003eWindow\u003c/code\u003e, \u003ccode\u003eFrame\u003c/code\u003e or \u003ccode\u003eDialog\u003c/code\u003e are forwarded to the underlying window management system and may be ignored or modified. See \u003ca href\u003d\"Window.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eWindow\u003c/code\u003e\u003c/a\u003e for more information. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Most applications should not call any of the methods in this class directly. The methods defined by \u003ccode\u003eToolkit\u003c/code\u003e are the \"glue\" that joins the platform-independent classes in the \u003ccode\u003ejava.awt\u003c/code\u003e package with their counterparts in \u003ccode\u003ejava.awt.peer\u003c/code\u003e. Some methods defined by \u003ccode\u003eToolkit\u003c/code\u003e query the native operating system directly.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.0"
    ]
  }
}