{
  "packageName": "java.awt",
  "simpleName": "Robot",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "mouseMove",
      "comment": "Moves mouse pointer to given screen coordinates.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X position",
          "\u003ccode\u003ey\u003c/code\u003e - Y position"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "buttons"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "mousePress",
      "comment": "Presses one or more mouse buttons. The mouse buttons should be released using the mouseRelease(int) method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Robot.html#mouseRelease(int)\"\u003e\u003ccode\u003emouseRelease(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getMaskForButton(int)\"\u003e\u003ccode\u003eInputEvent.getMaskForButton(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eToolkit.areExtraMouseButtonsEnabled()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MouseInfo.html#getNumberOfButtons()\"\u003e\u003ccode\u003eMouseInfo.getNumberOfButtons()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eMouseEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebuttons\u003c/code\u003e - the Button mask; a combination of one or more mouse button masks. \n\u003cp\u003e It is allowed to use only a combination of valid values as a \u003ccode\u003ebuttons\u003c/code\u003e parameter. A valid combination consists of \u003ccode\u003eInputEvent.BUTTON1_DOWN_MASK\u003c/code\u003e, \u003ccode\u003eInputEvent.BUTTON2_DOWN_MASK\u003c/code\u003e, \u003ccode\u003eInputEvent.BUTTON3_DOWN_MASK\u003c/code\u003e and values returned by the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getMaskForButton(int)\"\u003e\u003ccode\u003eInputEvent.getMaskForButton(button)\u003c/code\u003e\u003c/a\u003e method. The valid combination also depends on a \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eToolkit.areExtraMouseButtonsEnabled()\u003c/code\u003e\u003c/a\u003e value as follows: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e If support for extended mouse buttons is \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003edisabled\u003c/code\u003e\u003c/a\u003e by Java then it is allowed to use only the following standard button masks: \u003ccode\u003eInputEvent.BUTTON1_DOWN_MASK\u003c/code\u003e, \u003ccode\u003eInputEvent.BUTTON2_DOWN_MASK\u003c/code\u003e, \u003ccode\u003eInputEvent.BUTTON3_DOWN_MASK\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003e If support for extended mouse buttons is \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eenabled\u003c/code\u003e\u003c/a\u003e by Java then it is allowed to use the standard button masks and masks for existing extended mouse buttons, if the mouse has more then three buttons. In that way, it is allowed to use the button masks corresponding to the buttons in the range from 1 to \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MouseInfo.html#getNumberOfButtons()\"\u003e\u003ccode\u003eMouseInfo.getNumberOfButtons()\u003c/code\u003e\u003c/a\u003e. \u003cbr\u003e It is recommended to use the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getMaskForButton(int)\"\u003e\u003ccode\u003eInputEvent.getMaskForButton(button)\u003c/code\u003e\u003c/a\u003e method to obtain the mask for any mouse button by its number. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following standard button masks are also accepted: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eInputEvent.BUTTON1_MASK\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eInputEvent.BUTTON2_MASK\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eInputEvent.BUTTON3_MASK\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e However, it is recommended to use \n\u003ccode\u003eInputEvent.BUTTON1_DOWN_MASK\u003c/code\u003e, \n\u003ccode\u003eInputEvent.BUTTON2_DOWN_MASK\u003c/code\u003e, \n\u003ccode\u003eInputEvent.BUTTON3_DOWN_MASK\u003c/code\u003e instead. Either extended \n\u003ccode\u003e_DOWN_MASK\u003c/code\u003e or old \n\u003ccode\u003e_MASK\u003c/code\u003e values should be used, but both those models should not be mixed.\n\u003cp\u003e\u003c/p\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ebuttons\u003c/code\u003e mask contains the mask for extra mouse button and support for extended mouse buttons is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003edisabled\u003c/code\u003e\u003c/a\u003e by Java",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ebuttons\u003c/code\u003e mask contains the mask for extra mouse button that does not exist on the mouse and support for extended mouse buttons is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eenabled\u003c/code\u003e\u003c/a\u003e by Java"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "buttons"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "mouseRelease",
      "comment": "Releases one or more mouse buttons.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Robot.html#mousePress(int)\"\u003e\u003ccode\u003emousePress(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getMaskForButton(int)\"\u003e\u003ccode\u003eInputEvent.getMaskForButton(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eToolkit.areExtraMouseButtonsEnabled()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MouseInfo.html#getNumberOfButtons()\"\u003e\u003ccode\u003eMouseInfo.getNumberOfButtons()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eMouseEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebuttons\u003c/code\u003e - the Button mask; a combination of one or more mouse button masks. \n\u003cp\u003e It is allowed to use only a combination of valid values as a \u003ccode\u003ebuttons\u003c/code\u003e parameter. A valid combination consists of \u003ccode\u003eInputEvent.BUTTON1_DOWN_MASK\u003c/code\u003e, \u003ccode\u003eInputEvent.BUTTON2_DOWN_MASK\u003c/code\u003e, \u003ccode\u003eInputEvent.BUTTON3_DOWN_MASK\u003c/code\u003e and values returned by the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getMaskForButton(int)\"\u003e\u003ccode\u003eInputEvent.getMaskForButton(button)\u003c/code\u003e\u003c/a\u003e method. The valid combination also depends on a \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eToolkit.areExtraMouseButtonsEnabled()\u003c/code\u003e\u003c/a\u003e value as follows: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e If the support for extended mouse buttons is \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003edisabled\u003c/code\u003e\u003c/a\u003e by Java then it is allowed to use only the following standard button masks: \u003ccode\u003eInputEvent.BUTTON1_DOWN_MASK\u003c/code\u003e, \u003ccode\u003eInputEvent.BUTTON2_DOWN_MASK\u003c/code\u003e, \u003ccode\u003eInputEvent.BUTTON3_DOWN_MASK\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003e If the support for extended mouse buttons is \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eenabled\u003c/code\u003e\u003c/a\u003e by Java then it is allowed to use the standard button masks and masks for existing extended mouse buttons, if the mouse has more then three buttons. In that way, it is allowed to use the button masks corresponding to the buttons in the range from 1 to \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MouseInfo.html#getNumberOfButtons()\"\u003e\u003ccode\u003eMouseInfo.getNumberOfButtons()\u003c/code\u003e\u003c/a\u003e. \u003cbr\u003e It is recommended to use the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getMaskForButton(int)\"\u003e\u003ccode\u003eInputEvent.getMaskForButton(button)\u003c/code\u003e\u003c/a\u003e method to obtain the mask for any mouse button by its number. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following standard button masks are also accepted: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eInputEvent.BUTTON1_MASK\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eInputEvent.BUTTON2_MASK\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eInputEvent.BUTTON3_MASK\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e However, it is recommended to use \n\u003ccode\u003eInputEvent.BUTTON1_DOWN_MASK\u003c/code\u003e, \n\u003ccode\u003eInputEvent.BUTTON2_DOWN_MASK\u003c/code\u003e, \n\u003ccode\u003eInputEvent.BUTTON3_DOWN_MASK\u003c/code\u003e instead. Either extended \n\u003ccode\u003e_DOWN_MASK\u003c/code\u003e or old \n\u003ccode\u003e_MASK\u003c/code\u003e values should be used, but both those models should not be mixed.\n\u003cp\u003e\u003c/p\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ebuttons\u003c/code\u003e mask contains the mask for extra mouse button and support for extended mouse buttons is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003edisabled\u003c/code\u003e\u003c/a\u003e by Java",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ebuttons\u003c/code\u003e mask contains the mask for extra mouse button that does not exist on the mouse and support for extended mouse buttons is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eenabled\u003c/code\u003e\u003c/a\u003e by Java"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "wheelAmt"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "mouseWheel",
      "comment": "Rotates the scroll wheel on wheel-equipped mice.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ewheelAmt\u003c/code\u003e - number of \"notches\" to move the mouse wheel Negative values indicate movement up/away from the user, positive values indicate movement down/towards the user."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "keycode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "keyPress",
      "comment": "Presses a given key. The key should be released using the keyRelease method. Key codes that have more than one physical key associated with them (e.g. KeyEvent.VK_SHIFT could mean either the left or right shift key) will map to the left key.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Robot.html#keyRelease(int)\"\u003e\u003ccode\u003ekeyRelease(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/KeyEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eKeyEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeycode\u003c/code\u003e - Key to press (e.g. \n\u003ccode\u003eKeyEvent.VK_A\u003c/code\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekeycode\u003c/code\u003e is not a valid key"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "keycode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "keyRelease",
      "comment": "Releases a given key. Key codes that have more than one physical key associated with them (e.g. KeyEvent.VK_SHIFT could mean either the left or right shift key) will map to the left key.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Robot.html#keyPress(int)\"\u003e\u003ccode\u003ekeyPress(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/KeyEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eKeyEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeycode\u003c/code\u003e - Key to release (e.g. \n\u003ccode\u003eKeyEvent.VK_A\u003c/code\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekeycode\u003c/code\u003e is not a valid key"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPixelColor",
      "comment": "Returns the color of a pixel at the given screen coordinates.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X position of pixel",
          "\u003ccode\u003ey\u003c/code\u003e - Y position of pixel"
        ],
        "return": [
          "Color of the pixel"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.BufferedImage",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "screenRect"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createScreenCapture",
      "comment": "Creates an image containing pixels read from the screen. This image does not include the mouse cursor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003escreenRect\u003c/code\u003e - Rect to capture in screen coordinates"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003escreenRect\u003c/code\u003e width and height are not greater than zero",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ereadDisplayPixels\u003c/code\u003e permission is not granted"
        ],
        "return": [
          "The captured image"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.MultiResolutionImage",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "screenRect"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createMultiResolutionScreenCapture",
      "comment": "Creates an image containing pixels read from the screen. This image does not include the mouse cursor. This method can be used in case there is a scaling transform from user space to screen (device) space. Typically this means that the display is a high resolution screen, although strictly it means any case in which there is such a transform. Returns a MultiResolutionImage. For a non-scaled display, the MultiResolutionImage will have one image variant: Base Image with user specified size. For a high resolution display where there is a scaling transform, the MultiResolutionImage will have two image variants: Base Image with user specified size. This is scaled from the screen. Native device resolution image with device size pixels. Example: \n      Image nativeResImage;\n      MultiResolutionImage mrImage \u003d robot.createMultiResolutionScreenCapture(frame.getBounds());\n      List\u003cImage\u003e resolutionVariants \u003d mrImage.getResolutionVariants();\n      if (resolutionVariants.size() \u003e 1) {\n          nativeResImage \u003d resolutionVariants.get(1);\n      } else {\n          nativeResImage \u003d resolutionVariants.get(0);\n      }",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003escreenRect\u003c/code\u003e - Rect to capture in screen coordinates"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003escreenRect\u003c/code\u003e width and height are not greater than zero",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ereadDisplayPixels\u003c/code\u003e permission is not granted"
        ],
        "return": [
          "The captured image"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAutoWaitForIdle",
      "comment": "Returns whether this Robot automatically invokes waitForIdle after generating an event.",
      "tagMap": {
        "return": [
          "Whether \n\u003ccode\u003ewaitForIdle\u003c/code\u003e is automatically called"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isOn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAutoWaitForIdle",
      "comment": "Sets whether this Robot automatically invokes waitForIdle after generating an event.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eisOn\u003c/code\u003e - Whether \n\u003ccode\u003ewaitForIdle\u003c/code\u003e is automatically invoked"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAutoDelay",
      "comment": "Returns the number of milliseconds this Robot sleeps after generating an event.",
      "tagMap": {
        "return": [
          "the delay duration in milliseconds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ms"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAutoDelay",
      "comment": "Sets the number of milliseconds this Robot sleeps after generating an event.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ems\u003c/code\u003e - the delay duration in milliseconds"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003ems\u003c/code\u003e is not between 0 and 60,000 milliseconds inclusive"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ms"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "delay",
      "comment": "Sleeps for the specified time. If the invoking thread is interrupted while waiting, then it will return immediately with the interrupt status set. If the interrupted status is already set, this method returns immediately with the interrupt status set.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ems\u003c/code\u003e - time to sleep in milliseconds"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ems\u003c/code\u003e is not between \n\u003ccode\u003e0\u003c/code\u003e and \n\u003ccode\u003e60,000\u003c/code\u003e milliseconds inclusive"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "waitForIdle",
      "comment": "Waits until all events currently on the event queue have been processed.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalThreadStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalThreadStateException\u003c/a\u003e\u003c/code\u003e - if called on the AWT event dispatching thread"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of this Robot.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string representation."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.awt.AWTException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a Robot object in the coordinate system of the primary screen.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTException.html\" title\u003d\"class in java.awt\"\u003eAWTException\u003c/a\u003e\u003c/code\u003e - if the platform configuration does not allow low-level input control. This exception is always thrown when GraphicsEnvironment.isHeadless() returns true",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecreateRobot\u003c/code\u003e permission is not granted"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.awt.AWTException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.awt.GraphicsDevice",
            "type": "Class"
          },
          "field": {
            "name": "screen"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a Robot for the given screen device. Coordinates passed to Robot method calls like mouseMove, getPixelColor and createScreenCapture will be interpreted as being in the same coordinate system as the specified screen. Note that depending on the platform configuration, multiple screens may either: share the same coordinate system to form a combined virtual screen use different coordinate systems to act as independent screens If screen devices are reconfigured such that the coordinate system is affected, the behavior of existing Robot objects is undefined.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsDevice\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003escreen\u003c/code\u003e - A screen GraphicsDevice indicating the coordinate system the Robot will operate in."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTException.html\" title\u003d\"class in java.awt\"\u003eAWTException\u003c/a\u003e\u003c/code\u003e - if the platform configuration does not allow low-level input control. This exception is always thrown when GraphicsEnvironment.isHeadless() returns true.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003escreen\u003c/code\u003e is not a screen GraphicsDevice.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecreateRobot\u003c/code\u003e permission is not granted"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.Robot",
  "comment": "This class is used to generate native system input events for the purposes of test automation, self-running demos, and other applications where control of the mouse and keyboard is needed. The primary purpose of Robot is to facilitate automated testing of Java platform implementations. \n\u003cp\u003e Using the class to generate input events differs from posting events to the AWT event queue or AWT components in that the events are generated in the platform\u0027s native input queue. For example, \u003ccode\u003eRobot.mouseMove\u003c/code\u003e will actually move the mouse cursor instead of just generating mouse move events. \u003c/p\u003e\n\u003cp\u003e Note that some platforms require special privileges or extensions to access low-level input control. If the current platform configuration does not allow input control, an \u003ccode\u003eAWTException\u003c/code\u003e will be thrown when trying to construct Robot objects. For example, X-Window systems will throw the exception if the XTEST 2.2 standard extension is not supported (or not enabled) by the X server. \u003c/p\u003e\n\u003cp\u003e Applications that use Robot for purposes other than self-testing should handle these error conditions gracefully.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}