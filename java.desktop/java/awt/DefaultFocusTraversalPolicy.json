{
  "packageName": "java.awt",
  "simpleName": "DefaultFocusTraversalPolicy",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.ContainerOrderFocusTraversalPolicy",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "aComponent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "accept",
      "comment": "Determines whether a Component is an acceptable choice as the new focus owner. The Component must be visible, displayable, and enabled to be accepted. If client code has explicitly set the focusability of the Component by either overriding Component.isFocusTraversable() or Component.isFocusable(), or by calling Component.setFocusable(), then the Component will be accepted if and only if it is focusable. If, however, the Component is relying on default focusability, then all Canvases, Labels, Panels, Scrollbars, ScrollPanes, Windows, and lightweight Components will be rejected.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ContainerOrderFocusTraversalPolicy.html#accept(java.awt.Component)\"\u003eaccept\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ContainerOrderFocusTraversalPolicy.html\" title\u003d\"class in java.awt\"\u003eContainerOrderFocusTraversalPolicy\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eaComponent\u003c/code\u003e - the Component whose fitness as a focus owner is to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if aComponent meets the above requirements; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a DefaultFocusTraversalPolicy.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.DefaultFocusTraversalPolicy",
  "comment": "A FocusTraversalPolicy that determines traversal order based on the order of child Components in a Container. From a particular focus cycle root, the policy makes a pre-order traversal of the Component hierarchy, and traverses a Container\u0027s children according to the ordering of the array returned by \n\u003ccode\u003eContainer.getComponents()\u003c/code\u003e. Portions of the hierarchy that are not visible and displayable will not be searched. \n\u003cp\u003e If client code has explicitly set the focusability of a Component by either overriding \u003ccode\u003eComponent.isFocusTraversable()\u003c/code\u003e or \u003ccode\u003eComponent.isFocusable()\u003c/code\u003e, or by calling \u003ccode\u003eComponent.setFocusable()\u003c/code\u003e, then a DefaultFocusTraversalPolicy behaves exactly like a ContainerOrderFocusTraversalPolicy. If, however, the Component is relying on default focusability, then a DefaultFocusTraversalPolicy will reject all Components with non-focusable peers. This is the default FocusTraversalPolicy for all AWT Containers. \u003c/p\u003e\n\u003cp\u003e The focusability of a peer is implementation-dependent. Sun recommends that all implementations for a particular native platform construct peers with the same focusability. The recommendations for Windows and Unix are that Canvases, Labels, Panels, Scrollbars, ScrollPanes, Windows, and lightweight Components have non-focusable peers, and all other Components have focusable peers. These recommendations are used in the Sun AWT implementations. Note that the focusability of a Component\u0027s peer is different from, and does not impact, the focusability of the Component itself. \u003c/p\u003e\n\u003cp\u003e Please see \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html\"\u003e How to Use the Focus Subsystem\u003c/a\u003e, a section in \u003cem\u003eThe Java Tutorial\u003c/em\u003e, and the \u003ca href\u003d\"doc-files/FocusSpec.html\"\u003eFocus Specification\u003c/a\u003e for more information.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getComponents()\"\u003e\u003ccode\u003eContainer.getComponents()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isFocusable()\"\u003e\u003ccode\u003eComponent.isFocusable()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setFocusable(boolean)\"\u003e\u003ccode\u003eComponent.setFocusable(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.DefaultFocusTraversalPolicy\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}