{
  "packageName": "java.awt",
  "simpleName": "ComponentOrientation",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.awt.ComponentOrientation",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LEFT_TO_RIGHT",
      "comment": "Items run left to right and lines flow top to bottom Examples: English, French.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.ComponentOrientation",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "RIGHT_TO_LEFT",
      "comment": "Items run right to left and lines flow top to bottom Examples: Arabic, Hebrew.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.ComponentOrientation",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNKNOWN",
      "comment": "Indicates that a component\u0027s orientation has not been set. To preserve the behavior of existing applications, isLeftToRight will return true for this value.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isHorizontal",
      "comment": "Are lines horizontal? This will return true for horizontal, left-to-right writing systems such as Roman.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this orientation has horizontal lines"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLeftToRight",
      "comment": "HorizontalLines: Do items run left-to-right? Vertical Lines: Do lines run left-to-right? This will return true for horizontal, left-to-right writing systems such as Roman.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this orientation is left-to-right"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.ComponentOrientation",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getOrientation",
      "comment": "Returns the orientation that is appropriate for the given locale.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - the specified locale"
        ],
        "return": [
          "the orientation for the locale"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.ComponentOrientation",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.ResourceBundle",
            "type": "Class"
          },
          "field": {
            "name": "bdl"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getOrientation",
      "comment": "Returns the orientation appropriate for the given ResourceBundle\u0027s localization. Three approaches are tried, in the following order: Retrieve a ComponentOrientation object from the ResourceBundle using the string \"Orientation\" as the key. Use the ResourceBundle.getLocale to determine the bundle\u0027s locale, then return the orientation for that locale. Return the default locale\u0027s orientation.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebdl\u003c/code\u003e - the bundle to use"
        ],
        "return": [
          "the orientation"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.awt.ComponentOrientation",
  "comment": "The ComponentOrientation class encapsulates the language-sensitive orientation that is to be used to order the elements of a component or of text. It is used to reflect the differences in this ordering between Western alphabets, Middle Eastern (such as Hebrew), and Far Eastern (such as Japanese). \n\u003cp\u003e Fundamentally, this governs items (such as characters) which are laid out in lines, with the lines then laid out in a block. This also applies to items in a widget: for example, in a check box where the box is positioned relative to the text. \u003c/p\u003e\n\u003cp\u003e There are four different orientations used in modern languages as in the following table.\u003cbr\u003e \u003c/p\u003e\n\u003cpre\u003e LT          RT          TL          TR\n A B C       C B A       A D G       G D A\n D E F       F E D       B E H       H E B\n G H I       I H G       C F I       I F C\n \u003c/pre\u003e\n\u003cbr\u003e (In the header, the two-letter abbreviation represents the item direction in the first letter, and the line direction in the second. For example, LT means \"items left-to-right, lines top-to-bottom\", TL means \"items top-to-bottom, lines left-to-right\", and so on.) \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The orientations are: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eLT - Western Europe (optional for Japanese, Chinese, Korean) \u003c/li\u003e\n \u003cli\u003eRT - Middle East (Arabic, Hebrew) \u003c/li\u003e\n \u003cli\u003eTR - Japanese, Chinese, Korean \u003c/li\u003e\n \u003cli\u003eTL - Mongolian \u003c/li\u003e\n\u003c/ul\u003e Components whose view and controller code depends on orientation should use the \n\u003ccode\u003eisLeftToRight()\u003c/code\u003e and \n\u003ccode\u003eisHorizontal()\u003c/code\u003e methods to determine their behavior. They should not include switch-like code that keys off of the constants, such as: \n\u003cpre\u003e if (orientation \u003d\u003d LEFT_TO_RIGHT) {\n   ...\n } else if (orientation \u003d\u003d RIGHT_TO_LEFT) {\n   ...\n } else {\n   // Oops\n }\n \u003c/pre\u003e This is unsafe, since more constants may be added in the future and since it is not guaranteed that orientation objects will be unique.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.ComponentOrientation\"\u003eSerialized Form\u003c/a\u003e"
    ]
  }
}