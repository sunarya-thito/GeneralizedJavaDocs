{
  "packageName": "java.awt.event",
  "simpleName": "InvocationEvent",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.AWTEvent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INVOCATION_FIRST",
      "comment": "Marks the first integer id for the range of invocation event ids.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.InvocationEvent.INVOCATION_FIRST\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INVOCATION_DEFAULT",
      "comment": "The default id for all InvocationEvents.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.InvocationEvent.INVOCATION_DEFAULT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INVOCATION_LAST",
      "comment": "Marks the last integer id for the range of invocation event ids.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.InvocationEvent.INVOCATION_LAST\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Runnable",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "runnable",
      "comment": "The Runnable whose run() method will be called.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 68,
      "name": "notifier",
      "comment": "The (potentially null) Object whose notifyAll() method will be called immediately after the Runnable.run() method has returned or thrown an exception or after the event was disposed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InvocationEvent.html#isDispatched()\"\u003e\u003ccode\u003eisDispatched()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "catchExceptions",
      "comment": "Set to true if dispatch() catches Throwable and stores it in the exception instance variable. If false, Throwables are propagated up to the EventDispatchThread\u0027s dispatch loop.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dispatch",
      "comment": "Executes the Runnable\u0027s run() method and notifies the notifier (if any) when run() has returned or thrown an exception.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InvocationEvent.html#isDispatched()\"\u003e\u003ccode\u003eisDispatched()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ActiveEvent.html#dispatch()\"\u003edispatch\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ActiveEvent.html\" title\u003d\"interface in java.awt\"\u003eActiveEvent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Exception",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getException",
      "comment": "Returns any Exception caught while executing the Runnable\u0027s run() method.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A reference to the Exception if one was thrown; null if no Exception was thrown or if this InvocationEvent does not catch exceptions"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Throwable",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getThrowable",
      "comment": "Returns any Throwable caught while executing the Runnable\u0027s run() method.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A reference to the Throwable if one was thrown; null if no Throwable was thrown or if this InvocationEvent does not catch Throwables"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWhen",
      "comment": "Returns the timestamp of when this event occurred.",
      "annotations": [],
      "tagMap": {
        "return": [
          "this event\u0027s timestamp"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDispatched",
      "comment": "Returns true if the event is dispatched or any exception is thrown while dispatching, false otherwise. The method should be called by a waiting thread that calls the notifier.wait() method. Since spurious wakeups are possible (as explained in Object.wait()), this method should be used in a waiting loop to ensure that the event got dispatched:      while (!event.isDispatched()) {\n         notifier.wait();\n     }\n If the waiting thread wakes up without dispatching the event, the isDispatched() method returns false, and the while loop executes once more, thus, causing the awakened thread to revert to the waiting mode. If the notifier.notifyAll() happens before the waiting thread enters the notifier.wait() method, the while loop ensures that the waiting thread will not enter the notifier.wait() method. Otherwise, there is no guarantee that the waiting thread will ever be woken from the wait.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InvocationEvent.html#dispatch()\"\u003e\u003ccode\u003edispatch()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InvocationEvent.html#notifier\"\u003e\u003ccode\u003enotifier\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InvocationEvent.html#catchExceptions\"\u003e\u003ccode\u003ecatchExceptions\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the event has been dispatched, or any exception has been thrown while dispatching, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paramString",
      "comment": "Returns a parameter string identifying this event. This method is useful for event-logging and for debugging.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html\" title\u003d\"class in java.awt\"\u003eAWTEvent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A string identifying the event and its attributes"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "runnable",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an InvocationEvent with the specified source which will execute the runnable\u0027s run() method when dispatched. This is a convenience constructor. An invocation of the form InvocationEvent(source, runnable) behaves in exactly the same way as the invocation of InvocationEvent(source, runnable, null, false). This method throws an IllegalArgumentException if source is null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/EventObject.html#getSource()\"\u003e\u003ccode\u003eEventObject.getSource()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InvocationEvent.html#%3Cinit%3E(java.lang.Object,java.lang.Runnable,java.lang.Object,boolean)\"\u003e\u003ccode\u003eInvocationEvent(Object, Runnable, Object, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - The \n\u003ccode\u003eObject\u003c/code\u003e that originated the event",
          "\u003ccode\u003erunnable\u003c/code\u003e - The \n\u003ccode\u003eRunnable\u003c/code\u003e whose \n\u003ccode\u003erun()\u003c/code\u003e method will be executed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "runnable",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "notifier",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "catchThrowables",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an InvocationEvent with the specified source which will execute the runnable\u0027s run() method when dispatched. If notifier is non-null, notifyAll() will be called on it immediately after run() has returned or thrown an exception. An invocation of the form InvocationEvent(source, runnable, notifier, catchThrowables) behaves in exactly the same way as the invocation of InvocationEvent(source, InvocationEvent.INVOCATION_DEFAULT, runnable, notifier, catchThrowables). This method throws an IllegalArgumentException if source is null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/EventObject.html#getSource()\"\u003e\u003ccode\u003eEventObject.getSource()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InvocationEvent.html#%3Cinit%3E(java.lang.Object,int,java.lang.Runnable,java.lang.Object,boolean)\"\u003e\u003ccode\u003eInvocationEvent(Object, int, Runnable, Object, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - The \n\u003ccode\u003eObject\u003c/code\u003e that originated the event",
          "\u003ccode\u003erunnable\u003c/code\u003e - The \n\u003ccode\u003eRunnable\u003c/code\u003e whose \n\u003ccode\u003erun()\u003c/code\u003e method will be executed",
          "\u003ccode\u003enotifier\u003c/code\u003e - The \n\u003ccode\u003eObject\u003c/code\u003e whose \n\u003ccode\u003enotifyAll\u003c/code\u003e method will be called after \n\u003ccode\u003eRunnable.run\u003c/code\u003e has returned or thrown an exception or after the event was disposed",
          "\u003ccode\u003ecatchThrowables\u003c/code\u003e - Specifies whether \n\u003ccode\u003edispatch\u003c/code\u003e should catch Throwable when executing the \n\u003ccode\u003eRunnable\u003c/code\u003e\u0027s \n\u003ccode\u003erun()\u003c/code\u003e method, or should instead propagate those Throwables to the EventDispatchThread\u0027s dispatch loop"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "runnable",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "catchThrowables",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an InvocationEvent with the specified source which will execute the runnable\u0027s run() method when dispatched. If listener is non-null, listener.run() will be called immediately after run has returned, thrown an exception or the event was disposed. This method throws an IllegalArgumentException if source is null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - The \n\u003ccode\u003eObject\u003c/code\u003e that originated the event",
          "\u003ccode\u003erunnable\u003c/code\u003e - The \n\u003ccode\u003eRunnable\u003c/code\u003e whose \n\u003ccode\u003erun()\u003c/code\u003e method will be executed",
          "\u003ccode\u003elistener\u003c/code\u003e - The \n\u003ccode\u003eRunnable\u003c/code\u003e whose \n\u003ccode\u003erun()\u003c/code\u003e method will be called after the \n\u003ccode\u003eInvocationEvent\u003c/code\u003e was dispatched or disposed",
          "\u003ccode\u003ecatchThrowables\u003c/code\u003e - Specifies whether \n\u003ccode\u003edispatch\u003c/code\u003e should catch Throwable when executing the \n\u003ccode\u003eRunnable\u003c/code\u003e\u0027s \n\u003ccode\u003erun()\u003c/code\u003e method, or should instead propagate those Throwables to the EventDispatchThread\u0027s dispatch loop"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "id",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "runnable",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "notifier",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "catchThrowables",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs an InvocationEvent with the specified source and ID which will execute the runnable\u0027s run() method when dispatched. If notifier is non-null, notifyAll() will be called on it immediately after run() has returned or thrown an exception. This method throws an IllegalArgumentException if source is null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/EventObject.html#getSource()\"\u003e\u003ccode\u003eEventObject.getSource()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html#getID()\"\u003e\u003ccode\u003eAWTEvent.getID()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - The \n\u003ccode\u003eObject\u003c/code\u003e that originated the event",
          "\u003ccode\u003eid\u003c/code\u003e - An integer indicating the type of event. For information on allowable values, see the class description for \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InvocationEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eInvocationEvent\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003erunnable\u003c/code\u003e - The \n\u003ccode\u003eRunnable\u003c/code\u003e whose \n\u003ccode\u003erun()\u003c/code\u003e method will be executed",
          "\u003ccode\u003enotifier\u003c/code\u003e - The \n\u003ccode\u003eObject\u003c/code\u003e whose \n\u003ccode\u003enotifyAll\u003c/code\u003e method will be called after \n\u003ccode\u003eRunnable.run\u003c/code\u003e has returned or thrown an exception or after the event was disposed",
          "\u003ccode\u003ecatchThrowables\u003c/code\u003e - Specifies whether \n\u003ccode\u003edispatch\u003c/code\u003e should catch Throwable when executing the \n\u003ccode\u003eRunnable\u003c/code\u003e\u0027s \n\u003ccode\u003erun()\u003c/code\u003e method, or should instead propagate those Throwables to the EventDispatchThread\u0027s dispatch loop"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.event.InvocationEvent",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ActiveEvent.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eActiveEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/EventQueue.html#invokeLater(java.lang.Runnable)\"\u003e\u003ccode\u003eEventQueue.invokeLater(java.lang.Runnable)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/EventQueue.html#invokeAndWait(java.lang.Runnable)\"\u003e\u003ccode\u003eEventQueue.invokeAndWait(java.lang.Runnable)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/AWTEventListener.html\" title\u003d\"interface in java.awt.event\"\u003e\u003ccode\u003eAWTEventListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.event.InvocationEvent\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}