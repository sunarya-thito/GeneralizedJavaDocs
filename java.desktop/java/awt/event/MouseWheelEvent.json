{
  "packageName": "java.awt.event",
  "simpleName": "MouseWheelEvent",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.event.MouseEvent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WHEEL_UNIT_SCROLL",
      "comment": "Constant representing scrolling by \"units\" (like scrolling with the arrow keys)",
      "annotations": [
        {
          "type": "Native"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseWheelEvent.html#getScrollType()\"\u003e\u003ccode\u003egetScrollType()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseWheelEvent.WHEEL_UNIT_SCROLL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WHEEL_BLOCK_SCROLL",
      "comment": "Constant representing scrolling by a \"block\" (like scrolling with page-up, page-down keys)",
      "annotations": [
        {
          "type": "Native"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseWheelEvent.html#getScrollType()\"\u003e\u003ccode\u003egetScrollType()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseWheelEvent.WHEEL_BLOCK_SCROLL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollType",
      "comment": "Returns the type of scrolling that should take place in response to this event. This is determined by the native platform. Legal values are: MouseWheelEvent.WHEEL_UNIT_SCROLL MouseWheelEvent.WHEEL_BLOCK_SCROLL",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Adjustable.html#getUnitIncrement()\"\u003e\u003ccode\u003eAdjustable.getUnitIncrement()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Adjustable.html#getBlockIncrement()\"\u003e\u003ccode\u003eAdjustable.getBlockIncrement()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableUnitIncrement(java.awt.Rectangle,int,int)\"\u003e\u003ccode\u003eScrollable.getScrollableUnitIncrement(java.awt.Rectangle, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableBlockIncrement(java.awt.Rectangle,int,int)\"\u003e\u003ccode\u003eScrollable.getScrollableBlockIncrement(java.awt.Rectangle, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "either MouseWheelEvent.WHEEL_UNIT_SCROLL or MouseWheelEvent.WHEEL_BLOCK_SCROLL, depending on the configuration of the native platform."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScrollAmount",
      "comment": "Returns the number of units that should be scrolled per click of mouse wheel rotation. Only valid if getScrollType returns MouseWheelEvent.WHEEL_UNIT_SCROLL",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseWheelEvent.html#getScrollType()\"\u003e\u003ccode\u003egetScrollType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "number of units to scroll, or an undefined value if \n\u003ccode\u003egetScrollType\u003c/code\u003e returns \n\u003ccode\u003eMouseWheelEvent.WHEEL_BLOCK_SCROLL\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWheelRotation",
      "comment": "Returns the number of \"clicks\" the mouse wheel was rotated, as an integer. A partial rotation may occur if the mouse supports a high-resolution wheel. In this case, the method returns zero until a full \"click\" has been accumulated.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseWheelEvent.html#getPreciseWheelRotation()\"\u003e\u003ccode\u003egetPreciseWheelRotation()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "negative values if the mouse wheel was rotated up/away from the user, and positive values if the mouse wheel was rotated down/ towards the user"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPreciseWheelRotation",
      "comment": "Returns the number of \"clicks\" the mouse wheel was rotated, as a double. A partial rotation may occur if the mouse supports a high-resolution wheel. In this case, the return value will include a fractional \"click\".",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseWheelEvent.html#getWheelRotation()\"\u003e\u003ccode\u003egetWheelRotation()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "negative values if the mouse wheel was rotated up or away from the user, and positive values if the mouse wheel was rotated down or towards the user"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUnitsToScroll",
      "comment": "This is a convenience method to aid in the implementation of the common-case MouseWheelListener - to scroll a ScrollPane or JScrollPane by an amount which conforms to the platform settings. (Note, however, that ScrollPane and JScrollPane already have this functionality built in.) This method returns the number of units to scroll when scroll type is MouseWheelEvent.WHEEL_UNIT_SCROLL, and should only be called if getScrollType returns MouseWheelEvent.WHEEL_UNIT_SCROLL. Direction of scroll, amount of wheel movement, and platform settings for wheel scrolling are all accounted for. This method does not and cannot take into account value of the Adjustable/Scrollable unit increment, as this will vary among scrolling components. A simplified example of how this method might be used in a listener:   mouseWheelMoved(MouseWheelEvent event) {\n      ScrollPane sp \u003d getScrollPaneFromSomewhere();\n      Adjustable adj \u003d sp.getVAdjustable()\n      if (MouseWheelEvent.getScrollType() \u003d\u003d WHEEL_UNIT_SCROLL) {\n          int totalScrollAmount \u003d\n              event.getUnitsToScroll() *\n              adj.getUnitIncrement();\n          adj.setValue(adj.getValue() + totalScrollAmount);\n      }\n  }",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseWheelEvent.html#getScrollType()\"\u003e\u003ccode\u003egetScrollType()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseWheelEvent.html#getScrollAmount()\"\u003e\u003ccode\u003egetScrollAmount()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseWheelListener.html\" title\u003d\"interface in java.awt.event\"\u003e\u003ccode\u003eMouseWheelListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Adjustable.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eAdjustable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Adjustable.html#getUnitIncrement()\"\u003e\u003ccode\u003eAdjustable.getUnitIncrement()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html\" title\u003d\"interface in javax.swing\"\u003e\u003ccode\u003eScrollable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/Scrollable.html#getScrollableUnitIncrement(java.awt.Rectangle,int,int)\"\u003e\u003ccode\u003eScrollable.getScrollableUnitIncrement(java.awt.Rectangle, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ScrollPane.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eScrollPane\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ScrollPane.html#setWheelScrollingEnabled(boolean)\"\u003e\u003ccode\u003eScrollPane.setWheelScrollingEnabled(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JScrollPane.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJScrollPane\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JScrollPane.html#setWheelScrollingEnabled(boolean)\"\u003e\u003ccode\u003eJScrollPane.setWheelScrollingEnabled(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of units to scroll based on the direction and amount of mouse wheel rotation, and on the wheel scrolling settings of the native platform"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paramString",
      "comment": "Returns a parameter string identifying this event. This method is useful for event-logging and for debugging.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html\" title\u003d\"class in java.awt.event\"\u003eMouseEvent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string identifying the event and its attributes"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "id"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "when"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modifiers"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "clickCount"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "popupTrigger"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scrollType"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scrollAmount"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "wheelRotation"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a MouseWheelEvent object with the specified source component, type, modifiers, coordinates, scroll type, scroll amount, and wheel rotation. Absolute coordinates xAbs and yAbs are set to source\u0027s location on screen plus relative coordinates x and y. xAbs and yAbs are set to zero if the source is not showing. Note that passing in an invalid id results in unspecified behavior. This method throws an IllegalArgumentException if source is null.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#%3Cinit%3E(java.awt.Component,int,long,int,int,int,int,boolean)\"\u003e\u003ccode\u003eMouseEvent(java.awt.Component, int, long, int, int, int, int, boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#%3Cinit%3E(java.awt.Component,int,long,int,int,int,int,int,int,boolean,int)\"\u003e\u003ccode\u003eMouseEvent(java.awt.Component, int, long, int, int, int, int, int, int, boolean, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e that originated the event",
          "\u003ccode\u003eid\u003c/code\u003e - the integer that identifies the event",
          "\u003ccode\u003ewhen\u003c/code\u003e - a long that gives the time the event occurred",
          "\u003ccode\u003emodifiers\u003c/code\u003e - the modifier keys down during event (shift, ctrl, alt, meta)",
          "\u003ccode\u003ex\u003c/code\u003e - the horizontal x coordinate for the mouse location",
          "\u003ccode\u003ey\u003c/code\u003e - the vertical y coordinate for the mouse location",
          "\u003ccode\u003eclickCount\u003c/code\u003e - the number of mouse clicks associated with event",
          "\u003ccode\u003epopupTrigger\u003c/code\u003e - a boolean, true if this event is a trigger for a popup-menu",
          "\u003ccode\u003escrollType\u003c/code\u003e - the type of scrolling which should take place in response to this event; valid values are \n\u003ccode\u003eWHEEL_UNIT_SCROLL\u003c/code\u003e and \n\u003ccode\u003eWHEEL_BLOCK_SCROLL\u003c/code\u003e",
          "\u003ccode\u003escrollAmount\u003c/code\u003e - for scrollType \n\u003ccode\u003eWHEEL_UNIT_SCROLL\u003c/code\u003e, the number of units to be scrolled",
          "\u003ccode\u003ewheelRotation\u003c/code\u003e - the integer number of \"clicks\" by which the mouse wheel was rotated"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "id"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "when"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modifiers"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "xAbs"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "yAbs"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "clickCount"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "popupTrigger"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scrollType"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scrollAmount"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "wheelRotation"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a MouseWheelEvent object with the specified source component, type, modifiers, coordinates, absolute coordinates, scroll type, scroll amount, and wheel rotation. Note that passing in an invalid id results in unspecified behavior. This method throws an IllegalArgumentException if source is null. Even if inconsistent values for relative and absolute coordinates are passed to the constructor, the MouseWheelEvent instance is still created and no exception is thrown.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#%3Cinit%3E(java.awt.Component,int,long,int,int,int,int,boolean)\"\u003e\u003ccode\u003eMouseEvent(java.awt.Component, int, long, int, int, int, int, boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#%3Cinit%3E(java.awt.Component,int,long,int,int,int,int,int,int,boolean,int)\"\u003e\u003ccode\u003eMouseEvent(java.awt.Component, int, long, int, int, int, int, int, int, boolean, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e that originated the event",
          "\u003ccode\u003eid\u003c/code\u003e - the integer that identifies the event",
          "\u003ccode\u003ewhen\u003c/code\u003e - a long that gives the time the event occurred",
          "\u003ccode\u003emodifiers\u003c/code\u003e - the modifier keys down during event (shift, ctrl, alt, meta)",
          "\u003ccode\u003ex\u003c/code\u003e - the horizontal x coordinate for the mouse location",
          "\u003ccode\u003ey\u003c/code\u003e - the vertical y coordinate for the mouse location",
          "\u003ccode\u003exAbs\u003c/code\u003e - the absolute horizontal x coordinate for the mouse location",
          "\u003ccode\u003eyAbs\u003c/code\u003e - the absolute vertical y coordinate for the mouse location",
          "\u003ccode\u003eclickCount\u003c/code\u003e - the number of mouse clicks associated with event",
          "\u003ccode\u003epopupTrigger\u003c/code\u003e - a boolean, true if this event is a trigger for a popup-menu",
          "\u003ccode\u003escrollType\u003c/code\u003e - the type of scrolling which should take place in response to this event; valid values are \n\u003ccode\u003eWHEEL_UNIT_SCROLL\u003c/code\u003e and \n\u003ccode\u003eWHEEL_BLOCK_SCROLL\u003c/code\u003e",
          "\u003ccode\u003escrollAmount\u003c/code\u003e - for scrollType \n\u003ccode\u003eWHEEL_UNIT_SCROLL\u003c/code\u003e, the number of units to be scrolled",
          "\u003ccode\u003ewheelRotation\u003c/code\u003e - the integer number of \"clicks\" by which the mouse wheel was rotated"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "id"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "when"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modifiers"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "xAbs"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "yAbs"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "clickCount"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "popupTrigger"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scrollType"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scrollAmount"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "wheelRotation"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "preciseWheelRotation"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a MouseWheelEvent object with the specified source component, type, modifiers, coordinates, absolute coordinates, scroll type, scroll amount, and wheel rotation. Note that passing in an invalid id parameter results in unspecified behavior. This method throws an IllegalArgumentException if source equals null. Even if inconsistent values for relative and absolute coordinates are passed to the constructor, a MouseWheelEvent instance is still created and no exception is thrown.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#%3Cinit%3E(java.awt.Component,int,long,int,int,int,int,boolean)\"\u003e\u003ccode\u003eMouseEvent(java.awt.Component, int, long, int, int, int, int, boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#%3Cinit%3E(java.awt.Component,int,long,int,int,int,int,int,int,boolean,int)\"\u003e\u003ccode\u003eMouseEvent(java.awt.Component, int, long, int, int, int, int, int, int, boolean, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the \n\u003ccode\u003eComponent\u003c/code\u003e that originated the event",
          "\u003ccode\u003eid\u003c/code\u003e - the integer value that identifies the event",
          "\u003ccode\u003ewhen\u003c/code\u003e - a long value that gives the time when the event occurred",
          "\u003ccode\u003emodifiers\u003c/code\u003e - the modifier keys down during event (shift, ctrl, alt, meta)",
          "\u003ccode\u003ex\u003c/code\u003e - the horizontal \n\u003ccode\u003ex\u003c/code\u003e coordinate for the mouse location",
          "\u003ccode\u003ey\u003c/code\u003e - the vertical \n\u003ccode\u003ey\u003c/code\u003e coordinate for the mouse location",
          "\u003ccode\u003exAbs\u003c/code\u003e - the absolute horizontal \n\u003ccode\u003ex\u003c/code\u003e coordinate for the mouse location",
          "\u003ccode\u003eyAbs\u003c/code\u003e - the absolute vertical \n\u003ccode\u003ey\u003c/code\u003e coordinate for the mouse location",
          "\u003ccode\u003eclickCount\u003c/code\u003e - the number of mouse clicks associated with the event",
          "\u003ccode\u003epopupTrigger\u003c/code\u003e - a boolean value, \n\u003ccode\u003etrue\u003c/code\u003e if this event is a trigger for a popup-menu",
          "\u003ccode\u003escrollType\u003c/code\u003e - the type of scrolling which should take place in response to this event; valid values are \n\u003ccode\u003eWHEEL_UNIT_SCROLL\u003c/code\u003e and \n\u003ccode\u003eWHEEL_BLOCK_SCROLL\u003c/code\u003e",
          "\u003ccode\u003escrollAmount\u003c/code\u003e - for scrollType \n\u003ccode\u003eWHEEL_UNIT_SCROLL\u003c/code\u003e, the number of units to be scrolled",
          "\u003ccode\u003ewheelRotation\u003c/code\u003e - the integer number of \"clicks\" by which the mouse wheel was rotated",
          "\u003ccode\u003epreciseWheelRotation\u003c/code\u003e - the double number of \"clicks\" by which the mouse wheel was rotated"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null"
        ],
        "since": [
          "1.7"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.event.MouseWheelEvent",
  "comment": "An event which indicates that the mouse wheel was rotated in a component. \n\u003cp\u003e A wheel mouse is a mouse which has a wheel in place of the middle button. This wheel can be rotated towards or away from the user. Mouse wheels are most often used for scrolling, though other uses are possible. \u003c/p\u003e\n\u003cp\u003e A MouseWheelEvent object is passed to every \u003ccode\u003eMouseWheelListener\u003c/code\u003e object which registered to receive the \"interesting\" mouse events using the component\u0027s \u003ccode\u003eaddMouseWheelListener\u003c/code\u003e method. Each such listener object gets a \u003ccode\u003eMouseEvent\u003c/code\u003e containing the mouse event. \u003c/p\u003e\n\u003cp\u003e Due to the mouse wheel\u0027s special relationship to scrolling Components, MouseWheelEvents are delivered somewhat differently than other MouseEvents. This is because while other MouseEvents usually affect a change on the Component directly under the mouse cursor (for instance, when clicking a button), MouseWheelEvents often have an effect away from the mouse cursor (moving the wheel while over a Component inside a ScrollPane should scroll one of the Scrollbars on the ScrollPane). \u003c/p\u003e\n\u003cp\u003e MouseWheelEvents start delivery from the Component underneath the mouse cursor. If MouseWheelEvents are not enabled on the Component, the event is delivered to the first ancestor Container with MouseWheelEvents enabled. This will usually be a ScrollPane with wheel scrolling enabled. The source Component and x,y coordinates will be relative to the event\u0027s final destination (the ScrollPane). This allows a complex GUI to be installed without modification into a ScrollPane, and for all MouseWheelEvents to be delivered to the ScrollPane for scrolling. \u003c/p\u003e\n\u003cp\u003e Some AWT Components are implemented using native widgets which display their own scrollbars and handle their own scrolling. The particular Components for which this is true will vary from platform to platform. When the mouse wheel is moved over one of these Components, the event is delivered straight to the native widget, and not propagated to ancestors. \u003c/p\u003e\n\u003cp\u003e Platforms offer customization of the amount of scrolling that should take place when the mouse wheel is moved. The two most common settings are to scroll a certain number of \"units\" (commonly lines of text in a text-based component) or an entire \"block\" (similar to page-up/page-down). The MouseWheelEvent offers methods for conforming to the underlying platform settings. These platform settings can be changed at any time by the user. MouseWheelEvents reflect the most recent settings. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eMouseWheelEvent\u003c/code\u003e class includes methods for getting the number of \"clicks\" by which the mouse wheel is rotated. The \u003ca href\u003d\"#getWheelRotation()\"\u003e\u003ccode\u003egetWheelRotation()\u003c/code\u003e\u003c/a\u003e method returns the integer number of \"clicks\" corresponding to the number of notches by which the wheel was rotated. In addition to this method, the \u003ccode\u003eMouseWheelEvent\u003c/code\u003e class provides the \u003ca href\u003d\"#getPreciseWheelRotation()\"\u003e\u003ccode\u003egetPreciseWheelRotation()\u003c/code\u003e\u003c/a\u003e method which returns a double number of \"clicks\" in case a partial rotation occurred. The \u003ca href\u003d\"#getPreciseWheelRotation()\"\u003e\u003ccode\u003egetPreciseWheelRotation()\u003c/code\u003e\u003c/a\u003e method is useful if a mouse supports a high-resolution wheel, such as a freely rotating wheel with no notches. Applications can benefit by using this method to process mouse wheel events more precisely, and thus, making visual perception smoother.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseWheelListener.html\" title\u003d\"interface in java.awt.event\"\u003e\u003ccode\u003eMouseWheelListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ScrollPane.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eScrollPane\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/ScrollPane.html#setWheelScrollingEnabled(boolean)\"\u003e\u003ccode\u003eScrollPane.setWheelScrollingEnabled(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JScrollPane.html\" title\u003d\"class in javax.swing\"\u003e\u003ccode\u003eJScrollPane\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/swing/JScrollPane.html#setWheelScrollingEnabled(boolean)\"\u003e\u003ccode\u003eJScrollPane.setWheelScrollingEnabled(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.event.MouseWheelEvent\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}