{
  "packageName": "java.awt.event",
  "simpleName": "MouseMotionListener",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.EventListener",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "mouseDragged",
      "comment": "Invoked when a mouse button is pressed on a component and then dragged. MOUSE_DRAGGED events will continue to be delivered to the component where the drag originated until the mouse button is released (regardless of whether the mouse position is within the bounds of the component). Due to platform-dependent Drag\u0026Drop implementations, MOUSE_DRAGGED events may not be delivered during a native Drag\u0026Drop operation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event to be processed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.MouseEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "mouseMoved",
      "comment": "Invoked when the mouse cursor has been moved onto a component but no buttons have been pushed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event to be processed"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.awt.event.MouseMotionListener",
  "comment": "The listener interface for receiving mouse motion events on a component. (For clicks and other mouse events, use the \n\u003ccode\u003eMouseListener\u003c/code\u003e.) \n\u003cp\u003e The class that is interested in processing a mouse motion event either implements this interface (and all the methods it contains) or extends the abstract \u003ccode\u003eMouseMotionAdapter\u003c/code\u003e class (overriding only the methods of interest). \u003c/p\u003e\n\u003cp\u003e The listener object created from that class is then registered with a component using the component\u0027s \u003ccode\u003eaddMouseMotionListener\u003c/code\u003e method. A mouse motion event is generated when the mouse is moved or dragged. (Many such events will be generated). When a mouse motion event occurs, the relevant method in the listener object is invoked, and the \u003ccode\u003eMouseEvent\u003c/code\u003e is passed to it.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseMotionAdapter.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eMouseMotionAdapter\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eMouseEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/events/mousemotionlistener.html\"\u003eTutorial: Writing a Mouse Motion Listener\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}