{
  "packageName": "java.awt.event",
  "simpleName": "InputMethodEvent",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.AWTEvent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INPUT_METHOD_FIRST",
      "comment": "Marks the first integer id for the range of input method event ids.",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.InputMethodEvent.INPUT_METHOD_FIRST\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INPUT_METHOD_TEXT_CHANGED",
      "comment": "The event type indicating changed input method text. This event is generated by input methods while processing input.",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.InputMethodEvent.INPUT_METHOD_TEXT_CHANGED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CARET_POSITION_CHANGED",
      "comment": "The event type indicating a changed insertion point in input method text. This event is generated by input methods while processing input if only the caret changed.",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.InputMethodEvent.CARET_POSITION_CHANGED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INPUT_METHOD_LAST",
      "comment": "Marks the last integer id for the range of input method event ids.",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.InputMethodEvent.INPUT_METHOD_LAST\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.AttributedCharacterIterator",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getText",
      "comment": "Gets the combined committed and composed text. Characters from index 0 to index getCommittedCharacterCount() - 1 are committed text, the remaining characters are composed text.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the text. Always null for CARET_POSITION_CHANGED; may be null for INPUT_METHOD_TEXT_CHANGED if there\u0027s no composed or committed text."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCommittedCharacterCount",
      "comment": "Gets the number of committed characters in the text.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of committed characters in the text"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.TextHitInfo",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCaret",
      "comment": "Gets the caret. The offset of the caret is relative to the current composed text; that is, the composed text within getText() if this is an INPUT_METHOD_TEXT_CHANGED event, the composed text within getText() of the preceding INPUT_METHOD_TEXT_CHANGED event otherwise.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the caret (a.k.a. insertion point). Null if there\u0027s no caret within current composed text."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.TextHitInfo",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVisiblePosition",
      "comment": "Gets the position that\u0027s most important to be visible. The offset of the visible position is relative to the current composed text; that is, the composed text within getText() if this is an INPUT_METHOD_TEXT_CHANGED event, the composed text within getText() of the preceding INPUT_METHOD_TEXT_CHANGED event otherwise.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the position that\u0027s most important to be visible. Null if there\u0027s no recommendation for a visible position within current composed text."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "consume",
      "comment": "Consumes this event so that it will not be processed in the default manner by the source which originated it.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html#consume()\"\u003econsume\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html\" title\u003d\"class in java.awt\"\u003eAWTEvent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isConsumed",
      "comment": "Returns whether or not this event has been consumed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputMethodEvent.html#consume()\"\u003e\u003ccode\u003econsume()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html#isConsumed()\"\u003eisConsumed\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html\" title\u003d\"class in java.awt\"\u003eAWTEvent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this event has been consumed; otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWhen",
      "comment": "Returns the time stamp of when this event occurred.",
      "annotations": [],
      "tagMap": {
        "return": [
          "this event\u0027s timestamp"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paramString",
      "comment": "Returns a parameter string identifying this event. This method is useful for event-logging and for debugging. It contains the event ID in text form, the characters of the committed and composed text separated by \"+\", the number of committed characters, the caret, and the visible position.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html\" title\u003d\"class in java.awt\"\u003eAWTEvent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string identifying the event and its attributes"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "id",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "when",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "committedCharacterCount",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.TextHitInfo",
            "type": "Class"
          },
          "name": "caret",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.TextHitInfo",
            "type": "Class"
          },
          "name": "visiblePosition",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an InputMethodEvent with the specified source component, type, time, text, caret, and visiblePosition. The offsets of caret and visiblePosition are relative to the current composed text; that is, the composed text within text if this is an INPUT_METHOD_TEXT_CHANGED event, the composed text within the text of the preceding INPUT_METHOD_TEXT_CHANGED event otherwise. Note that passing in an invalid id results in unspecified behavior. This method throws an IllegalArgumentException if source is null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the object where the event originated",
          "\u003ccode\u003eid\u003c/code\u003e - the event type",
          "\u003ccode\u003ewhen\u003c/code\u003e - a long integer that specifies the time the event occurred",
          "\u003ccode\u003etext\u003c/code\u003e - the combined committed and composed text, committed text first; must be \n\u003ccode\u003enull\u003c/code\u003e when the event type is \n\u003ccode\u003eCARET_POSITION_CHANGED\u003c/code\u003e; may be \n\u003ccode\u003enull\u003c/code\u003e for \n\u003ccode\u003eINPUT_METHOD_TEXT_CHANGED\u003c/code\u003e if there\u0027s no committed or composed text",
          "\u003ccode\u003ecommittedCharacterCount\u003c/code\u003e - the number of committed characters in the text",
          "\u003ccode\u003ecaret\u003c/code\u003e - the caret (a.k.a. insertion point); \n\u003ccode\u003enull\u003c/code\u003e if there\u0027s no caret within current composed text",
          "\u003ccode\u003evisiblePosition\u003c/code\u003e - the position that\u0027s most important to be visible; \n\u003ccode\u003enull\u003c/code\u003e if there\u0027s no recommendation for a visible position within current composed text"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eid\u003c/code\u003e is not in the range \n\u003ccode\u003eINPUT_METHOD_FIRST\u003c/code\u003e..\n\u003ccode\u003eINPUT_METHOD_LAST\u003c/code\u003e; or if id is \n\u003ccode\u003eCARET_POSITION_CHANGED\u003c/code\u003e and \n\u003ccode\u003etext\u003c/code\u003e is not \n\u003ccode\u003enull\u003c/code\u003e; or if \n\u003ccode\u003ecommittedCharacterCount\u003c/code\u003e is not in the range \n\u003ccode\u003e0\u003c/code\u003e..\n\u003ccode\u003e(text.getEndIndex() - text.getBeginIndex())\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "id",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.AttributedCharacterIterator",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "committedCharacterCount",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.TextHitInfo",
            "type": "Class"
          },
          "name": "caret",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.TextHitInfo",
            "type": "Class"
          },
          "name": "visiblePosition",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an InputMethodEvent with the specified source component, type, text, caret, and visiblePosition. The offsets of caret and visiblePosition are relative to the current composed text; that is, the composed text within text if this is an INPUT_METHOD_TEXT_CHANGED event, the composed text within the text of the preceding INPUT_METHOD_TEXT_CHANGED event otherwise. The time stamp for this event is initialized by invoking EventQueue.getMostRecentEventTime(). Note that passing in an invalid id results in unspecified behavior. This method throws an IllegalArgumentException if source is null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the object where the event originated",
          "\u003ccode\u003eid\u003c/code\u003e - the event type",
          "\u003ccode\u003etext\u003c/code\u003e - the combined committed and composed text, committed text first; must be \n\u003ccode\u003enull\u003c/code\u003e when the event type is \n\u003ccode\u003eCARET_POSITION_CHANGED\u003c/code\u003e; may be \n\u003ccode\u003enull\u003c/code\u003e for \n\u003ccode\u003eINPUT_METHOD_TEXT_CHANGED\u003c/code\u003e if there\u0027s no committed or composed text",
          "\u003ccode\u003ecommittedCharacterCount\u003c/code\u003e - the number of committed characters in the text",
          "\u003ccode\u003ecaret\u003c/code\u003e - the caret (a.k.a. insertion point); \n\u003ccode\u003enull\u003c/code\u003e if there\u0027s no caret within current composed text",
          "\u003ccode\u003evisiblePosition\u003c/code\u003e - the position that\u0027s most important to be visible; \n\u003ccode\u003enull\u003c/code\u003e if there\u0027s no recommendation for a visible position within current composed text"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eid\u003c/code\u003e is not in the range \n\u003ccode\u003eINPUT_METHOD_FIRST\u003c/code\u003e..\n\u003ccode\u003eINPUT_METHOD_LAST\u003c/code\u003e; or if id is \n\u003ccode\u003eCARET_POSITION_CHANGED\u003c/code\u003e and \n\u003ccode\u003etext\u003c/code\u003e is not \n\u003ccode\u003enull\u003c/code\u003e; or if \n\u003ccode\u003ecommittedCharacterCount\u003c/code\u003e is not in the range \n\u003ccode\u003e0\u003c/code\u003e..\n\u003ccode\u003e(text.getEndIndex() - text.getBeginIndex())\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "id",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.TextHitInfo",
            "type": "Class"
          },
          "name": "caret",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.TextHitInfo",
            "type": "Class"
          },
          "name": "visiblePosition",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an InputMethodEvent with the specified source component, type, caret, and visiblePosition. The text is set to null, committedCharacterCount to 0. The offsets of caret and visiblePosition are relative to the current composed text; that is, the composed text within the text of the preceding INPUT_METHOD_TEXT_CHANGED event if the event being constructed as a CARET_POSITION_CHANGED event. For an INPUT_METHOD_TEXT_CHANGED event without text, caret and visiblePosition must be null. The time stamp for this event is initialized by invoking EventQueue.getMostRecentEventTime(). Note that passing in an invalid id results in unspecified behavior. This method throws an IllegalArgumentException if source is null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the object where the event originated",
          "\u003ccode\u003eid\u003c/code\u003e - the event type",
          "\u003ccode\u003ecaret\u003c/code\u003e - the caret (a.k.a. insertion point); \n\u003ccode\u003enull\u003c/code\u003e if there\u0027s no caret within current composed text",
          "\u003ccode\u003evisiblePosition\u003c/code\u003e - the position that\u0027s most important to be visible; \n\u003ccode\u003enull\u003c/code\u003e if there\u0027s no recommendation for a visible position within current composed text"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eid\u003c/code\u003e is not in the range \n\u003ccode\u003eINPUT_METHOD_FIRST\u003c/code\u003e..\n\u003ccode\u003eINPUT_METHOD_LAST\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.event.InputMethodEvent",
  "comment": "Input method events contain information about text that is being composed using an input method. Whenever the text changes, the input method sends an event. If the text component that\u0027s currently using the input method is an active client, the event is dispatched to that component. Otherwise, it is dispatched to a separate composition window. \n\u003cp\u003e The text included with the input method event consists of two parts: committed text and composed text. Either part may be empty. The two parts together replace any uncommitted composed text sent in previous events, or the currently selected committed text. Committed text should be integrated into the text component\u0027s persistent data, it will not be sent again. Composed text may be sent repeatedly, with changes to reflect the user\u0027s editing operations. Committed text always precedes composed text.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.event.InputMethodEvent\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}