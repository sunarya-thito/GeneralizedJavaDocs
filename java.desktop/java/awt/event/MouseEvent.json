{
  "packageName": "java.awt.event",
  "simpleName": "MouseEvent",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.event.InputEvent",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MOUSE_FIRST",
      "comment": "The first number in the range of ids used for mouse events.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseEvent.MOUSE_FIRST\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MOUSE_LAST",
      "comment": "The last number in the range of ids used for mouse events.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseEvent.MOUSE_LAST\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MOUSE_CLICKED",
      "comment": "The \"mouse clicked\" event. This MouseEvent occurs when a mouse button is pressed and released.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseEvent.MOUSE_CLICKED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MOUSE_PRESSED",
      "comment": "The \"mouse pressed\" event. This MouseEvent occurs when a mouse button is pushed down.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseEvent.MOUSE_PRESSED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MOUSE_RELEASED",
      "comment": "The \"mouse released\" event. This MouseEvent occurs when a mouse button is let up.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseEvent.MOUSE_RELEASED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MOUSE_MOVED",
      "comment": "The \"mouse moved\" event. This MouseEvent occurs when the mouse position changes.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseEvent.MOUSE_MOVED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MOUSE_ENTERED",
      "comment": "The \"mouse entered\" event. This MouseEvent occurs when the mouse cursor enters the unobscured part of component\u0027s geometry.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseEvent.MOUSE_ENTERED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MOUSE_EXITED",
      "comment": "The \"mouse exited\" event. This MouseEvent occurs when the mouse cursor exits the unobscured part of component\u0027s geometry.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseEvent.MOUSE_EXITED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MOUSE_DRAGGED",
      "comment": "The \"mouse dragged\" event. This MouseEvent occurs when the mouse position changes while a mouse button is pressed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseEvent.MOUSE_DRAGGED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MOUSE_WHEEL",
      "comment": "The \"mouse wheel\" event. This is the only MouseWheelEvent. It occurs when a mouse equipped with a wheel has its wheel rotated.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseEvent.MOUSE_WHEEL\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NOBUTTON",
      "comment": "Indicates no mouse buttons; used by getButton().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseEvent.NOBUTTON\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BUTTON1",
      "comment": "Indicates mouse button #1; used by getButton().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseEvent.BUTTON1\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BUTTON2",
      "comment": "Indicates mouse button #2; used by getButton().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseEvent.BUTTON2\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BUTTON3",
      "comment": "Indicates mouse button #3; used by getButton().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.event.MouseEvent.BUTTON3\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocationOnScreen",
      "comment": "Returns the absolute x, y position of the event. In a virtual device multi-screen environment in which the desktop area could span multiple physical screen devices, these coordinates are relative to the virtual coordinate system. Otherwise, these coordinates are relative to the coordinate system associated with the Component\u0027s GraphicsConfiguration.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003ePoint\u003c/code\u003e object containing the absolute x and y coordinates."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getXOnScreen",
      "comment": "Returns the absolute horizontal x position of the event. In a virtual device multi-screen environment in which the desktop area could span multiple physical screen devices, this coordinate is relative to the virtual coordinate system. Otherwise, this coordinate is relative to the coordinate system associated with the Component\u0027s GraphicsConfiguration.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "x an integer indicating absolute horizontal position."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getYOnScreen",
      "comment": "Returns the absolute vertical y position of the event. In a virtual device multi-screen environment in which the desktop area could span multiple physical screen devices, this coordinate is relative to the virtual coordinate system. Otherwise, this coordinate is relative to the coordinate system associated with the Component\u0027s GraphicsConfiguration.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "y an integer indicating absolute vertical position."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getX",
      "comment": "Returns the horizontal x position of the event relative to the source component.",
      "tagMap": {
        "return": [
          "x an integer indicating horizontal position relative to the component"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getY",
      "comment": "Returns the vertical y position of the event relative to the source component.",
      "tagMap": {
        "return": [
          "y an integer indicating vertical position relative to the component"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Point",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPoint",
      "comment": "Returns the x,y position of the event relative to the source component.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003ePoint\u003c/code\u003e object containing the x and y coordinates relative to the source component"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "translatePoint",
      "comment": "Translates the event\u0027s coordinates to a new position by adding specified x (horizontal) and y (vertical) offsets.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the horizontal x value to add to the current x coordinate position",
          "\u003ccode\u003ey\u003c/code\u003e - the vertical y value to add to the current y coordinate position"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getClickCount",
      "comment": "Returns the number of mouse clicks associated with this event.",
      "tagMap": {
        "return": [
          "integer value for the number of clicks"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getButton",
      "comment": "Returns which, if any, of the mouse buttons has changed state. The returned value is ranged from 0 to the MouseInfo.getNumberOfButtons() value. The returned value includes at least the following constants: NOBUTTON BUTTON1 BUTTON2 BUTTON3 It is allowed to use those constants to compare with the returned button number in the application. For example,  if (anEvent.getButton() \u003d\u003d MouseEvent.BUTTON1) {\n In particular, for a mouse with one, two, or three buttons this method may return the following values: 0 (NOBUTTON) 1 (BUTTON1) 2 (BUTTON2) 3 (BUTTON3) Button numbers greater than BUTTON3 have no constant identifier. So if a mouse with five buttons is installed, this method may return the following values: 0 (NOBUTTON) 1 (BUTTON1) 2 (BUTTON2) 3 (BUTTON3) 4 5 Note: If support for extended mouse buttons is disabled by Java then the AWT event subsystem does not produce mouse events for the extended mouse buttons. So it is not expected that this method returns anything except NOBUTTON, BUTTON1, BUTTON2, BUTTON3.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eToolkit.areExtraMouseButtonsEnabled()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MouseInfo.html#getNumberOfButtons()\"\u003e\u003ccode\u003eMouseInfo.getNumberOfButtons()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#%3Cinit%3E(java.awt.Component,int,long,int,int,int,int,int,int,boolean,int)\"\u003e\u003ccode\u003eMouseEvent(Component, int, long, int, int, int, int, int, int, boolean, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getMaskForButton(int)\"\u003e\u003ccode\u003eInputEvent.getMaskForButton(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "one of the values from 0 to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MouseInfo.html#getNumberOfButtons()\"\u003e\u003ccode\u003eMouseInfo.getNumberOfButtons()\u003c/code\u003e\u003c/a\u003e if support for the extended mouse buttons is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eenabled\u003c/code\u003e\u003c/a\u003e by Java. That range includes \n\u003ccode\u003eNOBUTTON\u003c/code\u003e, \n\u003ccode\u003eBUTTON1\u003c/code\u003e, \n\u003ccode\u003eBUTTON2\u003c/code\u003e, \n\u003ccode\u003eBUTTON3\u003c/code\u003e; \n\u003cbr\u003e \n\u003ccode\u003eNOBUTTON\u003c/code\u003e, \n\u003ccode\u003eBUTTON1\u003c/code\u003e, \n\u003ccode\u003eBUTTON2\u003c/code\u003e or \n\u003ccode\u003eBUTTON3\u003c/code\u003e if support for the extended mouse buttons is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003edisabled\u003c/code\u003e\u003c/a\u003e by Java"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPopupTrigger",
      "comment": "Returns whether or not this mouse event is the popup menu trigger event for the platform. Note: Popup menus are triggered differently on different systems. Therefore, isPopupTrigger should be checked in both mousePressed and mouseReleased for proper cross-platform functionality.",
      "tagMap": {
        "return": [
          "boolean, true if this event is the popup menu trigger for this platform"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modifiers"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getMouseModifiersText",
      "comment": "Returns a String instance describing the modifier keys and mouse buttons that were down during the event, such as \"Shift\", or \"Ctrl+Shift\". These strings can be localized by changing the awt.properties file. Note that the InputEvent.ALT_MASK and InputEvent.BUTTON2_MASK have equal values, so the \"Alt\" string is returned for both modifiers. Likewise, the InputEvent.META_MASK and InputEvent.BUTTON3_MASK have equal values, so the \"Meta\" string is returned for both modifiers. Note that passing negative parameter is incorrect, and will cause the returning an unspecified string. Zero parameter means that no modifiers were passed and will cause the returning an empty string.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getModifiersExText(int)\"\u003e\u003ccode\u003eInputEvent.getModifiersExText(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emodifiers\u003c/code\u003e - A modifier mask describing the modifier keys and mouse buttons that were down during the event"
        ],
        "return": [
          "string string text description of the combination of modifier keys and mouse buttons that were down during the event"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paramString",
      "comment": "Returns a parameter string identifying this event. This method is useful for event-logging and for debugging.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/ComponentEvent.html#paramString()\"\u003eparamString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/ComponentEvent.html\" title\u003d\"class in java.awt.event\"\u003eComponentEvent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string identifying the event and its attributes"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "id"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "when"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modifiers"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "clickCount"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "popupTrigger"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "button"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a MouseEvent object with the specified source component, type, time, modifiers, coordinates, click count, popupTrigger flag, and button number. Creating an invalid event (such as by using more than one of the old _MASKs, or modifier/button values which don\u0027t match) results in unspecified behavior. An invocation of the form MouseEvent(source, id, when, modifiers, x, y, clickCount, popupTrigger, button) behaves in exactly the same way as the invocation MouseEvent(source, id, when, modifiers, x, y, xAbs, yAbs, clickCount, popupTrigger, button) where xAbs and yAbs defines as source\u0027s location on screen plus relative coordinates x and y. xAbs and yAbs are set to zero if the source is not showing. This method throws an IllegalArgumentException if source is null.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/EventObject.html#getSource()\"\u003e\u003ccode\u003eEventObject.getSource()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html#getID()\"\u003e\u003ccode\u003eAWTEvent.getID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getWhen()\"\u003e\u003ccode\u003eInputEvent.getWhen()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getModifiers()\"\u003e\u003ccode\u003eInputEvent.getModifiers()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#getX()\"\u003e\u003ccode\u003egetX()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#getY()\"\u003e\u003ccode\u003egetY()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#getClickCount()\"\u003e\u003ccode\u003egetClickCount()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#isPopupTrigger()\"\u003e\u003ccode\u003eisPopupTrigger()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#getButton()\"\u003e\u003ccode\u003egetButton()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - The \n\u003ccode\u003eComponent\u003c/code\u003e that originated the event",
          "\u003ccode\u003eid\u003c/code\u003e - An integer indicating the type of event. For information on allowable values, see the class description for \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eMouseEvent\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003ewhen\u003c/code\u003e - A long integer that gives the time the event occurred. Passing negative or zero value is not recommended",
          "\u003ccode\u003emodifiers\u003c/code\u003e - a modifier mask describing the modifier keys and mouse buttons (for example, shift, ctrl, alt, and meta) that are down during the event. Only extended modifiers are allowed to be used as a value for this parameter (see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getModifiersEx()\"\u003e\u003ccode\u003eInputEvent.getModifiersEx()\u003c/code\u003e\u003c/a\u003e class for the description of extended modifiers). Passing negative parameter is not recommended. Zero value means that no modifiers were passed",
          "\u003ccode\u003ex\u003c/code\u003e - The horizontal x coordinate for the mouse location. It is allowed to pass negative values",
          "\u003ccode\u003ey\u003c/code\u003e - The vertical y coordinate for the mouse location. It is allowed to pass negative values",
          "\u003ccode\u003eclickCount\u003c/code\u003e - The number of mouse clicks associated with event. Passing negative value is not recommended",
          "\u003ccode\u003epopupTrigger\u003c/code\u003e - A boolean that equals \n\u003ccode\u003etrue\u003c/code\u003e if this event is a trigger for a popup menu",
          "\u003ccode\u003ebutton\u003c/code\u003e - An integer that indicates, which of the mouse buttons has changed its state. The following rules are applied to this parameter: \n\u003cul\u003e \n \u003cli\u003eIf support for the extended mouse buttons is \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003edisabled\u003c/code\u003e\u003c/a\u003e by Java then it is allowed to create \u003ccode\u003eMouseEvent\u003c/code\u003e objects only with the standard buttons: \u003ccode\u003eNOBUTTON\u003c/code\u003e, \u003ccode\u003eBUTTON1\u003c/code\u003e, \u003ccode\u003eBUTTON2\u003c/code\u003e, and \u003ccode\u003eBUTTON3\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003e If support for the extended mouse buttons is \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eenabled\u003c/code\u003e\u003c/a\u003e by Java then it is allowed to create \u003ccode\u003eMouseEvent\u003c/code\u003e objects with the standard buttons. In case the support for extended mouse buttons is \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eenabled\u003c/code\u003e\u003c/a\u003e by Java, then in addition to the standard buttons, \u003ccode\u003eMouseEvent\u003c/code\u003e objects can be created using buttons from the range starting from 4 to \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MouseInfo.html#getNumberOfButtons()\"\u003e\u003ccode\u003eMouseInfo.getNumberOfButtons()\u003c/code\u003e\u003c/a\u003e if the mouse has more than three buttons. \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebutton\u003c/code\u003e is less than zero",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebutton\u003c/code\u003e is greater than BUTTON3 and the support for extended mouse buttons is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003edisabled\u003c/code\u003e\u003c/a\u003e by Java",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebutton\u003c/code\u003e is greater than the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MouseInfo.html#getNumberOfButtons()\"\u003e\u003ccode\u003ecurrent number of buttons\u003c/code\u003e\u003c/a\u003e and the support for extended mouse buttons is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eenabled\u003c/code\u003e\u003c/a\u003e by Java",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if an invalid \n\u003ccode\u003ebutton\u003c/code\u003e value is passed in",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "id"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "when"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modifiers"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "clickCount"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "popupTrigger"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a MouseEvent object with the specified source component, type, modifiers, coordinates, click count, and popupTrigger flag. An invocation of the form MouseEvent(source, id, when, modifiers, x, y, clickCount, popupTrigger) behaves in exactly the same way as the invocation MouseEvent(source, id, when, modifiers, x, y, xAbs, yAbs, clickCount, popupTrigger, MouseEvent.NOBUTTON) where xAbs and yAbs defines as source\u0027s location on screen plus relative coordinates x and y. xAbs and yAbs are set to zero if the source is not showing. This method throws an IllegalArgumentException if source is null.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/EventObject.html#getSource()\"\u003e\u003ccode\u003eEventObject.getSource()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html#getID()\"\u003e\u003ccode\u003eAWTEvent.getID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getWhen()\"\u003e\u003ccode\u003eInputEvent.getWhen()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getModifiers()\"\u003e\u003ccode\u003eInputEvent.getModifiers()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#getX()\"\u003e\u003ccode\u003egetX()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#getY()\"\u003e\u003ccode\u003egetY()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#getClickCount()\"\u003e\u003ccode\u003egetClickCount()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#isPopupTrigger()\"\u003e\u003ccode\u003eisPopupTrigger()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - The \n\u003ccode\u003eComponent\u003c/code\u003e that originated the event",
          "\u003ccode\u003eid\u003c/code\u003e - An integer indicating the type of event. For information on allowable values, see the class description for \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eMouseEvent\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003ewhen\u003c/code\u003e - A long integer that gives the time the event occurred. Passing negative or zero value is not recommended",
          "\u003ccode\u003emodifiers\u003c/code\u003e - a modifier mask describing the modifier keys and mouse buttons (for example, shift, ctrl, alt, and meta) that are down during the event. Only extended modifiers are allowed to be used as a value for this parameter (see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getModifiersEx()\"\u003e\u003ccode\u003eInputEvent.getModifiersEx()\u003c/code\u003e\u003c/a\u003e class for the description of extended modifiers). Passing negative parameter is not recommended. Zero value means that no modifiers were passed",
          "\u003ccode\u003ex\u003c/code\u003e - The horizontal x coordinate for the mouse location. It is allowed to pass negative values",
          "\u003ccode\u003ey\u003c/code\u003e - The vertical y coordinate for the mouse location. It is allowed to pass negative values",
          "\u003ccode\u003eclickCount\u003c/code\u003e - The number of mouse clicks associated with event. Passing negative value is not recommended",
          "\u003ccode\u003epopupTrigger\u003c/code\u003e - A boolean that equals \n\u003ccode\u003etrue\u003c/code\u003e if this event is a trigger for a popup menu"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "id"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "when"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modifiers"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "xAbs"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "yAbs"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "clickCount"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "popupTrigger"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "button"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a MouseEvent object with the specified source component, type, time, modifiers, coordinates, absolute coordinates, click count, popupTrigger flag, and button number. Creating an invalid event (such as by using more than one of the old _MASKs, or modifier/button values which don\u0027t match) results in unspecified behavior. Even if inconsistent values for relative and absolute coordinates are passed to the constructor, the mouse event instance is still created and no exception is thrown. This method throws an IllegalArgumentException if source is null.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/EventObject.html#getSource()\"\u003e\u003ccode\u003eEventObject.getSource()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTEvent.html#getID()\"\u003e\u003ccode\u003eAWTEvent.getID()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getWhen()\"\u003e\u003ccode\u003eInputEvent.getWhen()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getModifiers()\"\u003e\u003ccode\u003eInputEvent.getModifiers()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#getX()\"\u003e\u003ccode\u003egetX()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#getY()\"\u003e\u003ccode\u003egetY()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#getXOnScreen()\"\u003e\u003ccode\u003egetXOnScreen()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#getYOnScreen()\"\u003e\u003ccode\u003egetYOnScreen()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#getClickCount()\"\u003e\u003ccode\u003egetClickCount()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#isPopupTrigger()\"\u003e\u003ccode\u003eisPopupTrigger()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html#getButton()\"\u003e\u003ccode\u003egetButton()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eToolkit.areExtraMouseButtonsEnabled()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MouseInfo.html#getNumberOfButtons()\"\u003e\u003ccode\u003eMouseInfo.getNumberOfButtons()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getMaskForButton(int)\"\u003e\u003ccode\u003eInputEvent.getMaskForButton(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - The \n\u003ccode\u003eComponent\u003c/code\u003e that originated the event",
          "\u003ccode\u003eid\u003c/code\u003e - An integer indicating the type of event. For information on allowable values, see the class description for \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eMouseEvent\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003ewhen\u003c/code\u003e - A long integer that gives the time the event occurred. Passing negative or zero value is not recommended",
          "\u003ccode\u003emodifiers\u003c/code\u003e - a modifier mask describing the modifier keys and mouse buttons (for example, shift, ctrl, alt, and meta) that are down during the event. Only extended modifiers are allowed to be used as a value for this parameter (see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/InputEvent.html#getModifiersEx()\"\u003e\u003ccode\u003eInputEvent.getModifiersEx()\u003c/code\u003e\u003c/a\u003e class for the description of extended modifiers). Passing negative parameter is not recommended. Zero value means that no modifiers were passed",
          "\u003ccode\u003ex\u003c/code\u003e - The horizontal x coordinate for the mouse location. It is allowed to pass negative values",
          "\u003ccode\u003ey\u003c/code\u003e - The vertical y coordinate for the mouse location. It is allowed to pass negative values",
          "\u003ccode\u003exAbs\u003c/code\u003e - The absolute horizontal x coordinate for the mouse location It is allowed to pass negative values",
          "\u003ccode\u003eyAbs\u003c/code\u003e - The absolute vertical y coordinate for the mouse location It is allowed to pass negative values",
          "\u003ccode\u003eclickCount\u003c/code\u003e - The number of mouse clicks associated with event. Passing negative value is not recommended",
          "\u003ccode\u003epopupTrigger\u003c/code\u003e - A boolean that equals \n\u003ccode\u003etrue\u003c/code\u003e if this event is a trigger for a popup menu",
          "\u003ccode\u003ebutton\u003c/code\u003e - An integer that indicates, which of the mouse buttons has changed its state. The following rules are applied to this parameter: \n\u003cul\u003e \n \u003cli\u003eIf support for the extended mouse buttons is \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003edisabled\u003c/code\u003e\u003c/a\u003e by Java then it is allowed to create \u003ccode\u003eMouseEvent\u003c/code\u003e objects only with the standard buttons: \u003ccode\u003eNOBUTTON\u003c/code\u003e, \u003ccode\u003eBUTTON1\u003c/code\u003e, \u003ccode\u003eBUTTON2\u003c/code\u003e, and \u003ccode\u003eBUTTON3\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003e If support for the extended mouse buttons is \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eenabled\u003c/code\u003e\u003c/a\u003e by Java then it is allowed to create \u003ccode\u003eMouseEvent\u003c/code\u003e objects with the standard buttons. In case the support for extended mouse buttons is \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eenabled\u003c/code\u003e\u003c/a\u003e by Java, then in addition to the standard buttons, \u003ccode\u003eMouseEvent\u003c/code\u003e objects can be created using buttons from the range starting from 4 to \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MouseInfo.html#getNumberOfButtons()\"\u003e\u003ccode\u003eMouseInfo.getNumberOfButtons()\u003c/code\u003e\u003c/a\u003e if the mouse has more than three buttons. \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebutton\u003c/code\u003e is less than zero",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebutton\u003c/code\u003e is greater than BUTTON3 and the support for extended mouse buttons is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003edisabled\u003c/code\u003e\u003c/a\u003e by Java",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebutton\u003c/code\u003e is greater than the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MouseInfo.html#getNumberOfButtons()\"\u003e\u003ccode\u003ecurrent number of buttons\u003c/code\u003e\u003c/a\u003e and the support for extended mouse buttons is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#areExtraMouseButtonsEnabled()\"\u003e\u003ccode\u003eenabled\u003c/code\u003e\u003c/a\u003e by Java",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if an invalid \n\u003ccode\u003ebutton\u003c/code\u003e value is passed in",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is null"
        ],
        "since": [
          "1.6"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.event.MouseEvent",
  "comment": "An event which indicates that a mouse action occurred in a component. A mouse action is considered to occur in a particular component if and only if the mouse cursor is over the unobscured part of the component\u0027s bounds when the action happens. For lightweight components, such as Swing\u0027s components, mouse events are only dispatched to the component if the mouse event type has been enabled on the component. A mouse event type is enabled by adding the appropriate mouse-based \n\u003ccode\u003eEventListener\u003c/code\u003e to the component (\n\u003ca href\u003d\"MouseListener.html\" title\u003d\"interface in java.awt.event\"\u003e\u003ccode\u003eMouseListener\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"MouseMotionListener.html\" title\u003d\"interface in java.awt.event\"\u003e\u003ccode\u003eMouseMotionListener\u003c/code\u003e\u003c/a\u003e), or by invoking \n\u003ca href\u003d\"../Component.html#enableEvents(long)\"\u003e\u003ccode\u003eComponent.enableEvents(long)\u003c/code\u003e\u003c/a\u003e with the appropriate mask parameter (\n\u003ccode\u003eAWTEvent.MOUSE_EVENT_MASK\u003c/code\u003e or \n\u003ccode\u003eAWTEvent.MOUSE_MOTION_EVENT_MASK\u003c/code\u003e). If the mouse event type has not been enabled on the component, the corresponding mouse events are dispatched to the first ancestor that has enabled the mouse event type. \n\u003cp\u003e For example, if a \u003ccode\u003eMouseListener\u003c/code\u003e has been added to a component, or \u003ccode\u003eenableEvents(AWTEvent.MOUSE_EVENT_MASK)\u003c/code\u003e has been invoked, then all the events defined by \u003ccode\u003eMouseListener\u003c/code\u003e are dispatched to the component. On the other hand, if a \u003ccode\u003eMouseMotionListener\u003c/code\u003e has not been added and \u003ccode\u003eenableEvents\u003c/code\u003e has not been invoked with \u003ccode\u003eAWTEvent.MOUSE_MOTION_EVENT_MASK\u003c/code\u003e, then mouse motion events are not dispatched to the component. Instead the mouse motion events are dispatched to the first ancestors that has enabled mouse motion events. \u003c/p\u003e\n\u003cp\u003e This low-level event is generated by a component object for: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eMouse Events \n  \u003cul\u003e \n   \u003cli\u003ea mouse button is pressed \u003c/li\u003e\n   \u003cli\u003ea mouse button is released \u003c/li\u003e\n   \u003cli\u003ea mouse button is clicked (pressed and released) \u003c/li\u003e\n   \u003cli\u003ethe mouse cursor enters the unobscured part of component\u0027s geometry \u003c/li\u003e\n   \u003cli\u003ethe mouse cursor exits the unobscured part of component\u0027s geometry \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n \u003cli\u003e Mouse Motion Events \n  \u003cul\u003e \n   \u003cli\u003ethe mouse is moved \u003c/li\u003e\n   \u003cli\u003ethe mouse is dragged \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eMouseEvent\u003c/code\u003e object is passed to every \u003ccode\u003eMouseListener\u003c/code\u003e or \u003ccode\u003eMouseAdapter\u003c/code\u003e object which is registered to receive the \"interesting\" mouse events using the component\u0027s \u003ccode\u003eaddMouseListener\u003c/code\u003e method. (\u003ccode\u003eMouseAdapter\u003c/code\u003e objects implement the \u003ccode\u003eMouseListener\u003c/code\u003e interface.) Each such listener object gets a \u003ccode\u003eMouseEvent\u003c/code\u003e containing the mouse event. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eMouseEvent\u003c/code\u003e object is also passed to every \u003ccode\u003eMouseMotionListener\u003c/code\u003e or \u003ccode\u003eMouseMotionAdapter\u003c/code\u003e object which is registered to receive mouse motion events using the component\u0027s \u003ccode\u003eaddMouseMotionListener\u003c/code\u003e method. (\u003ccode\u003eMouseMotionAdapter\u003c/code\u003e objects implement the \u003ccode\u003eMouseMotionListener\u003c/code\u003e interface.) Each such listener object gets a \u003ccode\u003eMouseEvent\u003c/code\u003e containing the mouse motion event. \u003c/p\u003e\n\u003cp\u003e When a mouse button is clicked, events are generated and sent to the registered \u003ccode\u003eMouseListener\u003c/code\u003es. The state of modal keys can be retrieved using \u003ca href\u003d\"InputEvent.html#getModifiers()\"\u003e\u003ccode\u003eInputEvent.getModifiers()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"InputEvent.html#getModifiersEx()\"\u003e\u003ccode\u003eInputEvent.getModifiersEx()\u003c/code\u003e\u003c/a\u003e. The button mask returned by \u003ca href\u003d\"InputEvent.html#getModifiers()\"\u003e\u003ccode\u003eInputEvent.getModifiers()\u003c/code\u003e\u003c/a\u003e reflects only the button that changed state, not the current state of all buttons. (Note: Due to overlap in the values of ALT_MASK/BUTTON2_MASK and META_MASK/BUTTON3_MASK, this is not always true for mouse events involving modifier keys). To get the state of all buttons and modifier keys, use \u003ca href\u003d\"InputEvent.html#getModifiersEx()\"\u003e\u003ccode\u003eInputEvent.getModifiersEx()\u003c/code\u003e\u003c/a\u003e. The button which has changed state is returned by \u003ca href\u003d\"#getButton()\"\u003e\u003ccode\u003egetButton()\u003c/code\u003e\u003c/a\u003e \u003c/p\u003e\n\u003cp\u003e For example, if the first mouse button is pressed, events are sent in the following order: \u003c/p\u003e\n\u003cpre\u003e\u003cb\u003e\n    id              modifiers    button\u003c/b\u003e\u003ccode\u003e\n    MOUSE_PRESSED:  BUTTON1_MASK BUTTON1\n    MOUSE_RELEASED: BUTTON1_MASK BUTTON1\n    MOUSE_CLICKED:  BUTTON1_MASK BUTTON1\n \u003c/code\u003e\u003c/pre\u003e When multiple mouse buttons are pressed, each press, release, and click results in a separate event. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e For example, if the user presses \u003cb\u003ebutton 1\u003c/b\u003e followed by \u003cb\u003ebutton 2\u003c/b\u003e, and then releases them in the same order, the following sequence of events is generated: \u003c/p\u003e\n\u003cpre\u003e\u003cb\u003e\n    id              modifiers    button\u003c/b\u003e\u003ccode\u003e\n    MOUSE_PRESSED:  BUTTON1_MASK BUTTON1\n    MOUSE_PRESSED:  BUTTON2_MASK BUTTON2\n    MOUSE_RELEASED: BUTTON1_MASK BUTTON1\n    MOUSE_CLICKED:  BUTTON1_MASK BUTTON1\n    MOUSE_RELEASED: BUTTON2_MASK BUTTON2\n    MOUSE_CLICKED:  BUTTON2_MASK BUTTON2\n \u003c/code\u003e\u003c/pre\u003e If \n\u003cb\u003ebutton 2\u003c/b\u003e is released first, the \n\u003ccode\u003eMOUSE_RELEASED\u003c/code\u003e/\n\u003ccode\u003eMOUSE_CLICKED\u003c/code\u003e pair for \n\u003ccode\u003eBUTTON2_MASK\u003c/code\u003e arrives first, followed by the pair for \n\u003ccode\u003eBUTTON1_MASK\u003c/code\u003e. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Some extra mouse buttons are added to extend the standard set of buttons represented by the following constants:\u003ccode\u003eBUTTON1\u003c/code\u003e, \u003ccode\u003eBUTTON2\u003c/code\u003e, and \u003ccode\u003eBUTTON3\u003c/code\u003e. Extra buttons have no assigned \u003ccode\u003eBUTTONx\u003c/code\u003e constants as well as their button masks have no assigned \u003ccode\u003eBUTTONx_DOWN_MASK\u003c/code\u003e constants. Nevertheless, ordinal numbers starting from 4 may be used as button numbers (button ids). Values obtained by the \u003ca href\u003d\"InputEvent.html#getMaskForButton(int)\"\u003e\u003ccode\u003egetMaskForButton(button)\u003c/code\u003e\u003c/a\u003e method may be used as button masks. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eMOUSE_DRAGGED\u003c/code\u003e events are delivered to the \u003ccode\u003eComponent\u003c/code\u003e in which the mouse button was pressed until the mouse button is released (regardless of whether the mouse position is within the bounds of the \u003ccode\u003eComponent\u003c/code\u003e). Due to platform-dependent Drag\u0026amp;Drop implementations, \u003ccode\u003eMOUSE_DRAGGED\u003c/code\u003e events may not be delivered during a native Drag\u0026amp;Drop operation. In a multi-screen environment mouse drag events are delivered to the \u003ccode\u003eComponent\u003c/code\u003e even if the mouse position is outside the bounds of the \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e associated with that \u003ccode\u003eComponent\u003c/code\u003e. However, the reported position for mouse drag events in this case may differ from the actual mouse position: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eIn a multi-screen environment without a virtual device: \u003cbr\u003e The reported coordinates for mouse drag events are clipped to fit within the bounds of the \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e associated with the \u003ccode\u003eComponent\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eIn a multi-screen environment with a virtual device: \u003cbr\u003e The reported coordinates for mouse drag events are clipped to fit within the bounds of the virtual device associated with the \u003ccode\u003eComponent\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e An unspecified behavior will be caused if the \u003ccode\u003eid\u003c/code\u003e parameter of any particular \u003ccode\u003eMouseEvent\u003c/code\u003e instance is not in the range from \u003ccode\u003eMOUSE_FIRST\u003c/code\u003e to \u003ccode\u003eMOUSE_LAST\u003c/code\u003e-1 (\u003ccode\u003eMOUSE_WHEEL\u003c/code\u003e is not acceptable).\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseAdapter.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eMouseAdapter\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseListener.html\" title\u003d\"interface in java.awt.event\"\u003e\u003ccode\u003eMouseListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseMotionAdapter.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eMouseMotionAdapter\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseMotionListener.html\" title\u003d\"interface in java.awt.event\"\u003e\u003ccode\u003eMouseMotionListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/MouseWheelListener.html\" title\u003d\"interface in java.awt.event\"\u003e\u003ccode\u003eMouseWheelListener\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/events/mouselistener.html\"\u003eTutorial: Writing a Mouse Listener\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/uiswing/events/mousemotionlistener.html\"\u003eTutorial: Writing a Mouse Motion Listener\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.event.MouseEvent\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}