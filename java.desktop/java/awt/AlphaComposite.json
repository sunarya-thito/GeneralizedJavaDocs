{
  "packageName": "java.awt",
  "simpleName": "AlphaComposite",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CLEAR",
      "comment": "Both the color and the alpha of the destination are cleared (Porter-Duff Clear rule). Neither the source nor the destination is used as input. Fs \u003d 0 and Fd \u003d 0, thus:   Ar \u003d 0\n  Cr \u003d 0",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.AlphaComposite.CLEAR\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SRC",
      "comment": "The source is copied to the destination (Porter-Duff Source rule). The destination is not used as input. Fs \u003d 1 and Fd \u003d 0, thus:   Ar \u003d As\n  Cr \u003d Cs",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.AlphaComposite.SRC\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DST",
      "comment": "The destination is left untouched (Porter-Duff Destination rule). Fs \u003d 0 and Fd \u003d 1, thus:   Ar \u003d Ad\n  Cr \u003d Cd",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.AlphaComposite.DST\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SRC_OVER",
      "comment": "The source is composited over the destination (Porter-Duff Source Over Destination rule). Fs \u003d 1 and Fd \u003d (1-As), thus:   Ar \u003d As + Ad*(1-As)\n  Cr \u003d Cs + Cd*(1-As)",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.AlphaComposite.SRC_OVER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DST_OVER",
      "comment": "The destination is composited over the source and the result replaces the destination (Porter-Duff Destination Over Source rule). Fs \u003d (1-Ad) and Fd \u003d 1, thus:   Ar \u003d As*(1-Ad) + Ad\n  Cr \u003d Cs*(1-Ad) + Cd",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.AlphaComposite.DST_OVER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SRC_IN",
      "comment": "The part of the source lying inside of the destination replaces the destination (Porter-Duff Source In Destination rule). Fs \u003d Ad and Fd \u003d 0, thus:   Ar \u003d As*Ad\n  Cr \u003d Cs*Ad",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.AlphaComposite.SRC_IN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DST_IN",
      "comment": "The part of the destination lying inside of the source replaces the destination (Porter-Duff Destination In Source rule). Fs \u003d 0 and Fd \u003d As, thus:   Ar \u003d Ad*As\n  Cr \u003d Cd*As",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.AlphaComposite.DST_IN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SRC_OUT",
      "comment": "The part of the source lying outside of the destination replaces the destination (Porter-Duff Source Held Out By Destination rule). Fs \u003d (1-Ad) and Fd \u003d 0, thus:   Ar \u003d As*(1-Ad)\n  Cr \u003d Cs*(1-Ad)",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.AlphaComposite.SRC_OUT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DST_OUT",
      "comment": "The part of the destination lying outside of the source replaces the destination (Porter-Duff Destination Held Out By Source rule). Fs \u003d 0 and Fd \u003d (1-As), thus:   Ar \u003d Ad*(1-As)\n  Cr \u003d Cd*(1-As)",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.AlphaComposite.DST_OUT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SRC_ATOP",
      "comment": "The part of the source lying inside of the destination is composited onto the destination (Porter-Duff Source Atop Destination rule). Fs \u003d Ad and Fd \u003d (1-As), thus:   Ar \u003d As*Ad + Ad*(1-As) \u003d Ad\n  Cr \u003d Cs*Ad + Cd*(1-As)",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.AlphaComposite.SRC_ATOP\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DST_ATOP",
      "comment": "The part of the destination lying inside of the source is composited over the source and replaces the destination (Porter-Duff Destination Atop Source rule). Fs \u003d (1-Ad) and Fd \u003d As, thus:   Ar \u003d As*(1-Ad) + Ad*As \u003d As\n  Cr \u003d Cs*(1-Ad) + Cd*As",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.AlphaComposite.DST_ATOP\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "XOR",
      "comment": "The part of the source that lies outside of the destination is combined with the part of the destination that lies outside of the source (Porter-Duff Source Xor Destination rule). Fs \u003d (1-Ad) and Fd \u003d (1-As), thus:   Ar \u003d As*(1-Ad) + Ad*(1-As)\n  Cr \u003d Cs*(1-Ad) + Cd*(1-As)",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.AlphaComposite.XOR\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "Clear",
      "comment": "AlphaComposite object that implements the opaque CLEAR rule with an alpha of 1.0f.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#CLEAR\"\u003e\u003ccode\u003eCLEAR\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "Src",
      "comment": "AlphaComposite object that implements the opaque SRC rule with an alpha of 1.0f.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC\"\u003e\u003ccode\u003eSRC\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "Dst",
      "comment": "AlphaComposite object that implements the opaque DST rule with an alpha of 1.0f.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST\"\u003e\u003ccode\u003eDST\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SrcOver",
      "comment": "AlphaComposite object that implements the opaque SRC_OVER rule with an alpha of 1.0f.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_OVER\"\u003e\u003ccode\u003eSRC_OVER\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DstOver",
      "comment": "AlphaComposite object that implements the opaque DST_OVER rule with an alpha of 1.0f.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_OVER\"\u003e\u003ccode\u003eDST_OVER\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SrcIn",
      "comment": "AlphaComposite object that implements the opaque SRC_IN rule with an alpha of 1.0f.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_IN\"\u003e\u003ccode\u003eSRC_IN\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DstIn",
      "comment": "AlphaComposite object that implements the opaque DST_IN rule with an alpha of 1.0f.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_IN\"\u003e\u003ccode\u003eDST_IN\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SrcOut",
      "comment": "AlphaComposite object that implements the opaque SRC_OUT rule with an alpha of 1.0f.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_OUT\"\u003e\u003ccode\u003eSRC_OUT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DstOut",
      "comment": "AlphaComposite object that implements the opaque DST_OUT rule with an alpha of 1.0f.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_OUT\"\u003e\u003ccode\u003eDST_OUT\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SrcAtop",
      "comment": "AlphaComposite object that implements the opaque SRC_ATOP rule with an alpha of 1.0f.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_ATOP\"\u003e\u003ccode\u003eSRC_ATOP\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DstAtop",
      "comment": "AlphaComposite object that implements the opaque DST_ATOP rule with an alpha of 1.0f.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_ATOP\"\u003e\u003ccode\u003eDST_ATOP\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "Xor",
      "comment": "AlphaComposite object that implements the opaque XOR rule with an alpha of 1.0f.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#XOR\"\u003e\u003ccode\u003eXOR\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "rule",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Creates an AlphaComposite object with the specified rule.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erule\u003c/code\u003e - the compositing rule"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erule\u003c/code\u003e is not one of the following: \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#CLEAR\"\u003e\u003ccode\u003eCLEAR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC\"\u003e\u003ccode\u003eSRC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST\"\u003e\u003ccode\u003eDST\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_OVER\"\u003e\u003ccode\u003eSRC_OVER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_OVER\"\u003e\u003ccode\u003eDST_OVER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_IN\"\u003e\u003ccode\u003eSRC_IN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_IN\"\u003e\u003ccode\u003eDST_IN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_OUT\"\u003e\u003ccode\u003eSRC_OUT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_OUT\"\u003e\u003ccode\u003eDST_OUT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_ATOP\"\u003e\u003ccode\u003eSRC_ATOP\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_ATOP\"\u003e\u003ccode\u003eDST_ATOP\u003c/code\u003e\u003c/a\u003e, or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#XOR\"\u003e\u003ccode\u003eXOR\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eAlphaComposite\u003c/code\u003e object created"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "rule",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "alpha",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Creates an AlphaComposite object with the specified rule and the constant alpha to multiply with the alpha of the source. The source is multiplied with the specified alpha before being composited with the destination.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erule\u003c/code\u003e - the compositing rule",
          "\u003ccode\u003ealpha\u003c/code\u003e - the constant alpha to be multiplied with the alpha of the source. \n\u003ccode\u003ealpha\u003c/code\u003e must be a floating point number in the inclusive range [0.0,\u0026nbsp;1.0]."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealpha\u003c/code\u003e is less than 0.0 or greater than 1.0, or if \n\u003ccode\u003erule\u003c/code\u003e is not one of the following: \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#CLEAR\"\u003e\u003ccode\u003eCLEAR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC\"\u003e\u003ccode\u003eSRC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST\"\u003e\u003ccode\u003eDST\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_OVER\"\u003e\u003ccode\u003eSRC_OVER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_OVER\"\u003e\u003ccode\u003eDST_OVER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_IN\"\u003e\u003ccode\u003eSRC_IN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_IN\"\u003e\u003ccode\u003eDST_IN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_OUT\"\u003e\u003ccode\u003eSRC_OUT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_OUT\"\u003e\u003ccode\u003eDST_OUT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_ATOP\"\u003e\u003ccode\u003eSRC_ATOP\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_ATOP\"\u003e\u003ccode\u003eDST_ATOP\u003c/code\u003e\u003c/a\u003e, or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#XOR\"\u003e\u003ccode\u003eXOR\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eAlphaComposite\u003c/code\u003e object created"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.CompositeContext",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.ColorModel",
            "type": "Class"
          },
          "name": "srcColorModel",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.ColorModel",
            "type": "Class"
          },
          "name": "dstColorModel",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.RenderingHints",
            "type": "Class"
          },
          "name": "hints",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createContext",
      "comment": "Creates a context for the compositing operation. The context contains state that is used in performing the compositing operation.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Composite.html#createContext(java.awt.image.ColorModel,java.awt.image.ColorModel,java.awt.RenderingHints)\"\u003ecreateContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Composite.html\" title\u003d\"interface in java.awt\"\u003eComposite\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esrcColorModel\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eColorModel\u003c/code\u003e\u003c/a\u003e of the source",
          "\u003ccode\u003edstColorModel\u003c/code\u003e - the \n\u003ccode\u003eColorModel\u003c/code\u003e of the destination",
          "\u003ccode\u003ehints\u003c/code\u003e - the hint that the context object uses to choose between rendering alternatives"
        ],
        "return": [
          "the \n\u003ccode\u003eCompositeContext\u003c/code\u003e object to be used to perform compositing operations."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAlpha",
      "comment": "Returns the alpha value of this AlphaComposite. If this AlphaComposite does not have an alpha value, 1.0 is returned.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the alpha value of this \n\u003ccode\u003eAlphaComposite\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRule",
      "comment": "Returns the compositing rule of this AlphaComposite.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the compositing rule of this \n\u003ccode\u003eAlphaComposite\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "rule",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "derive",
      "comment": "Returns a similar AlphaComposite object that uses the specified compositing rule. If this object already uses the specified compositing rule, this object is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erule\u003c/code\u003e - the compositing rule"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erule\u003c/code\u003e is not one of the following: \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#CLEAR\"\u003e\u003ccode\u003eCLEAR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC\"\u003e\u003ccode\u003eSRC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST\"\u003e\u003ccode\u003eDST\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_OVER\"\u003e\u003ccode\u003eSRC_OVER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_OVER\"\u003e\u003ccode\u003eDST_OVER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_IN\"\u003e\u003ccode\u003eSRC_IN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_IN\"\u003e\u003ccode\u003eDST_IN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_OUT\"\u003e\u003ccode\u003eSRC_OUT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_OUT\"\u003e\u003ccode\u003eDST_OUT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#SRC_ATOP\"\u003e\u003ccode\u003eSRC_ATOP\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#DST_ATOP\"\u003e\u003ccode\u003eDST_ATOP\u003c/code\u003e\u003c/a\u003e, or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AlphaComposite.html#XOR\"\u003e\u003ccode\u003eXOR\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eAlphaComposite\u003c/code\u003e object derived from this object that uses the specified compositing rule."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.AlphaComposite",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "alpha",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "derive",
      "comment": "Returns a similar AlphaComposite object that uses the specified alpha value. If this object already has the specified alpha value, this object is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealpha\u003c/code\u003e - the constant alpha to be multiplied with the alpha of the source. \n\u003ccode\u003ealpha\u003c/code\u003e must be a floating point number in the inclusive range [0.0,\u0026nbsp;1.0]."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealpha\u003c/code\u003e is less than 0.0 or greater than 1.0"
        ],
        "return": [
          "an \n\u003ccode\u003eAlphaComposite\u003c/code\u003e object derived from this object that uses the specified alpha value."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hashcode for this composite.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code for this composite."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Determines whether the specified object is equal to this AlphaComposite. The result is true if and only if the argument is not null and is an AlphaComposite object that has the same compositing rule and alpha value as this object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the \n\u003ccode\u003eObject\u003c/code\u003e to test for equality"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003eobj\u003c/code\u003e equals this \n\u003ccode\u003eAlphaComposite\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.awt.AlphaComposite",
  "comment": "The \n\u003ccode\u003eAlphaComposite\u003c/code\u003e class implements basic alpha compositing rules for combining source and destination colors to achieve blending and transparency effects with graphics and images. The specific rules implemented by this class are the basic set of 12 rules described in T. Porter and T. Duff, \"Compositing Digital Images\", SIGGRAPH 84, 253-259. The rest of this documentation assumes some familiarity with the definitions and concepts outlined in that paper. \n\u003cp\u003e This class extends the standard equations defined by Porter and Duff to include one additional factor. An instance of the \u003ccode\u003eAlphaComposite\u003c/code\u003e class can contain an alpha value that is used to modify the opacity or coverage of every source pixel before it is used in the blending equations. \u003c/p\u003e\n\u003cp\u003e It is important to note that the equations defined by the Porter and Duff paper are all defined to operate on color components that are premultiplied by their corresponding alpha components. Since the \u003ccode\u003eColorModel\u003c/code\u003e and \u003ccode\u003eRaster\u003c/code\u003e classes allow the storage of pixel data in either premultiplied or non-premultiplied form, all input data must be normalized into premultiplied form before applying the equations and all results might need to be adjusted back to the form required by the destination before the pixel values are stored. \u003c/p\u003e\n\u003cp\u003e Also note that this class defines only the equations for combining color and alpha values in a purely mathematical sense. The accurate application of its equations depends on the way the data is retrieved from its sources and stored in its destinations. See \u003ca href\u003d\"#caveats\"\u003eImplementation Caveats\u003c/a\u003e for further information. \u003c/p\u003e\n\u003cp\u003e The following factors are used in the description of the blending equation in the Porter and Duff paper: \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  Factors\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003eFactor \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eDefinition \u003c/th\u003e\n  \u003c/tr\u003e\n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eA\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003ethe alpha component of the source pixel \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eC\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003ea color component of the source pixel in premultiplied form \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eA\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003ethe alpha component of the destination pixel \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eC\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003ea color component of the destination pixel in premultiplied form \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eF\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003ethe fraction of the source pixel that contributes to the output \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eF\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003ethe fraction of the destination pixel that contributes to the output \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eA\u003csub\u003er\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003ethe alpha component of the result \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eC\u003csub\u003er\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003ea color component of the result in premultiplied form \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Using these factors, Porter and Duff define 12 ways of choosing the blending factors \u003cem\u003eF\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e and \u003cem\u003eF\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e to produce each of 12 desirable visual effects. The equations for determining \u003cem\u003eF\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e and \u003cem\u003eF\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e are given in the descriptions of the 12 static fields that specify visual effects. For example, the description for \u003ca href\u003d\"#SRC_OVER\"\u003e\u003ccode\u003eSRC_OVER\u003c/code\u003e\u003c/a\u003e specifies that \u003cem\u003eF\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e \u003d 1 and \u003cem\u003eF\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e \u003d (1-\u003cem\u003eA\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e). Once a set of equations for determining the blending factors is known they can then be applied to each pixel to produce a result using the following set of equations: \u003c/p\u003e\n\u003cpre\u003e      \u003cem\u003eF\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e \u003d \u003cem\u003ef\u003c/em\u003e(\u003cem\u003eA\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e)\n      \u003cem\u003eF\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e \u003d \u003cem\u003ef\u003c/em\u003e(\u003cem\u003eA\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e)\n      \u003cem\u003eA\u003csub\u003er\u003c/sub\u003e\u003c/em\u003e \u003d \u003cem\u003eA\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e*\u003cem\u003eF\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e + \u003cem\u003eA\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e*\u003cem\u003eF\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e\n      \u003cem\u003eC\u003csub\u003er\u003c/sub\u003e\u003c/em\u003e \u003d \u003cem\u003eC\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e*\u003cem\u003eF\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e + \u003cem\u003eC\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e*\u003cem\u003eF\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following factors will be used to discuss our extensions to the blending equation in the Porter and Duff paper: \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  Factors\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003eFactor \u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eDefinition \u003c/th\u003e\n  \u003c/tr\u003e\n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eC\u003csub\u003esr\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003eone of the raw color components of the source pixel \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eC\u003csub\u003edr\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003eone of the raw color components of the destination pixel \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eA\u003csub\u003eac\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003ethe \"extra\" alpha component from the AlphaComposite instance \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eA\u003csub\u003esr\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003ethe raw alpha component of the source pixel \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eA\u003csub\u003edr\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003ethe raw alpha component of the destination pixel \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eA\u003csub\u003edf\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003ethe final alpha component stored in the destination \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003cem\u003eC\u003csub\u003edf\u003c/sub\u003e\u003c/em\u003e \u003c/th\u003e\n   \u003ctd\u003ethe final raw color component stored in the destination \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003ePreparing Inputs\u003c/h2\u003e \n\u003cp\u003e The \u003ccode\u003eAlphaComposite\u003c/code\u003e class defines an additional alpha value that is applied to the source alpha. This value is applied as if an implicit SRC_IN rule were first applied to the source pixel against a pixel with the indicated alpha by multiplying both the raw source alpha and the raw source colors by the alpha in the \u003ccode\u003eAlphaComposite\u003c/code\u003e. This leads to the following equation for producing the alpha used in the Porter and Duff blending equation: \u003c/p\u003e\n\u003cpre\u003e      \u003cem\u003eA\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e \u003d \u003cem\u003eA\u003csub\u003esr\u003c/sub\u003e\u003c/em\u003e * \u003cem\u003eA\u003csub\u003eac\u003c/sub\u003e\u003c/em\u003e \u003c/pre\u003e All of the raw source color components need to be multiplied by the alpha in the \n\u003ccode\u003eAlphaComposite\u003c/code\u003e instance. Additionally, if the source was not in premultiplied form then the color components also need to be multiplied by the source alpha. Thus, the equation for producing the source color components for the Porter and Duff equation depends on whether the source pixels are premultiplied or not: \n\u003cpre\u003e      \u003cem\u003eC\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e \u003d \u003cem\u003eC\u003csub\u003esr\u003c/sub\u003e\u003c/em\u003e * \u003cem\u003eA\u003csub\u003esr\u003c/sub\u003e\u003c/em\u003e * \u003cem\u003eA\u003csub\u003eac\u003c/sub\u003e\u003c/em\u003e     (if source is not premultiplied)\n      \u003cem\u003eC\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e \u003d \u003cem\u003eC\u003csub\u003esr\u003c/sub\u003e\u003c/em\u003e * \u003cem\u003eA\u003csub\u003eac\u003c/sub\u003e\u003c/em\u003e           (if source is premultiplied) \u003c/pre\u003e No adjustment needs to be made to the destination alpha: \n\u003cpre\u003e      \u003cem\u003eA\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e \u003d \u003cem\u003eA\u003csub\u003edr\u003c/sub\u003e\u003c/em\u003e \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The destination color components need to be adjusted only if they are not in premultiplied form: \u003c/p\u003e\n\u003cpre\u003e      \u003cem\u003eC\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e \u003d \u003cem\u003eC\u003csub\u003edr\u003c/sub\u003e\u003c/em\u003e * \u003cem\u003eA\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e    (if destination is not premultiplied)\n      \u003cem\u003eC\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e \u003d \u003cem\u003eC\u003csub\u003edr\u003c/sub\u003e\u003c/em\u003e         (if destination is premultiplied) \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003eApplying the Blending Equation\u003c/h2\u003e \n\u003cp\u003e The adjusted \u003cem\u003eA\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e, \u003cem\u003eA\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e, \u003cem\u003eC\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e, and \u003cem\u003eC\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e are used in the standard Porter and Duff equations to calculate the blending factors \u003cem\u003eF\u003csub\u003es\u003c/sub\u003e\u003c/em\u003e and \u003cem\u003eF\u003csub\u003ed\u003c/sub\u003e\u003c/em\u003e and then the resulting premultiplied components \u003cem\u003eA\u003csub\u003er\u003c/sub\u003e\u003c/em\u003e and \u003cem\u003eC\u003csub\u003er\u003c/sub\u003e\u003c/em\u003e. \u003c/p\u003e\n\u003ch2\u003ePreparing Results\u003c/h2\u003e \n\u003cp\u003e The results only need to be adjusted if they are to be stored back into a destination buffer that holds data that is not premultiplied, using the following equations: \u003c/p\u003e\n\u003cpre\u003e      \u003cem\u003eA\u003csub\u003edf\u003c/sub\u003e\u003c/em\u003e \u003d \u003cem\u003eA\u003csub\u003er\u003c/sub\u003e\u003c/em\u003e\n      \u003cem\u003eC\u003csub\u003edf\u003c/sub\u003e\u003c/em\u003e \u003d \u003cem\u003eC\u003csub\u003er\u003c/sub\u003e\u003c/em\u003e                 (if dest is premultiplied)\n      \u003cem\u003eC\u003csub\u003edf\u003c/sub\u003e\u003c/em\u003e \u003d \u003cem\u003eC\u003csub\u003er\u003c/sub\u003e\u003c/em\u003e / \u003cem\u003eA\u003csub\u003er\u003c/sub\u003e\u003c/em\u003e            (if dest is not premultiplied) \u003c/pre\u003e Note that since the division is undefined if the resulting alpha is zero, the division in that case is omitted to avoid the \"divide by zero\" and the color components are left as all zeros. \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003ePerformance Considerations\u003c/h2\u003e \n\u003cp\u003e For performance reasons, it is preferable that \u003ccode\u003eRaster\u003c/code\u003e objects passed to the \u003ccode\u003ecompose\u003c/code\u003e method of a \u003ca href\u003d\"CompositeContext.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eCompositeContext\u003c/code\u003e\u003c/a\u003e object created by the \u003ccode\u003eAlphaComposite\u003c/code\u003e class have premultiplied data. If either the source \u003ccode\u003eRaster\u003c/code\u003e or the destination \u003ccode\u003eRaster\u003c/code\u003e is not premultiplied, however, appropriate conversions are performed before and after the compositing operation. \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"caveats\"\u003eImplementation Caveats\u003c/a\u003e\u003c/h2\u003e \n\u003cul\u003e \n \u003cli\u003e Many sources, such as some of the opaque image types listed in the \u003ccode\u003eBufferedImage\u003c/code\u003e class, do not store alpha values for their pixels. Such sources supply an alpha of 1.0 for all of their pixels. \u003c/li\u003e\n \u003cli\u003e Many destinations also have no place to store the alpha values that result from the blending calculations performed by this class. Such destinations thus implicitly discard the resulting alpha values that this class produces. It is recommended that such destinations should treat their stored color values as non-premultiplied and divide the resulting color values by the resulting alpha value before storing the color values and discarding the alpha value. \u003c/li\u003e\n \u003cli\u003e The accuracy of the results depends on the manner in which pixels are stored in the destination. An image format that provides at least 8 bits of storage per color and alpha component is at least adequate for use as a destination for a sequence of a few to a dozen compositing operations. An image format with fewer than 8 bits of storage per component is of limited use for just one or two compositing operations before the rounding errors dominate the results. An image format that does not separately store color components is not a good candidate for any type of translucent blending. For example, \u003ccode\u003eBufferedImage.TYPE_BYTE_INDEXED\u003c/code\u003e should not be used as a destination for a blending operation because every operation can introduce large errors, due to the need to choose a pixel from a limited palette to match the results of the blending equations. \u003c/li\u003e\n \u003cli\u003e Nearly all formats store pixels as discrete integers rather than the floating point values used in the reference equations above. The implementation can either scale the integer pixel values into floating point values in the range 0.0 to 1.0 or use slightly modified versions of the equations that operate entirely in the integer domain and yet produce analogous results to the reference equations. \u003cp\u003e Typically the integer values are related to the floating point values in such a way that the integer 0 is equated to the floating point value 0.0 and the integer 2^\u003cem\u003en\u003c/em\u003e-1 (where \u003cem\u003en\u003c/em\u003e is the number of bits in the representation) is equated to 1.0. For 8-bit representations, this means that 0x00 represents 0.0 and 0xff represents 1.0. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003e The internal implementation can approximate some of the equations and it can also eliminate some steps to avoid unnecessary operations. For example, consider a discrete integer image with non-premultiplied alpha values that uses 8 bits per component for storage. The stored values for a nearly transparent darkened red might be: \u003cpre\u003e    (A, R, G, B) \u003d (0x01, 0xb0, 0x00, 0x00)\u003c/pre\u003e \u003cp\u003e If integer math were being used and this value were being composited in \u003ca href\u003d\"#SRC\"\u003e\u003ccode\u003eSRC\u003c/code\u003e\u003c/a\u003e mode with no extra alpha, then the math would indicate that the results were (in integer format): \u003c/p\u003e\u003cpre\u003e    (A, R, G, B) \u003d (0x01, 0x01, 0x00, 0x00)\u003c/pre\u003e \u003cp\u003e\u003c/p\u003e\u003cp\u003e Note that the intermediate values, which are always in premultiplied form, would only allow the integer red component to be either 0x00 or 0x01. When we try to store this result back into a destination that is not premultiplied, dividing out the alpha will give us very few choices for the non-premultiplied red value. In this case an implementation that performs the math in integer space without shortcuts is likely to end up with the final pixel values of: \u003c/p\u003e\u003cpre\u003e    (A, R, G, B) \u003d (0x01, 0xff, 0x00, 0x00)\u003c/pre\u003e \u003cp\u003e\u003c/p\u003e\u003cp\u003e (Note that 0x01 divided by 0x01 gives you 1.0, which is equivalent to the value 0xff in an 8-bit storage format.) \u003c/p\u003e\u003cp\u003e Alternately, an implementation that uses floating point math might produce more accurate results and end up returning to the original pixel value with little, if any, round-off error. Or, an implementation using integer math might decide that since the equations boil down to a virtual NOP on the color values if performed in a floating point space, it can transfer the pixel untouched to the destination and avoid all the math entirely. \u003c/p\u003e\u003cp\u003e These implementations all attempt to honor the same equations, but use different tradeoffs of integer and floating point math and reduced or full equations. To account for such differences, it is probably best to expect only that the premultiplied form of the results to match between implementations and image formats. In this case both answers, expressed in premultiplied form would equate to: \u003c/p\u003e\u003cpre\u003e    (A, R, G, B) \u003d (0x01, 0x01, 0x00, 0x00)\u003c/pre\u003e \u003cp\u003e\u003c/p\u003e\u003cp\u003e and thus they would all match. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003e Because of the technique of simplifying the equations for calculation efficiency, some implementations might perform differently when encountering result alpha values of 0.0 on a non-premultiplied destination. Note that the simplification of removing the divide by alpha in the case of the SRC rule is technically not valid if the denominator (alpha) is 0. But, since the results should only be expected to be accurate when viewed in premultiplied form, a resulting alpha of 0 essentially renders the resulting color components irrelevant and so exact behavior in this case should not be expected. \u003c/li\u003e\n \u003cp\u003e\u003c/p\u003e\n \u003cp\u003e\u003c/p\u003e\n\u003c/ul\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Composite.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eComposite\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/CompositeContext.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eCompositeContext\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}