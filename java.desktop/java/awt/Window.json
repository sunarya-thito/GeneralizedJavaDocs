{
  "packageName": "java.awt",
  "simpleName": "Window",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.Container",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.awt.Image",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIconImages",
      "comment": "Returns the sequence of images to be displayed as the icon for this window. This method returns a copy of the internally stored list, so all operations on the returned object will not affect the window\u0027s behavior.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setIconImages(java.util.List)\"\u003e\u003ccode\u003esetIconImages(java.util.List\u0026lt;? extends java.awt.Image\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setIconImage(java.awt.Image)\"\u003e\u003ccode\u003esetIconImage(Image)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the copy of icon images\u0027 list for this window, or empty list if this window doesn\u0027t have icon images."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.awt.Image",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "icons"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setIconImages",
      "comment": "Sets the sequence of images to be displayed as the icon for this window. Subsequent calls to getIconImages will always return a copy of the icons list. Depending on the platform capabilities one or several images of different dimensions will be used as the window\u0027s icon. The icons list can contain MultiResolutionImage images also. Suitable image depending on screen resolution is extracted from base MultiResolutionImage image and added to the icons list while base resolution image is removed from list. The icons list is scanned for the images of most appropriate dimensions from the beginning. If the list contains several images of the same size, the first will be used. Ownerless windows with no icon specified use platform-default icon. The icon of an owned window may be inherited from the owner unless explicitly overridden. Setting the icon to null or empty list restores the default behavior. Note : Native windowing systems may use different images of differing dimensions to represent a window, depending on the context (e.g. window decoration, window list, taskbar, etc.). They could also use just a single image for all contexts or no image at all.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getIconImages()\"\u003e\u003ccode\u003egetIconImages()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setIconImage(java.awt.Image)\"\u003e\u003ccode\u003esetIconImage(Image)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eicons\u003c/code\u003e - the list of icon images to be displayed."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Image",
            "type": "Class"
          },
          "field": {
            "name": "image"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setIconImage",
      "comment": "Sets the image to be displayed as the icon for this window. This method can be used instead of setIconImages() to specify a single image as a window\u0027s icon. The following statement:      setIconImage(image);\n is equivalent to:      ArrayList\u003cImage\u003e imageList \u003d new ArrayList\u003cImage\u003e();\n     imageList.add(image);\n     setIconImages(imageList);\n Note : Native windowing systems may use different images of differing dimensions to represent a window, depending on the context (e.g. window decoration, window list, taskbar, etc.). They could also use just a single image for all contexts or no image at all.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setIconImages(java.util.List)\"\u003e\u003ccode\u003esetIconImages(java.util.List\u0026lt;? extends java.awt.Image\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getIconImages()\"\u003e\u003ccode\u003egetIconImages()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimage\u003c/code\u003e - the icon image to be displayed."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addNotify",
      "comment": "Makes this Window displayable by creating the connection to its native screen resource. This method is called internally by the toolkit and should not be called directly by programs.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isDisplayable()\"\u003e\u003ccode\u003eComponent.isDisplayable()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#removeNotify()\"\u003e\u003ccode\u003eContainer.removeNotify()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#addNotify()\"\u003eaddNotify\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "pack",
      "comment": "Causes this Window to be sized to fit the preferred size and layouts of its subcomponents. The resulting width and height of the window are automatically enlarged if either of dimensions is less than the minimum size as specified by the previous call to the setMinimumSize method. If the window and/or its owner are not displayable yet, both of them are made displayable before calculating the preferred size. The Window is validated after its size is being calculated.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isDisplayable()\"\u003e\u003ccode\u003eComponent.isDisplayable()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setMinimumSize(java.awt.Dimension)\"\u003e\u003ccode\u003esetMinimumSize(java.awt.Dimension)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Dimension",
            "type": "Class"
          },
          "field": {
            "name": "minimumSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinimumSize",
      "comment": "Sets the minimum size of this window to a constant value. Subsequent calls to getMinimumSize will always return this value. If current window\u0027s size is less than minimumSize the size of the window is automatically enlarged to honor the minimum size. If the setSize or setBounds methods are called afterwards with a width or height less than that was specified by the setMinimumSize method the window is automatically enlarged to meet the minimumSize value. The minimumSize value also affects the behaviour of the pack method. The default behavior is restored by setting the minimum size parameter to the null value. Resizing operation may be restricted if the user tries to resize window below the minimumSize value. This behaviour is platform-dependent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setMinimumSize(java.awt.Dimension)\"\u003e\u003ccode\u003eComponent.setMinimumSize(java.awt.Dimension)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getMinimumSize()\"\u003e\u003ccode\u003eContainer.getMinimumSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isMinimumSizeSet()\"\u003e\u003ccode\u003eComponent.isMinimumSizeSet()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setSize(java.awt.Dimension)\"\u003e\u003ccode\u003esetSize(Dimension)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#pack()\"\u003e\u003ccode\u003epack()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setMinimumSize(java.awt.Dimension)\"\u003esetMinimumSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eminimumSize\u003c/code\u003e - the new minimum size of this window"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Dimension",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSize",
      "comment": "Resizes this component so that it has width d.width and height d.height. This method changes layout-related information, and therefore, invalidates the component hierarchy. The d.width and d.height values are automatically enlarged if either is less than the minimum size as specified by previous call to setMinimumSize. The method changes the geometry-related data. Therefore, the native windowing system may ignore such requests, or it may modify the requested data, so that the Window object is placed and sized in a way that corresponds closely to the desktop settings.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getSize()\"\u003e\u003ccode\u003eComponent.getSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setBounds(int,int,int,int)\"\u003e\u003ccode\u003esetBounds(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setMinimumSize(java.awt.Dimension)\"\u003e\u003ccode\u003esetMinimumSize(java.awt.Dimension)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setSize(java.awt.Dimension)\"\u003esetSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - the dimension specifying the new size of this component"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSize",
      "comment": "Resizes this component so that it has width width and height height. This method changes layout-related information, and therefore, invalidates the component hierarchy. The width and height values are automatically enlarged if either is less than the minimum size as specified by previous call to setMinimumSize. The method changes the geometry-related data. Therefore, the native windowing system may ignore such requests, or it may modify the requested data, so that the Window object is placed and sized in a way that corresponds closely to the desktop settings.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getSize()\"\u003e\u003ccode\u003eComponent.getSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setBounds(int,int,int,int)\"\u003e\u003ccode\u003esetBounds(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setMinimumSize(java.awt.Dimension)\"\u003e\u003ccode\u003esetMinimumSize(java.awt.Dimension)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setSize(int,int)\"\u003esetSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ewidth\u003c/code\u003e - the new width of this component in pixels",
          "\u003ccode\u003eheight\u003c/code\u003e - the new height of this component in pixels"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLocation",
      "comment": "Moves this component to a new location. The top-left corner of the new location is specified by the x and y parameters in the coordinate space of this component\u0027s parent. This method changes layout-related information, and therefore, invalidates the component hierarchy. The method changes the geometry-related data. Therefore, the native windowing system may ignore such requests, or it may modify the requested data, so that the Window object is placed and sized in a way that corresponds closely to the desktop settings.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getLocation()\"\u003e\u003ccode\u003eComponent.getLocation()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setBounds(int,int,int,int)\"\u003e\u003ccode\u003eComponent.setBounds(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#invalidate()\"\u003e\u003ccode\u003eComponent.invalidate()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setLocation(int,int)\"\u003esetLocation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e-coordinate of the new location\u0027s top-left corner in the parent\u0027s coordinate space",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e-coordinate of the new location\u0027s top-left corner in the parent\u0027s coordinate space"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLocation",
      "comment": "Moves this component to a new location. The top-left corner of the new location is specified by point p. Point p is given in the parent\u0027s coordinate space. This method changes layout-related information, and therefore, invalidates the component hierarchy. The method changes the geometry-related data. Therefore, the native windowing system may ignore such requests, or it may modify the requested data, so that the Window object is placed and sized in a way that corresponds closely to the desktop settings.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getLocation()\"\u003e\u003ccode\u003eComponent.getLocation()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setBounds(int,int,int,int)\"\u003e\u003ccode\u003eComponent.setBounds(int, int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#invalidate()\"\u003e\u003ccode\u003eComponent.invalidate()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setLocation(java.awt.Point)\"\u003esetLocation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the point defining the top-left corner of the new location, given in the coordinate space of this component\u0027s parent"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reshape",
      "comment": "Description copied from class: Component",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#reshape(int,int,int,int)\"\u003ereshape\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ci\u003ex\u003c/i\u003e coordinate of the upper left corner of the rectangle",
          "\u003ccode\u003ey\u003c/code\u003e - the \n\u003ci\u003ey\u003c/i\u003e coordinate of the upper left corner of the rectangle",
          "\u003ccode\u003ewidth\u003c/code\u003e - the width of the rectangle",
          "\u003ccode\u003eheight\u003c/code\u003e - the height of the rectangle"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setVisible",
      "comment": "Shows or hides this Window depending on the value of parameter b. If the method shows the window then the window is also made focused under the following conditions: The Window meets the requirements outlined in the isFocusableWindow() method. The Window\u0027s autoRequestFocus property is of the true value. Native windowing system allows the Window to get focused. There is an exception for the second condition (the value of the autoRequestFocus property). The property is not taken into account if the window is a modal dialog, which blocks the currently focused window. Developers must never assume that the window is the focused or active window until it receives a WINDOW_GAINED_FOCUS or WINDOW_ACTIVATED event.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isDisplayable()\"\u003e\u003ccode\u003eComponent.isDisplayable()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setVisible(boolean)\"\u003e\u003ccode\u003eComponent.setVisible(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#toFront()\"\u003e\u003ccode\u003etoFront()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#dispose()\"\u003e\u003ccode\u003edispose()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setAutoRequestFocus(boolean)\"\u003e\u003ccode\u003esetAutoRequestFocus(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isFocusableWindow()\"\u003e\u003ccode\u003eisFocusableWindow()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setVisible(boolean)\"\u003esetVisible\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, makes the \n\u003ccode\u003eWindow\u003c/code\u003e visible, otherwise hides the \n\u003ccode\u003eWindow\u003c/code\u003e. If the \n\u003ccode\u003eWindow\u003c/code\u003e and/or its owner are not yet displayable, both are made displayable. The \n\u003ccode\u003eWindow\u003c/code\u003e will be validated prior to being made visible. If the \n\u003ccode\u003eWindow\u003c/code\u003e is already visible, this will bring the \n\u003ccode\u003eWindow\u003c/code\u003e to the front.\n\u003cp\u003e If \u003ccode\u003efalse\u003c/code\u003e, hides this \u003ccode\u003eWindow\u003c/code\u003e, its subcomponents, and all of its owned children. The \u003ccode\u003eWindow\u003c/code\u003e and its subcomponents can be made visible again with a call to \u003ccode\u003e#setVisible(true)\u003c/code\u003e.\u003c/p\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "show",
      "comment": "Makes the Window visible. If the Window and/or its owner are not yet displayable, both are made displayable. The Window will be validated prior to being made visible. If the Window is already visible, this will bring the Window to the front.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isDisplayable()\"\u003e\u003ccode\u003eComponent.isDisplayable()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#toFront()\"\u003e\u003ccode\u003etoFront()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#show()\"\u003eshow\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hide",
      "comment": "Hide this Window, its subcomponents, and all of its owned children. The Window and its subcomponents can be made visible again with a call to show.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#show()\"\u003e\u003ccode\u003eshow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#dispose()\"\u003e\u003ccode\u003edispose()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#hide()\"\u003ehide\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dispose",
      "comment": "Releases all of the native screen resources used by this Window, its subcomponents, and all of its owned children. That is, the resources for these Components will be destroyed, any memory they consume will be returned to the OS, and they will be marked as undisplayable. The Window and its subcomponents can be made displayable again by rebuilding the native resources with a subsequent call to pack or show. The states of the recreated Window and its subcomponents will be identical to the states of these objects at the point where the Window was disposed (not accounting for additional modifications between those actions). Note: When the last displayable window within the Java virtual machine (VM) is disposed of, the VM may terminate. See AWT Threading Issues for more information.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isDisplayable()\"\u003e\u003ccode\u003eComponent.isDisplayable()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#pack()\"\u003e\u003ccode\u003epack()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#show()\"\u003e\u003ccode\u003eshow()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toFront",
      "comment": "If this Window is visible, brings this Window to the front and may make it the focused Window. Places this Window at the top of the stacking order and shows it in front of any other Windows in this VM. No action will take place if this Window is not visible. Some platforms do not allow Windows which own other Windows to appear on top of those owned Windows. Some platforms may not permit this VM to place its Windows above windows of native applications, or Windows of other VMs. This permission may depend on whether a Window in this VM is already focused. Every attempt will be made to move this Window as high as possible in the stacking order; however, developers should not assume that this method will move this Window above all other windows in every situation. Developers must never assume that this Window is the focused or active Window until this Window receives a WINDOW_GAINED_FOCUS or WINDOW_ACTIVATED event. On platforms where the top-most window is the focused window, this method will probably focus this Window (if it is not already focused) under the following conditions: The window meets the requirements outlined in the isFocusableWindow() method. The window\u0027s property autoRequestFocus is of the true value. Native windowing system allows the window to get focused. On platforms where the stacking order does not typically affect the focused window, this method will probably leave the focused and active Windows unchanged. If this method causes this Window to be focused, and this Window is a Frame or a Dialog, it will also become activated. If this Window is focused, but it is not a Frame or a Dialog, then the first Frame or Dialog that is an owner of this Window will be activated. If this window is blocked by modal dialog, then the blocking dialog is brought to the front and remains above the blocked window.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#toBack()\"\u003e\u003ccode\u003etoBack()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setAutoRequestFocus(boolean)\"\u003e\u003ccode\u003esetAutoRequestFocus(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isFocusableWindow()\"\u003e\u003ccode\u003eisFocusableWindow()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toBack",
      "comment": "If this Window is visible, sends this Window to the back and may cause it to lose focus or activation if it is the focused or active Window. Places this Window at the bottom of the stacking order and shows it behind any other Windows in this VM. No action will take place is this Window is not visible. Some platforms do not allow Windows which are owned by other Windows to appear below their owners. Every attempt will be made to move this Window as low as possible in the stacking order; however, developers should not assume that this method will move this Window below all other windows in every situation. Because of variations in native windowing systems, no guarantees about changes to the focused and active Windows can be made. Developers must never assume that this Window is no longer the focused or active Window until this Window receives a WINDOW_LOST_FOCUS or WINDOW_DEACTIVATED event. On platforms where the top-most window is the focused window, this method will probably cause this Window to lose focus. In that case, the next highest, focusable Window in this VM will receive focus. On platforms where the stacking order does not typically affect the focused window, this method will probably leave the focused and active Windows unchanged.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#toFront()\"\u003e\u003ccode\u003etoFront()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Toolkit",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getToolkit",
      "comment": "Returns the toolkit of this frame.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eToolkit\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#getDefaultToolkit()\"\u003e\u003ccode\u003eToolkit.getDefaultToolkit()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getToolkit()\"\u003e\u003ccode\u003eComponent.getToolkit()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getToolkit()\"\u003egetToolkit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the toolkit of this window."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getWarningString",
      "comment": "Gets the warning string that is displayed with this window. If this window is insecure, the warning string is displayed somewhere in the visible area of the window. A window is insecure if there is a security manager and the security manager denies AWTPermission(\"showWindowWithoutWarningBanner\"). If the window is secure, then getWarningString returns null. If the window is insecure, this method checks for the system property awt.appletWarning and returns the string value of that property.",
      "tagMap": {
        "return": [
          "the warning string for this window."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocale",
      "comment": "Gets the Locale object that is associated with this window, if the locale has been set. If no locale has been set, then the default locale is returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getLocale()\"\u003egetLocale\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the locale that is set for this window."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.im.InputContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInputContext",
      "comment": "Gets the input context for this window. A window always has an input context, which is shared by subcomponents unless they create and set their own.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getInputContext()\"\u003e\u003ccode\u003eComponent.getInputContext()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getInputContext()\"\u003egetInputContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the input context used by this component; \n\u003ccode\u003enull\u003c/code\u003e if no context can be determined"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Cursor",
            "type": "Class"
          },
          "field": {
            "name": "cursor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCursor",
      "comment": "Set the cursor image to a specified cursor. The method may have no visual effect if the Java platform implementation and/or the native system do not support changing the mouse cursor shape.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getCursor()\"\u003e\u003ccode\u003eComponent.getCursor()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Cursor.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eCursor\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setCursor(java.awt.Cursor)\"\u003esetCursor\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecursor\u003c/code\u003e - One of the constants defined by the \n\u003ccode\u003eCursor\u003c/code\u003e class. If this parameter is null then the cursor for this window will be set to the type Cursor.DEFAULT_CURSOR."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Window",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOwner",
      "comment": "Returns the owner of this window.",
      "tagMap": {
        "return": [
          "the owner of this window"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Window",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOwnedWindows",
      "comment": "Return an array containing all the windows this window currently owns.",
      "tagMap": {
        "return": [
          "the array of all the owned windows"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Window",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getWindows",
      "comment": "Returns an array of all Windows, both owned and ownerless, created by this application. If called from an applet, the array includes only the Windows accessible by that applet. Warning: this method may return system created windows, such as a print dialog. Applications should not assume the existence of these dialogs, nor should an application assume anything about these dialogs such as component positions, LayoutManagers or serialization.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Frame.html#getFrames()\"\u003e\u003ccode\u003eFrame.getFrames()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getOwnerlessWindows()\"\u003e\u003ccode\u003egetOwnerlessWindows()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the array of all the \n\u003ccode\u003eWindow\u003c/code\u003es created by the application"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Window",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getOwnerlessWindows",
      "comment": "Returns an array of all Windows created by this application that have no owner. They include Frames and ownerless Dialogs and Windows. If called from an applet, the array includes only the Windows accessible by that applet. Warning: this method may return system created windows, such as a print dialog. Applications should not assume the existence of these dialogs, nor should an application assume anything about these dialogs such as component positions, LayoutManagers or serialization.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Frame.html#getFrames()\"\u003e\u003ccode\u003eFrame.getFrames()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getWindows()\"\u003e\u003ccode\u003egetWindows()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the array of all the ownerless \n\u003ccode\u003eWindow\u003c/code\u003es created by this application"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Dialog$ModalExclusionType",
            "type": "Class"
          },
          "field": {
            "name": "exclusionType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setModalExclusionType",
      "comment": "Specifies the modal exclusion type for this window. If a window is modal excluded, it is not blocked by some modal dialogs. See Dialog.ModalExclusionType for possible modal exclusion types. If the given type is not supported, NO_EXCLUDE is used. Note: changing the modal exclusion type for a visible window may have no effect until it is hidden and then shown again.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Dialog.ModalExclusionType.html\" title\u003d\"enum class in java.awt\"\u003e\u003ccode\u003eDialog.ModalExclusionType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getModalExclusionType()\"\u003e\u003ccode\u003egetModalExclusionType()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType)\"\u003e\u003ccode\u003eToolkit.isModalExclusionTypeSupported(java.awt.Dialog.ModalExclusionType)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eexclusionType\u003c/code\u003e - the modal exclusion type for this window; a \n\u003ccode\u003enull\u003c/code\u003e value is equivalent to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Dialog.ModalExclusionType.html#NO_EXCLUDE\"\u003e\u003ccode\u003eNO_EXCLUDE\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the calling thread does not have permission to set the modal exclusion property to the window with the given \n\u003ccode\u003eexclusionType\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Dialog$ModalExclusionType",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModalExclusionType",
      "comment": "Returns the modal exclusion type of this window.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Dialog.ModalExclusionType.html\" title\u003d\"enum class in java.awt\"\u003e\u003ccode\u003eDialog.ModalExclusionType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setModalExclusionType(java.awt.Dialog.ModalExclusionType)\"\u003e\u003ccode\u003esetModalExclusionType(java.awt.Dialog.ModalExclusionType)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the modal exclusion type of this window"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.WindowListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addWindowListener",
      "comment": "Adds the specified window listener to receive window events from this window. If l is null, no exception is thrown and no action is performed. Refer to AWT Threading Issues for details on AWT\u0027s threading model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#removeWindowListener(java.awt.event.WindowListener)\"\u003e\u003ccode\u003eremoveWindowListener(java.awt.event.WindowListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getWindowListeners()\"\u003e\u003ccode\u003egetWindowListeners()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the window listener"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.WindowStateListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addWindowStateListener",
      "comment": "Adds the specified window state listener to receive window events from this window. If l is null, no exception is thrown and no action is performed. Refer to AWT Threading Issues for details on AWT\u0027s threading model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#removeWindowStateListener(java.awt.event.WindowStateListener)\"\u003e\u003ccode\u003eremoveWindowStateListener(java.awt.event.WindowStateListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getWindowStateListeners()\"\u003e\u003ccode\u003egetWindowStateListeners()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the window state listener"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.WindowFocusListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addWindowFocusListener",
      "comment": "Adds the specified window focus listener to receive window events from this window. If l is null, no exception is thrown and no action is performed. Refer to AWT Threading Issues for details on AWT\u0027s threading model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#removeWindowFocusListener(java.awt.event.WindowFocusListener)\"\u003e\u003ccode\u003eremoveWindowFocusListener(java.awt.event.WindowFocusListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getWindowFocusListeners()\"\u003e\u003ccode\u003egetWindowFocusListeners()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the window focus listener"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.WindowListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeWindowListener",
      "comment": "Removes the specified window listener so that it no longer receives window events from this window. If l is null, no exception is thrown and no action is performed. Refer to AWT Threading Issues for details on AWT\u0027s threading model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#addWindowListener(java.awt.event.WindowListener)\"\u003e\u003ccode\u003eaddWindowListener(java.awt.event.WindowListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getWindowListeners()\"\u003e\u003ccode\u003egetWindowListeners()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the window listener"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.WindowStateListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeWindowStateListener",
      "comment": "Removes the specified window state listener so that it no longer receives window events from this window. If l is null, no exception is thrown and no action is performed. Refer to AWT Threading Issues for details on AWT\u0027s threading model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#addWindowStateListener(java.awt.event.WindowStateListener)\"\u003e\u003ccode\u003eaddWindowStateListener(java.awt.event.WindowStateListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getWindowStateListeners()\"\u003e\u003ccode\u003egetWindowStateListeners()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the window state listener"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.WindowFocusListener",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeWindowFocusListener",
      "comment": "Removes the specified window focus listener so that it no longer receives window events from this window. If l is null, no exception is thrown and no action is performed. Refer to AWT Threading Issues for details on AWT\u0027s threading model.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#addWindowFocusListener(java.awt.event.WindowFocusListener)\"\u003e\u003ccode\u003eaddWindowFocusListener(java.awt.event.WindowFocusListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getWindowFocusListeners()\"\u003e\u003ccode\u003egetWindowFocusListeners()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - the window focus listener"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.WindowListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWindowListeners",
      "comment": "Returns an array of all the window listeners registered on this window.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#addWindowListener(java.awt.event.WindowListener)\"\u003e\u003ccode\u003eaddWindowListener(java.awt.event.WindowListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#removeWindowListener(java.awt.event.WindowListener)\"\u003e\u003ccode\u003eremoveWindowListener(java.awt.event.WindowListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of this window\u0027s \n\u003ccode\u003eWindowListener\u003c/code\u003es or an empty array if no window listeners are currently registered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.WindowFocusListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWindowFocusListeners",
      "comment": "Returns an array of all the window focus listeners registered on this window.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#addWindowFocusListener(java.awt.event.WindowFocusListener)\"\u003e\u003ccode\u003eaddWindowFocusListener(java.awt.event.WindowFocusListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#removeWindowFocusListener(java.awt.event.WindowFocusListener)\"\u003e\u003ccode\u003eremoveWindowFocusListener(java.awt.event.WindowFocusListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of this window\u0027s \n\u003ccode\u003eWindowFocusListener\u003c/code\u003es or an empty array if no window focus listeners are currently registered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.event.WindowStateListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWindowStateListeners",
      "comment": "Returns an array of all the window state listeners registered on this window.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#addWindowStateListener(java.awt.event.WindowStateListener)\"\u003e\u003ccode\u003eaddWindowStateListener(java.awt.event.WindowStateListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#removeWindowStateListener(java.awt.event.WindowStateListener)\"\u003e\u003ccode\u003eremoveWindowStateListener(java.awt.event.WindowStateListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of this window\u0027s \n\u003ccode\u003eWindowStateListener\u003c/code\u003es or an empty array if no window state listeners are currently registered"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "listenerType"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.util.EventListener",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getListeners",
      "comment": "Returns an array of all the objects currently registered as FooListeners upon this Window. FooListeners are registered using the addFooListener method. You can specify the listenerType argument with a class literal, such as FooListener.class. For example, you can query a Window w for its window listeners with the following code: WindowListener[] wls \u003d (WindowListener[])(w.getListeners(WindowListener.class)); If no such listeners exist, this method returns an empty array.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the listeners"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getWindowListeners()\"\u003e\u003ccode\u003egetWindowListeners()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getListeners(java.lang.Class)\"\u003egetListeners\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elistenerType\u003c/code\u003e - the type of listeners requested; this parameter should specify an interface that descends from \n\u003ccode\u003ejava.util.EventListener\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elistenerType\u003c/code\u003e doesn\u0027t specify a class or interface that implements \n\u003ccode\u003ejava.util.EventListener\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elistenerType\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "an array of all objects registered as \n\u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es on this window, or an empty array if no such listeners have been added"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.AWTEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "processEvent",
      "comment": "Processes events on this window. If the event is an WindowEvent, it invokes the processWindowEvent method, else it invokes its superclass\u0027s processEvent. Note that if the event parameter is null the behavior is unspecified and may result in an exception.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#processComponentEvent(java.awt.event.ComponentEvent)\"\u003e\u003ccode\u003eComponent.processComponentEvent(java.awt.event.ComponentEvent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#processFocusEvent(java.awt.event.FocusEvent)\"\u003e\u003ccode\u003eComponent.processFocusEvent(java.awt.event.FocusEvent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#processKeyEvent(java.awt.event.KeyEvent)\"\u003e\u003ccode\u003eComponent.processKeyEvent(java.awt.event.KeyEvent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#processMouseEvent(java.awt.event.MouseEvent)\"\u003e\u003ccode\u003eComponent.processMouseEvent(java.awt.event.MouseEvent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#processMouseMotionEvent(java.awt.event.MouseEvent)\"\u003e\u003ccode\u003eComponent.processMouseMotionEvent(java.awt.event.MouseEvent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#processInputMethodEvent(java.awt.event.InputMethodEvent)\"\u003e\u003ccode\u003eComponent.processInputMethodEvent(java.awt.event.InputMethodEvent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#processHierarchyEvent(java.awt.event.HierarchyEvent)\"\u003e\u003ccode\u003eComponent.processHierarchyEvent(java.awt.event.HierarchyEvent)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#processMouseWheelEvent(java.awt.event.MouseWheelEvent)\"\u003e\u003ccode\u003eComponent.processMouseWheelEvent(java.awt.event.MouseWheelEvent)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#processEvent(java.awt.AWTEvent)\"\u003eprocessEvent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.WindowEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "processWindowEvent",
      "comment": "Processes window events occurring on this window by dispatching them to any registered WindowListener objects. NOTE: This method will not be called unless window events are enabled for this component; this happens when one of the following occurs: A WindowListener object is registered via addWindowListener Window events are enabled via enableEvents Note that if the event parameter is null the behavior is unspecified and may result in an exception.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#enableEvents(long)\"\u003e\u003ccode\u003eComponent.enableEvents(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the window event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.WindowEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "processWindowFocusEvent",
      "comment": "Processes window focus event occurring on this window by dispatching them to any registered WindowFocusListener objects. NOTE: this method will not be called unless window focus events are enabled for this window. This happens when one of the following occurs: a WindowFocusListener is registered via addWindowFocusListener Window focus events are enabled via enableEvents Note that if the event parameter is null the behavior is unspecified and may result in an exception.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#enableEvents(long)\"\u003e\u003ccode\u003eComponent.enableEvents(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the window focus event"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.event.WindowEvent",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "processWindowStateEvent",
      "comment": "Processes window state event occurring on this window by dispatching them to any registered WindowStateListener objects. NOTE: this method will not be called unless window state events are enabled for this window. This happens when one of the following occurs: a WindowStateListener is registered via addWindowStateListener window state events are enabled via enableEvents Note that if the event parameter is null the behavior is unspecified and may result in an exception.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#enableEvents(long)\"\u003e\u003ccode\u003eComponent.enableEvents(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the window state event"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "alwaysOnTop"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setAlwaysOnTop",
      "comment": "Sets whether this window should always be above other windows. If there are multiple always-on-top windows, their relative order is unspecified and platform dependent. If some other window is already always-on-top then the relative order between these windows is unspecified (depends on platform). No window can be brought to be over the always-on-top window except maybe another always-on-top window. All windows owned by an always-on-top window inherit this state and automatically become always-on-top. If a window ceases to be always-on-top, the windows that it owns will no longer be always-on-top. When an always-on-top window is sent toBack, its always-on-top state is set to false. When this method is called on a window with a value of true, and the window is visible and the platform supports always-on-top for this window, the window is immediately brought forward, \"sticking\" it in the top-most position. If the window isn`t currently visible, this method sets the always-on-top state to true but does not bring the window forward. When the window is later shown, it will be always-on-top. When this method is called on a window with a value of false the always-on-top state is set to normal. It may also cause an unspecified, platform-dependent change in the z-order of top-level windows, but other always-on-top windows will remain in top-most position. Calling this method with a value of false on a window that has a normal state has no effect. Note: some platforms might not support always-on-top windows. To detect if always-on-top windows are supported by the current platform, use Toolkit.isAlwaysOnTopSupported() and isAlwaysOnTopSupported(). If always-on-top mode isn\u0027t supported for this window or this window\u0027s toolkit does not support always-on-top windows, calling this method has no effect. If a SecurityManager is installed, the calling thread must be granted the AWTPermission \"setWindowAlwaysOnTop\" in order to set the value of this property. If this permission is not granted, this method will throw a SecurityException, and the current value of the property will be left unchanged.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isAlwaysOnTop()\"\u003e\u003ccode\u003eisAlwaysOnTop()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#toFront()\"\u003e\u003ccode\u003etoFront()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#toBack()\"\u003e\u003ccode\u003etoBack()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTPermission.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eAWTPermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isAlwaysOnTopSupported()\"\u003e\u003ccode\u003eisAlwaysOnTopSupported()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getToolkit()\"\u003e\u003ccode\u003egetToolkit()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#isAlwaysOnTopSupported()\"\u003e\u003ccode\u003eToolkit.isAlwaysOnTopSupported()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealwaysOnTop\u003c/code\u003e - true if the window should always be above other windows"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the calling thread does not have permission to set the value of always-on-top property"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAlwaysOnTopSupported",
      "comment": "Returns whether the always-on-top mode is supported for this window. Some platforms may not support always-on-top windows, some may support only some kinds of top-level windows; for example, a platform may not support always-on-top modal dialogs.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setAlwaysOnTop(boolean)\"\u003e\u003ccode\u003esetAlwaysOnTop(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getToolkit()\"\u003e\u003ccode\u003egetToolkit()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Toolkit.html#isAlwaysOnTopSupported()\"\u003e\u003ccode\u003eToolkit.isAlwaysOnTopSupported()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e, if the always-on-top mode is supported for this window and this window\u0027s toolkit supports always-on-top windows, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isAlwaysOnTop",
      "comment": "Returns whether this window is an always-on-top window.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setAlwaysOnTop(boolean)\"\u003e\u003ccode\u003esetAlwaysOnTop(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e, if the window is in always-on-top state, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFocusOwner",
      "comment": "Returns the child Component of this Window that has focus if this Window is focused; returns null otherwise.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getMostRecentFocusOwner()\"\u003e\u003ccode\u003egetMostRecentFocusOwner()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isFocused()\"\u003e\u003ccode\u003eisFocused()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the child Component with focus, or null if this Window is not focused"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Component",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMostRecentFocusOwner",
      "comment": "Returns the child Component of this Window that will receive the focus when this Window is focused. If this Window is currently focused, this method returns the same Component as getFocusOwner(). If this Window is not focused, then the child Component that most recently requested focus will be returned. If no child Component has ever requested focus, and this is a focusable Window, then this Window\u0027s initial focusable Component is returned. If no child Component has ever requested focus, and this is a non-focusable Window, null is returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getFocusOwner()\"\u003e\u003ccode\u003egetFocusOwner()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isFocused()\"\u003e\u003ccode\u003eisFocused()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isFocusableWindow()\"\u003e\u003ccode\u003eisFocusableWindow()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the child Component that will receive focus when this Window is focused"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isActive",
      "comment": "Returns whether this Window is active. Only a Frame or a Dialog may be active. The native windowing system may denote the active Window or its children with special decorations, such as a highlighted title bar. The active Window is always either the focused Window, or the first Frame or Dialog that is an owner of the focused Window.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isFocused()\"\u003e\u003ccode\u003eisFocused()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "whether this is the active Window."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFocused",
      "comment": "Returns whether this Window is focused. If there exists a focus owner, the focused Window is the Window that is, or contains, that focus owner. If there is no focus owner, then no Window is focused. If the focused Window is a Frame or a Dialog it is also the active Window. Otherwise, the active Window is the first Frame or Dialog that is an owner of the focused Window.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isActive()\"\u003e\u003ccode\u003eisActive()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "whether this is the focused Window."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.awt.AWTKeyStroke",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "id"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFocusTraversalKeys",
      "comment": "Gets a focus traversal key for this Window. (See setFocusTraversalKeys for a full description of each key.) If the traversal key has not been explicitly set for this Window, then this Window\u0027s parent\u0027s traversal key is returned. If the traversal key has not been explicitly set for any of this Window\u0027s ancestors, then the current KeyboardFocusManager\u0027s default traversal key is returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#setFocusTraversalKeys(int,java.util.Set)\"\u003e\u003ccode\u003eContainer.setFocusTraversalKeys(int, java.util.Set\u0026lt;? extends java.awt.AWTKeyStroke\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#FORWARD_TRAVERSAL_KEYS\"\u003e\u003ccode\u003eKeyboardFocusManager.FORWARD_TRAVERSAL_KEYS\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#BACKWARD_TRAVERSAL_KEYS\"\u003e\u003ccode\u003eKeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#UP_CYCLE_TRAVERSAL_KEYS\"\u003e\u003ccode\u003eKeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/KeyboardFocusManager.html#DOWN_CYCLE_TRAVERSAL_KEYS\"\u003e\u003ccode\u003eKeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getFocusTraversalKeys(int)\"\u003egetFocusTraversalKeys\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eid\u003c/code\u003e - one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if id is not one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS"
        ],
        "return": [
          "the AWTKeyStroke for the specified key"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "focusCycleRoot"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setFocusCycleRoot",
      "comment": "Does nothing because Windows must always be roots of a focus traversal cycle. The passed-in value is ignored.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isFocusCycleRoot()\"\u003e\u003ccode\u003eisFocusCycleRoot()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)\"\u003e\u003ccode\u003eContainer.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getFocusTraversalPolicy()\"\u003e\u003ccode\u003eContainer.getFocusTraversalPolicy()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#setFocusCycleRoot(boolean)\"\u003esetFocusCycleRoot\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efocusCycleRoot\u003c/code\u003e - this value is ignored"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isFocusCycleRoot",
      "comment": "Always returns true because all Windows must be roots of a focus traversal cycle.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setFocusCycleRoot(boolean)\"\u003e\u003ccode\u003esetFocusCycleRoot(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)\"\u003e\u003ccode\u003eContainer.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#getFocusTraversalPolicy()\"\u003e\u003ccode\u003eContainer.getFocusTraversalPolicy()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#isFocusCycleRoot()\"\u003eisFocusCycleRoot\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Container",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getFocusCycleRootAncestor",
      "comment": "Always returns null because Windows have no ancestors; they represent the top of the Component hierarchy.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#isFocusCycleRoot()\"\u003e\u003ccode\u003eContainer.isFocusCycleRoot()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getFocusCycleRootAncestor()\"\u003egetFocusCycleRootAncestor\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isFocusableWindow",
      "comment": "Returns whether this Window can become the focused Window, that is, whether this Window or any of its subcomponents can become the focus owner. For a Frame or Dialog to be focusable, its focusable Window state must be set to true. For a Window which is not a Frame or Dialog to be focusable, its focusable Window state must be set to true, its nearest owning Frame or Dialog must be showing on the screen, and it must contain at least one Component in its focus traversal cycle. If any of these conditions is not met, then neither this Window nor any of its subcomponents can become the focus owner.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getFocusableWindowState()\"\u003e\u003ccode\u003egetFocusableWindowState()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setFocusableWindowState(boolean)\"\u003e\u003ccode\u003esetFocusableWindowState(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isShowing()\"\u003e\u003ccode\u003eisShowing()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isFocusable()\"\u003e\u003ccode\u003eComponent.isFocusable()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this Window can be the focused Window; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFocusableWindowState",
      "comment": "Returns whether this Window can become the focused Window if it meets the other requirements outlined in isFocusableWindow. If this method returns false, then isFocusableWindow will return false as well. If this method returns true, then isFocusableWindow may return true or false depending upon the other requirements which must be met in order for a Window to be focusable. By default, all Windows have a focusable Window state of true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isFocusableWindow()\"\u003e\u003ccode\u003eisFocusableWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setFocusableWindowState(boolean)\"\u003e\u003ccode\u003esetFocusableWindowState(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isShowing()\"\u003e\u003ccode\u003eisShowing()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setFocusable(boolean)\"\u003e\u003ccode\u003eComponent.setFocusable(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "whether this Window can be the focused Window"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "focusableWindowState"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFocusableWindowState",
      "comment": "Sets whether this Window can become the focused Window if it meets the other requirements outlined in isFocusableWindow. If this Window\u0027s focusable Window state is set to false, then isFocusableWindow will return false. If this Window\u0027s focusable Window state is set to true, then isFocusableWindow may return true or false depending upon the other requirements which must be met in order for a Window to be focusable. Setting a Window\u0027s focusability state to false is the standard mechanism for an application to identify to the AWT a Window which will be used as a floating palette or toolbar, and thus should be a non-focusable Window. Setting the focusability state on a visible Window can have a delayed effect on some platforms — the actual change may happen only when the Window becomes hidden and then visible again. To ensure consistent behavior across platforms, set the Window\u0027s focusable state when the Window is invisible and then show it.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isFocusableWindow()\"\u003e\u003ccode\u003eisFocusableWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getFocusableWindowState()\"\u003e\u003ccode\u003egetFocusableWindowState()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isShowing()\"\u003e\u003ccode\u003eisShowing()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setFocusable(boolean)\"\u003e\u003ccode\u003eComponent.setFocusable(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efocusableWindowState\u003c/code\u003e - whether this Window can be the focused Window"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "autoRequestFocus"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAutoRequestFocus",
      "comment": "Sets whether this window should receive focus on subsequently being shown (with a call to setVisible(true)), or being moved to the front (with a call to toFront()). Note that setVisible(true) may be called indirectly (e.g. when showing an owner of the window makes the window to be shown). toFront() may also be called indirectly (e.g. when setVisible(true) is called on already visible window). In all such cases this property takes effect as well. The value of the property is not inherited by owned windows.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isAutoRequestFocus()\"\u003e\u003ccode\u003eisAutoRequestFocus()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isFocusableWindow()\"\u003e\u003ccode\u003eisFocusableWindow()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setVisible(boolean)\"\u003e\u003ccode\u003esetVisible(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#toFront()\"\u003e\u003ccode\u003etoFront()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eautoRequestFocus\u003c/code\u003e - whether this window should be focused on subsequently being shown or being moved to the front"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAutoRequestFocus",
      "comment": "Returns whether this window should receive focus on subsequently being shown (with a call to setVisible(true)), or being moved to the front (with a call to toFront()). By default, the window has autoRequestFocus value of true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setAutoRequestFocus(boolean)\"\u003e\u003ccode\u003esetAutoRequestFocus(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003eautoRequestFocus\u003c/code\u003e value"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addPropertyChangeListener",
      "comment": "Adds a PropertyChangeListener to the listener list. The listener is registered for all bound properties of this class, including the following: this Window\u0027s font (\"font\") this Window\u0027s background color (\"background\") this Window\u0027s foreground color (\"foreground\") this Window\u0027s focusability (\"focusable\") this Window\u0027s focus traversal keys enabled state (\"focusTraversalKeysEnabled\") this Window\u0027s Set of FORWARD_TRAVERSAL_KEYS (\"forwardFocusTraversalKeys\") this Window\u0027s Set of BACKWARD_TRAVERSAL_KEYS (\"backwardFocusTraversalKeys\") this Window\u0027s Set of UP_CYCLE_TRAVERSAL_KEYS (\"upCycleFocusTraversalKeys\") this Window\u0027s Set of DOWN_CYCLE_TRAVERSAL_KEYS (\"downCycleFocusTraversalKeys\") this Window\u0027s focus traversal policy (\"focusTraversalPolicy\") this Window\u0027s focusable Window state (\"focusableWindowState\") this Window\u0027s always-on-top state(\"alwaysOnTop\") Note that if this Window is inheriting a bound property, then no event will be fired in response to a change in the inherited property. If listener is null, no exception is thrown and no action is performed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#removePropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eComponent.removePropertyChangeListener(java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eaddPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#addPropertyChangeListener(java.beans.PropertyChangeListener)\"\u003eaddPropertyChangeListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the PropertyChangeListener to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addPropertyChangeListener",
      "comment": "Adds a PropertyChangeListener to the listener list for a specific property. The specified property may be user-defined, or one of the following: this Window\u0027s font (\"font\") this Window\u0027s background color (\"background\") this Window\u0027s foreground color (\"foreground\") this Window\u0027s focusability (\"focusable\") this Window\u0027s focus traversal keys enabled state (\"focusTraversalKeysEnabled\") this Window\u0027s Set of FORWARD_TRAVERSAL_KEYS (\"forwardFocusTraversalKeys\") this Window\u0027s Set of BACKWARD_TRAVERSAL_KEYS (\"backwardFocusTraversalKeys\") this Window\u0027s Set of UP_CYCLE_TRAVERSAL_KEYS (\"upCycleFocusTraversalKeys\") this Window\u0027s Set of DOWN_CYCLE_TRAVERSAL_KEYS (\"downCycleFocusTraversalKeys\") this Window\u0027s focus traversal policy (\"focusTraversalPolicy\") this Window\u0027s focusable Window state (\"focusableWindowState\") this Window\u0027s always-on-top state(\"alwaysOnTop\") Note that if this Window is inheriting a bound property, then no event will be fired in response to a change in the inherited property. If listener is null, no exception is thrown and no action is performed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#addPropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eaddPropertyChangeListener(java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#removePropertyChangeListener(java.beans.PropertyChangeListener)\"\u003e\u003ccode\u003eComponent.removePropertyChangeListener(java.beans.PropertyChangeListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)\"\u003eaddPropertyChangeListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - one of the property names listed above",
          "\u003ccode\u003elistener\u003c/code\u003e - the PropertyChangeListener to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isValidateRoot",
      "comment": "Indicates if this container is a validate root. Window objects are the validate roots, and, therefore, they override this method to return true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#isValidateRoot()\"\u003e\u003ccode\u003eContainer.isValidateRoot()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#isValidateRoot()\"\u003eisValidateRoot\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Event",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "postEvent",
      "comment": "Description copied from interface: MenuContainer",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#postEvent(java.awt.Event)\"\u003epostEvent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MenuContainer.html#postEvent(java.awt.Event)\"\u003epostEvent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/MenuContainer.html\" title\u003d\"interface in java.awt\"\u003eMenuContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the event to dispatch"
        ],
        "return": [
          "the results of posting the event"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isShowing",
      "comment": "Checks if this Window is showing on screen.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setVisible(boolean)\"\u003e\u003ccode\u003eComponent.setVisible(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isShowing()\"\u003eisShowing\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the component is showing, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.ResourceBundle",
            "type": "Class"
          },
          "field": {
            "name": "rb"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "applyResourceBundle",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003erb\u003c/code\u003e - the resource bundle"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "rbName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "applyResourceBundle",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003erbName\u003c/code\u003e - the resource name"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Window$Type",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setType",
      "comment": "Sets the type of the window. This method can only be called while the window is not displayable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isDisplayable()\"\u003e\u003ccode\u003eComponent.isDisplayable()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getType()\"\u003e\u003ccode\u003egetType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the window type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/IllegalComponentStateException.html\" title\u003d\"class in java.awt\"\u003eIllegalComponentStateException\u003c/a\u003e\u003c/code\u003e - if the window is displayable.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the type is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Window$Type",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getType",
      "comment": "Returns the type of the window.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setType(java.awt.Window.Type)\"\u003e\u003ccode\u003esetType(java.awt.Window.Type)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the type of the window"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.accessibility.AccessibleContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAccessibleContext",
      "comment": "Gets the AccessibleContext associated with this Window. For windows, the AccessibleContext takes the form of an AccessibleAWTWindow. A new AccessibleAWTWindow instance is created if necessary.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html#getAccessibleContext()\"\u003egetAccessibleContext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/javax/accessibility/Accessible.html\" title\u003d\"interface in javax.accessibility\"\u003eAccessible\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an AccessibleAWTWindow that serves as the AccessibleContext of this Window"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Component",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLocationRelativeTo",
      "comment": "Sets the location of the window relative to the specified component according to the following scenarios. The target screen mentioned below is a screen to which the window should be placed after the setLocationRelativeTo method is called. If the component is null, or the GraphicsConfiguration associated with this component is null, the window is placed in the center of the screen. The center point can be obtained with the GraphicsEnvironment.getCenterPoint method. If the component is not null, but it is not currently showing, the window is placed in the center of the target screen defined by the GraphicsConfiguration associated with this component. If the component is not null and is shown on the screen, then the window is located in such a way that the center of the window coincides with the center of the component. If the screens configuration does not allow the window to be moved from one screen to another, then the window is only placed at the location determined according to the above conditions and its GraphicsConfiguration is not changed. Note: If the lower edge of the window is out of the screen, then the window is placed to the side of the Component that is closest to the center of the screen. So if the component is on the right part of the screen, the window is placed to its left, and vice versa. If after the window location has been calculated, the upper, left, or right edge of the window is out of the screen, then the window is located in such a way that the upper, left, or right edge of the window coincides with the corresponding edge of the screen. If both left and right edges of the window are out of the screen, the window is placed at the left side of the screen. The similar placement will occur if both top and bottom edges are out of the screen. In that case, the window is placed at the top side of the screen. The method changes the geometry-related data. Therefore, the native windowing system may ignore such requests, or it may modify the requested data, so that the Window object is placed and sized in a way that corresponds closely to the desktop settings.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#getCenterPoint()\"\u003e\u003ccode\u003eGraphicsEnvironment.getCenterPoint()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the component in relation to which the window\u0027s location is determined"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "numBuffers"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createBufferStrategy",
      "comment": "Creates a new strategy for multi-buffering on this component. Multi-buffering is useful for rendering performance. This method attempts to create the best strategy available with the number of buffers supplied. It will always create a BufferStrategy with that number of buffers. A page-flipping strategy is attempted first, then a blitting strategy using accelerated buffers. Finally, an unaccelerated blitting strategy is used. Each time this method is called, the existing buffer strategy for this component is discarded.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isDisplayable()\"\u003e\u003ccode\u003eComponent.isDisplayable()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getBufferStrategy()\"\u003e\u003ccode\u003egetBufferStrategy()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enumBuffers\u003c/code\u003e - number of buffers to create"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if numBuffers is less than 1.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the component is not displayable"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.AWTException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "numBuffers"
          }
        },
        {
          "type": {
            "name": "java.awt.BufferCapabilities",
            "type": "Class"
          },
          "field": {
            "name": "caps"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createBufferStrategy",
      "comment": "Creates a new strategy for multi-buffering on this component with the required buffer capabilities. This is useful, for example, if only accelerated memory or page flipping is desired (as specified by the buffer capabilities). Each time this method is called, the existing buffer strategy for this component is discarded.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getBufferStrategy()\"\u003e\u003ccode\u003egetBufferStrategy()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enumBuffers\u003c/code\u003e - number of buffers to create, including the front buffer",
          "\u003ccode\u003ecaps\u003c/code\u003e - the required capabilities for creating the buffer strategy; cannot be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/AWTException.html\" title\u003d\"class in java.awt\"\u003eAWTException\u003c/a\u003e\u003c/code\u003e - if the capabilities supplied could not be supported or met; this may happen, for example, if there is not enough accelerated memory currently available, or if page flipping is specified but not possible.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if numBuffers is less than 1, or if caps is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.BufferStrategy",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBufferStrategy",
      "comment": "Returns the BufferStrategy used by this component. This method will return null if a BufferStrategy has not yet been created or has been disposed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#createBufferStrategy(int)\"\u003e\u003ccode\u003ecreateBufferStrategy(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the buffer strategy used by this component"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "locationByPlatform"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLocationByPlatform",
      "comment": "Sets whether this Window should appear at the default location for the native windowing system or at the current location (returned by getLocation) the next time the Window is made visible. This behavior resembles a native window shown without programmatically setting its location. Most windowing systems cascade windows if their locations are not explicitly set. The actual location is determined once the window is shown on the screen. This behavior can also be enabled by setting the System Property \"java.awt.Window.locationByPlatform\" to \"true\", though calls to this method take precedence. Calls to setVisible, setLocation and setBounds after calling setLocationByPlatform clear this property of the Window. For example, after the following code is executed:  setLocationByPlatform(true);\n setVisible(true);\n boolean flag \u003d isLocationByPlatform();\n The window will be shown at platform\u0027s default location and flag will be false. In the following sample:  setLocationByPlatform(true);\n setLocation(10, 10);\n boolean flag \u003d isLocationByPlatform();\n setVisible(true);\n The window will be shown at (10, 10) and flag will be false.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setLocation(int,int)\"\u003e\u003ccode\u003esetLocation(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isShowing()\"\u003e\u003ccode\u003eisShowing()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setVisible(boolean)\"\u003e\u003ccode\u003esetVisible(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isLocationByPlatform()\"\u003e\u003ccode\u003eisLocationByPlatform()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elocationByPlatform\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if this Window should appear at the default location, \n\u003ccode\u003efalse\u003c/code\u003e if at the current location"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/IllegalComponentStateException.html\" title\u003d\"class in java.awt\"\u003eIllegalComponentStateException\u003c/a\u003e\u003c/code\u003e - if the window is showing on screen and locationByPlatform is \n\u003ccode\u003etrue\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLocationByPlatform",
      "comment": "Returns true if this Window will appear at the default location for the native windowing system the next time this Window is made visible. This method always returns false if the Window is showing on the screen.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setLocationByPlatform(boolean)\"\u003e\u003ccode\u003esetLocationByPlatform(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isShowing()\"\u003e\u003ccode\u003eisShowing()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "whether this Window will appear at the default location"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBounds",
      "comment": "Moves and resizes this component. The new location of the top-left corner is specified by x and y, and the new size is specified by width and height. This method changes layout-related information, and therefore, invalidates the component hierarchy. The width or height values are automatically enlarged if either is less than the minimum size as specified by previous call to setMinimumSize. The method changes the geometry-related data. Therefore, the native windowing system may ignore such requests, or it may modify the requested data, so that the Window object is placed and sized in a way that corresponds closely to the desktop settings.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getBounds()\"\u003e\u003ccode\u003eComponent.getBounds()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setLocation(int,int)\"\u003e\u003ccode\u003esetLocation(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setLocation(java.awt.Point)\"\u003e\u003ccode\u003esetLocation(Point)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setSize(int,int)\"\u003e\u003ccode\u003esetSize(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setSize(java.awt.Dimension)\"\u003e\u003ccode\u003esetSize(Dimension)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setMinimumSize(java.awt.Dimension)\"\u003e\u003ccode\u003esetMinimumSize(java.awt.Dimension)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setLocationByPlatform(boolean)\"\u003e\u003ccode\u003esetLocationByPlatform(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isLocationByPlatform()\"\u003e\u003ccode\u003eisLocationByPlatform()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setBounds(int,int,int,int)\"\u003esetBounds\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the new \n\u003ci\u003ex\u003c/i\u003e-coordinate of this component",
          "\u003ccode\u003ey\u003c/code\u003e - the new \n\u003ci\u003ey\u003c/i\u003e-coordinate of this component",
          "\u003ccode\u003ewidth\u003c/code\u003e - the new \n\u003ccode\u003ewidth\u003c/code\u003e of this component",
          "\u003ccode\u003eheight\u003c/code\u003e - the new \n\u003ccode\u003eheight\u003c/code\u003e of this component"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBounds",
      "comment": "Moves and resizes this component to conform to the new bounding rectangle r. This component\u0027s new position is specified by r.x and r.y, and its new size is specified by r.width and r.height This method changes layout-related information, and therefore, invalidates the component hierarchy. The r.width or r.height values will be automatically enlarged if either is less than the minimum size as specified by previous call to setMinimumSize. The method changes the geometry-related data. Therefore, the native windowing system may ignore such requests, or it may modify the requested data, so that the Window object is placed and sized in a way that corresponds closely to the desktop settings.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getBounds()\"\u003e\u003ccode\u003eComponent.getBounds()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setLocation(int,int)\"\u003e\u003ccode\u003esetLocation(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setLocation(java.awt.Point)\"\u003e\u003ccode\u003esetLocation(Point)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setSize(int,int)\"\u003e\u003ccode\u003esetSize(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setSize(java.awt.Dimension)\"\u003e\u003ccode\u003esetSize(Dimension)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setMinimumSize(java.awt.Dimension)\"\u003e\u003ccode\u003esetMinimumSize(java.awt.Dimension)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setLocationByPlatform(boolean)\"\u003e\u003ccode\u003esetLocationByPlatform(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isLocationByPlatform()\"\u003e\u003ccode\u003eisLocationByPlatform()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setBounds(java.awt.Rectangle)\"\u003esetBounds\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003er\u003c/code\u003e - the new bounding rectangle for this component"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOpacity",
      "comment": "Returns the opacity of the window.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setOpacity(float)\"\u003e\u003ccode\u003esetOpacity(float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.WindowTranslucency.html\" title\u003d\"enum class in java.awt\"\u003e\u003ccode\u003eGraphicsDevice.WindowTranslucency\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the opacity of the window"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "opacity"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setOpacity",
      "comment": "Sets the opacity of the window. The opacity value is in the range [0..1]. Note that setting the opacity level of 0 may or may not disable the mouse event handling on this window. This is a platform-dependent behavior. The following conditions must be met in order to set the opacity value less than 1.0f: The TRANSLUCENT translucency must be supported by the underlying system The window must be undecorated (see Frame.setUndecorated(boolean) and Dialog.setUndecorated(boolean)) The window must not be in full-screen mode (see GraphicsDevice.setFullScreenWindow(Window)) If the requested opacity value is less than 1.0f, and any of the above conditions are not met, the window opacity will not change, and the IllegalComponentStateException will be thrown. The translucency levels of individual pixels may also be effected by the alpha component of their color (see setBackground(Color)) and the current shape of this window (see setShape(Shape)).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getOpacity()\"\u003e\u003ccode\u003egetOpacity()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setBackground(java.awt.Color)\"\u003e\u003ccode\u003esetBackground(Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setShape(java.awt.Shape)\"\u003e\u003ccode\u003esetShape(Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Frame.html#isUndecorated()\"\u003e\u003ccode\u003eFrame.isUndecorated()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Dialog.html#isUndecorated()\"\u003e\u003ccode\u003eDialog.isUndecorated()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.WindowTranslucency.html\" title\u003d\"enum class in java.awt\"\u003e\u003ccode\u003eGraphicsDevice.WindowTranslucency\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#isWindowTranslucencySupported(java.awt.GraphicsDevice.WindowTranslucency)\"\u003e\u003ccode\u003eGraphicsDevice.isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eopacity\u003c/code\u003e - the opacity level to set to the window"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the opacity is out of the range [0..1]",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/IllegalComponentStateException.html\" title\u003d\"class in java.awt\"\u003eIllegalComponentStateException\u003c/a\u003e\u003c/code\u003e - if the window is decorated and the opacity is less than \n\u003ccode\u003e1.0f\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/IllegalComponentStateException.html\" title\u003d\"class in java.awt\"\u003eIllegalComponentStateException\u003c/a\u003e\u003c/code\u003e - if the window is in full screen mode, and the opacity is less than \n\u003ccode\u003e1.0f\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003e GraphicsDevice.WindowTranslucency#TRANSLUCENT TRANSLUCENT\u003c/code\u003e translucency is not supported and the opacity is less than \n\u003ccode\u003e1.0f\u003c/code\u003e"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getShape",
      "comment": "Returns the shape of the window. The value returned by this method may not be the same as previously set with setShape(shape), but it is guaranteed to represent the same shape.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setShape(java.awt.Shape)\"\u003e\u003ccode\u003esetShape(Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.WindowTranslucency.html\" title\u003d\"enum class in java.awt\"\u003e\u003ccode\u003eGraphicsDevice.WindowTranslucency\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the shape of the window or \n\u003ccode\u003enull\u003c/code\u003e if no shape is specified for the window"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "shape"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setShape",
      "comment": "Sets the shape of the window. Setting a shape cuts off some parts of the window. Only the parts that belong to the given Shape remain visible and clickable. If the shape argument is null, this method restores the default shape, making the window rectangular on most platforms. The following conditions must be met to set a non-null shape: The PERPIXEL_TRANSPARENT translucency must be supported by the underlying system The window must be undecorated (see Frame.setUndecorated(boolean) and Dialog.setUndecorated(boolean)) The window must not be in full-screen mode (see GraphicsDevice.setFullScreenWindow(Window)) If the requested shape is not null, and any of the above conditions are not met, the shape of this window will not change, and either the UnsupportedOperationException or IllegalComponentStateException will be thrown. The translucency levels of individual pixels may also be effected by the alpha component of their color (see setBackground(Color)) and the opacity value (see setOpacity(float)). See GraphicsDevice.WindowTranslucency for more details.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getShape()\"\u003e\u003ccode\u003egetShape()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setBackground(java.awt.Color)\"\u003e\u003ccode\u003esetBackground(Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setOpacity(float)\"\u003e\u003ccode\u003esetOpacity(float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Frame.html#isUndecorated()\"\u003e\u003ccode\u003eFrame.isUndecorated()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Dialog.html#isUndecorated()\"\u003e\u003ccode\u003eDialog.isUndecorated()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.WindowTranslucency.html\" title\u003d\"enum class in java.awt\"\u003e\u003ccode\u003eGraphicsDevice.WindowTranslucency\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#isWindowTranslucencySupported(java.awt.GraphicsDevice.WindowTranslucency)\"\u003e\u003ccode\u003eGraphicsDevice.isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eshape\u003c/code\u003e - the shape to set to the window"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/IllegalComponentStateException.html\" title\u003d\"class in java.awt\"\u003eIllegalComponentStateException\u003c/a\u003e\u003c/code\u003e - if the shape is not \n\u003ccode\u003e null\u003c/code\u003e and the window is decorated",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/IllegalComponentStateException.html\" title\u003d\"class in java.awt\"\u003eIllegalComponentStateException\u003c/a\u003e\u003c/code\u003e - if the shape is not \n\u003ccode\u003e null\u003c/code\u003e and the window is in full-screen mode",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the shape is not \n\u003ccode\u003e null\u003c/code\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.WindowTranslucency.html#PERPIXEL_TRANSPARENT\"\u003e\u003ccode\u003ePERPIXEL_TRANSPARENT\u003c/code\u003e\u003c/a\u003e translucency is not supported"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Color",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBackground",
      "comment": "Gets the background color of this window. Note that the alpha component of the returned color indicates whether the window is in the non-opaque (per-pixel translucent) mode.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setBackground(java.awt.Color)\"\u003e\u003ccode\u003esetBackground(Color)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isOpaque()\"\u003e\u003ccode\u003eisOpaque()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.WindowTranslucency.html\" title\u003d\"enum class in java.awt\"\u003e\u003ccode\u003eGraphicsDevice.WindowTranslucency\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#getBackground()\"\u003egetBackground\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "this component\u0027s background color"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Color",
            "type": "Class"
          },
          "field": {
            "name": "bgColor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBackground",
      "comment": "Sets the background color of this window. If the windowing system supports the PERPIXEL_TRANSLUCENT translucency, the alpha component of the given background color may effect the mode of operation for this window: it indicates whether this window must be opaque (alpha equals 1.0f) or per-pixel translucent (alpha is less than 1.0f). If the given background color is null, the window is considered completely opaque. All the following conditions must be met to enable the per-pixel transparency mode for this window: The PERPIXEL_TRANSLUCENT translucency must be supported by the graphics device where this window is located The window must be undecorated (see Frame.setUndecorated(boolean) and Dialog.setUndecorated(boolean)) The window must not be in full-screen mode (see GraphicsDevice.setFullScreenWindow(Window)) If the alpha component of the requested background color is less than 1.0f, and any of the above conditions are not met, the background color of this window will not change, the alpha component of the given background color will not affect the mode of operation for this window, and either the UnsupportedOperationException or IllegalComponentStateException will be thrown. When the window is per-pixel translucent, the drawing sub-system respects the alpha value of each individual pixel. If a pixel gets painted with the alpha color component equal to zero, it becomes visually transparent. If the alpha of the pixel is equal to 1.0f, the pixel is fully opaque. Interim values of the alpha color component make the pixel semi-transparent. In this mode, the background of the window gets painted with the alpha value of the given background color. If the alpha value of the argument of this method is equal to 0, the background is not painted at all. The actual level of translucency of a given pixel also depends on window opacity (see setOpacity(float)), as well as the current shape of this window (see setShape(Shape)). Note that painting a pixel with the alpha value of 0 may or may not disable the mouse event handling on this pixel. This is a platform-dependent behavior. To make sure the mouse events do not get dispatched to a particular pixel, the pixel must be excluded from the shape of the window. Enabling the per-pixel translucency mode may change the graphics configuration of this window due to the native platform requirements.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getBackground()\"\u003e\u003ccode\u003egetBackground()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isOpaque()\"\u003e\u003ccode\u003eisOpaque()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setOpacity(float)\"\u003e\u003ccode\u003esetOpacity(float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setShape(java.awt.Shape)\"\u003e\u003ccode\u003esetShape(Shape)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Frame.html#isUndecorated()\"\u003e\u003ccode\u003eFrame.isUndecorated()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Dialog.html#isUndecorated()\"\u003e\u003ccode\u003eDialog.isUndecorated()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.WindowTranslucency.html\" title\u003d\"enum class in java.awt\"\u003e\u003ccode\u003eGraphicsDevice.WindowTranslucency\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.html#isWindowTranslucencySupported(java.awt.GraphicsDevice.WindowTranslucency)\"\u003e\u003ccode\u003eGraphicsDevice.isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html#isTranslucencyCapable()\"\u003e\u003ccode\u003eGraphicsConfiguration.isTranslucencyCapable()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#setBackground(java.awt.Color)\"\u003esetBackground\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ebgColor\u003c/code\u003e - the color to become this window\u0027s background color."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/IllegalComponentStateException.html\" title\u003d\"class in java.awt\"\u003eIllegalComponentStateException\u003c/a\u003e\u003c/code\u003e - if the alpha value of the given background color is less than \n\u003ccode\u003e1.0f\u003c/code\u003e and the window is decorated",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/IllegalComponentStateException.html\" title\u003d\"class in java.awt\"\u003eIllegalComponentStateException\u003c/a\u003e\u003c/code\u003e - if the alpha value of the given background color is less than \n\u003ccode\u003e1.0f\u003c/code\u003e and the window is in full-screen mode",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the alpha value of the given background color is less than \n\u003ccode\u003e1.0f\u003c/code\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsDevice.WindowTranslucency.html#PERPIXEL_TRANSLUCENT\"\u003e\u003ccode\u003ePERPIXEL_TRANSLUCENT\u003c/code\u003e\u003c/a\u003e translucency is not supported"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isOpaque",
      "comment": "Indicates if the window is currently opaque. The method returns false if the background color of the window is not null and the alpha component of the color is less than 1.0f. The method returns true otherwise.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#getBackground()\"\u003e\u003ccode\u003egetBackground()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#setBackground(java.awt.Color)\"\u003e\u003ccode\u003esetBackground(Color)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#isOpaque()\"\u003eisOpaque\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003eComponent\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the window is opaque, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Graphics",
            "type": "Class"
          },
          "field": {
            "name": "g"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "paint",
      "comment": "Paints the container. This forwards the paint to any lightweight components that are children of this container. If this method is reimplemented, super.paint(g) should be called so that lightweight components are properly rendered. If a child component is entirely clipped by the current clipping setting in g, paint() will not be forwarded to that child.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#update(java.awt.Graphics)\"\u003e\u003ccode\u003eComponent.update(Graphics)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html#paint(java.awt.Graphics)\"\u003epaint\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Container.html\" title\u003d\"class in java.awt\"\u003eContainer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eg\u003c/code\u003e - the specified Graphics window"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.Frame",
            "type": "Class"
          },
          "field": {
            "name": "owner"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new, initially invisible window with the specified Frame as its owner. The window will not be focusable unless its owner is showing on the screen. If there is a security manager set, it is invoked to check AWTPermission(\"showWindowWithoutWarningBanner\"). If that check fails with a SecurityException then a warning banner is created.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isShowing()\"\u003e\u003ccode\u003eisShowing()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eowner\u003c/code\u003e - the \n\u003ccode\u003eFrame\u003c/code\u003e to act as owner or \n\u003ccode\u003enull\u003c/code\u003e if this window has no owner"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eowner\u003c/code\u003e\u0027s \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e is not from a screen device",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - when \n\u003ccode\u003eGraphicsEnvironment.isHeadless\u003c/code\u003e returns \n\u003ccode\u003etrue\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.Window",
            "type": "Class"
          },
          "field": {
            "name": "owner"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new, initially invisible window with the specified Window as its owner. This window will not be focusable unless its nearest owning Frame or Dialog is showing on the screen. If there is a security manager set, it is invoked to check AWTPermission(\"showWindowWithoutWarningBanner\"). If that check fails with a SecurityException then a warning banner is created.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isShowing()\"\u003e\u003ccode\u003eisShowing()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eowner\u003c/code\u003e - the \n\u003ccode\u003eWindow\u003c/code\u003e to act as owner or \n\u003ccode\u003enull\u003c/code\u003e if this window has no owner"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eowner\u003c/code\u003e\u0027s \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e is not from a screen device",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - when \n\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e returns \n\u003ccode\u003etrue\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.Window",
            "type": "Class"
          },
          "field": {
            "name": "owner"
          }
        },
        {
          "type": {
            "name": "java.awt.GraphicsConfiguration",
            "type": "Class"
          },
          "field": {
            "name": "gc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new, initially invisible window with the specified owner Window and a GraphicsConfiguration of a screen device. The Window will not be focusable unless its nearest owning Frame or Dialog is showing on the screen. If there is a security manager set, it is invoked to check AWTPermission(\"showWindowWithoutWarningBanner\"). If that check fails with a SecurityException then a warning banner is created.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#isHeadless()\"\u003e\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html#getBounds()\"\u003e\u003ccode\u003eGraphicsConfiguration.getBounds()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#isShowing()\"\u003e\u003ccode\u003eisShowing()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eowner\u003c/code\u003e - the window to act as owner or \n\u003ccode\u003enull\u003c/code\u003e if this window has no owner",
          "\u003ccode\u003egc\u003c/code\u003e - the \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e of the target screen device; if \n\u003ccode\u003egc\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, the system default \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e is assumed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003egc\u003c/code\u003e is not from a screen device",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/HeadlessException.html\" title\u003d\"class in java.awt\"\u003eHeadlessException\u003c/a\u003e\u003c/code\u003e - when \n\u003ccode\u003eGraphicsEnvironment.isHeadless()\u003c/code\u003e returns \n\u003ccode\u003etrue\u003c/code\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.awt.Window$AccessibleAWTWindow",
    "java.awt.Window$Type"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.Window",
  "comment": "A \n\u003ccode\u003eWindow\u003c/code\u003e object is a top-level window with no borders and no menubar. The default layout for a window is \n\u003ccode\u003eBorderLayout\u003c/code\u003e. \n\u003cp\u003e A window must have either a frame, dialog, or another window defined as its owner when it\u0027s constructed. \u003c/p\u003e\n\u003cp\u003e In a multi-screen environment, you can create a \u003ccode\u003eWindow\u003c/code\u003e on a different screen device by constructing the \u003ccode\u003eWindow\u003c/code\u003e with \u003ca href\u003d\"#%3Cinit%3E(java.awt.Window,java.awt.GraphicsConfiguration)\"\u003e\u003ccode\u003eWindow(Window, GraphicsConfiguration)\u003c/code\u003e\u003c/a\u003e. The \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e object is one of the \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e objects of the target screen device. \u003c/p\u003e\n\u003cp\u003e In a virtual device multi-screen environment in which the desktop area could span multiple physical screen devices, the bounds of all configurations are relative to the virtual device coordinate system. The origin of the virtual-coordinate system is at the upper left-hand corner of the primary physical screen. Depending on the location of the primary screen in the virtual device, negative coordinates are possible, as shown in the following figure. \u003c/p\u003e\n\u003cp\u003e \u003cimg src\u003d\"doc-files/MultiScreen.gif\" alt\u003d\"Diagram shows virtual device containing 4 physical screens. Primary\n physical screen shows coords (0,0), other screen shows (-80,-100).\" style\u003d\"margin: 7px 10px;\"\u003e \u003c/p\u003e\n\u003cp\u003e In such an environment, when calling \u003ccode\u003esetLocation\u003c/code\u003e, you must pass a virtual coordinate to this method. Similarly, calling \u003ccode\u003egetLocationOnScreen\u003c/code\u003e on a \u003ccode\u003eWindow\u003c/code\u003e returns virtual device coordinates. Call the \u003ccode\u003egetBounds\u003c/code\u003e method of a \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e to find its origin in the virtual coordinate system. \u003c/p\u003e\n\u003cp\u003e The following code sets the location of a \u003ccode\u003eWindow\u003c/code\u003e at (10, 10) relative to the origin of the physical screen of the corresponding \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e. If the bounds of the \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e is not taken into account, the \u003ccode\u003eWindow\u003c/code\u003e location would be set at (10, 10) relative to the virtual-coordinate system and would appear on the primary physical screen, which might be different from the physical screen of the specified \u003ccode\u003eGraphicsConfiguration\u003c/code\u003e. \u003c/p\u003e\n\u003cpre\u003e      Window w \u003d new Window(Window owner, GraphicsConfiguration gc);\n      Rectangle bounds \u003d gc.getBounds();\n      w.setLocation(10 + bounds.x, 10 + bounds.y);\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Note: the location and size of top-level windows (including \u003ccode\u003eWindow\u003c/code\u003es, \u003ccode\u003eFrame\u003c/code\u003es, and \u003ccode\u003eDialog\u003c/code\u003es) are under the control of the desktop\u0027s window management system. Calls to \u003ccode\u003esetLocation\u003c/code\u003e, \u003ccode\u003esetSize\u003c/code\u003e, and \u003ccode\u003esetBounds\u003c/code\u003e are requests (not directives) which are forwarded to the window management system. Every effort will be made to honor such requests. However, in some cases the window management system may ignore such requests, or modify the requested geometry in order to place and size the \u003ccode\u003eWindow\u003c/code\u003e in a way that more closely matches the desktop settings. \u003c/p\u003e\n\u003cp\u003e Visual effects such as halos, shadows, motion effects and animations may be applied to the window by the desktop window management system. These are outside the knowledge and control of the AWT and so for the purposes of this specification are not considered part of the top-level window. \u003c/p\u003e\n\u003cp\u003e Due to the asynchronous nature of native event handling, the results returned by \u003ccode\u003egetBounds\u003c/code\u003e, \u003ccode\u003egetLocation\u003c/code\u003e, \u003ccode\u003egetLocationOnScreen\u003c/code\u003e, and \u003ccode\u003egetSize\u003c/code\u003e might not reflect the actual geometry of the Window on screen until the last request has been processed. During the processing of subsequent requests these values might change accordingly while the window management system fulfills the requests. \u003c/p\u003e\n\u003cp\u003e An application may set the size and location of an invisible \u003ccode\u003eWindow\u003c/code\u003e arbitrarily, but the window management system may subsequently change its size and/or location when the \u003ccode\u003eWindow\u003c/code\u003e is made visible. One or more \u003ccode\u003eComponentEvent\u003c/code\u003es will be generated to indicate the new geometry. \u003c/p\u003e\n\u003cp\u003e Windows are capable of generating the following WindowEvents: WindowOpened, WindowClosed, WindowGainedFocus, WindowLostFocus.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/event/WindowEvent.html\" title\u003d\"class in java.awt.event\"\u003e\u003ccode\u003eWindowEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Window.html#addWindowListener(java.awt.event.WindowListener)\"\u003e\u003ccode\u003eaddWindowListener(java.awt.event.WindowListener)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/BorderLayout.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eBorderLayout\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.Window\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}