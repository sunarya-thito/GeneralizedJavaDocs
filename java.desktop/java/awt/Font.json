{
  "packageName": "java.awt",
  "simpleName": "Font",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIALOG",
      "comment": "A String constant for the canonical family name of the logical font \"Dialog\". It is useful in Font construction to provide compile-time verification of the name.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.DIALOG\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIALOG_INPUT",
      "comment": "A String constant for the canonical family name of the logical font \"DialogInput\". It is useful in Font construction to provide compile-time verification of the name.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.DIALOG_INPUT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SANS_SERIF",
      "comment": "A String constant for the canonical family name of the logical font \"SansSerif\". It is useful in Font construction to provide compile-time verification of the name.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.SANS_SERIF\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SERIF",
      "comment": "A String constant for the canonical family name of the logical font \"Serif\". It is useful in Font construction to provide compile-time verification of the name.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.SERIF\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MONOSPACED",
      "comment": "A String constant for the canonical family name of the logical font \"Monospaced\". It is useful in Font construction to provide compile-time verification of the name.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.MONOSPACED\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PLAIN",
      "comment": "The plain style constant.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.PLAIN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BOLD",
      "comment": "The bold style constant. This can be combined with the other style constants (except PLAIN) for mixed styles.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.BOLD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ITALIC",
      "comment": "The italicized style constant. This can be combined with the other style constants (except PLAIN) for mixed styles.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.ITALIC\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROMAN_BASELINE",
      "comment": "The baseline used in most Roman scripts when laying out text.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.ROMAN_BASELINE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CENTER_BASELINE",
      "comment": "The baseline used in ideographic scripts like Chinese, Japanese, and Korean when laying out text.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.CENTER_BASELINE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "HANGING_BASELINE",
      "comment": "The baseline used in Devanagari and similar scripts when laying out text.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.HANGING_BASELINE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TRUETYPE_FONT",
      "comment": "Identify a font resource of type TRUETYPE. Used to specify a TrueType font resource to the createFont(int, java.io.InputStream) method. The TrueType format was extended to become the OpenType format, which adds support for fonts with Postscript outlines, this tag therefore references these fonts, as well as those with TrueType outlines.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.TRUETYPE_FONT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TYPE1_FONT",
      "comment": "Identify a font resource of type TYPE1. Used to specify a Type1 font resource to the createFont(int, java.io.InputStream) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.TYPE1_FONT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "name",
      "comment": "The logical name of this Font, as passed to the constructor.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getName()\"\u003e\u003ccode\u003egetName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "style",
      "comment": "The style of this Font, as passed to the constructor. This style can be PLAIN, BOLD, ITALIC, or BOLD+ITALIC.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getStyle()\"\u003e\u003ccode\u003egetStyle()\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "size",
      "comment": "The point size of this Font, rounded to integer.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getSize()\"\u003e\u003ccode\u003egetSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "type": {
        "name": "float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "pointSize",
      "comment": "The point size of this Font in float.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getSize()\"\u003e\u003ccode\u003egetSize()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getSize2D()\"\u003e\u003ccode\u003egetSize2D()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LAYOUT_LEFT_TO_RIGHT",
      "comment": "A flag to layoutGlyphVector indicating that text is left-to-right as determined by Bidi analysis.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.LAYOUT_LEFT_TO_RIGHT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LAYOUT_RIGHT_TO_LEFT",
      "comment": "A flag to layoutGlyphVector indicating that text is right-to-left as determined by Bidi analysis.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.LAYOUT_RIGHT_TO_LEFT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LAYOUT_NO_START_CONTEXT",
      "comment": "A flag to layoutGlyphVector indicating that text in the char array before the indicated start should not be examined.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.LAYOUT_NO_START_CONTEXT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LAYOUT_NO_LIMIT_CONTEXT",
      "comment": "A flag to layoutGlyphVector indicating that text in the char array after the indicated limit should not be examined.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.Font.LAYOUT_NO_LIMIT_CONTEXT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "chars",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "end",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "textRequiresLayout",
      "comment": "Returns true if any part of the specified text is from a complex script for which the implementation will need to invoke layout processing in order to render correctly when using drawString(String,int,int) and other text rendering methods. Measurement of the text may similarly need the same extra processing. The start and end indices are provided so that the application can request only a subset of the text be considered. The last char index examined is at \"end-1\", i.e a request to examine the entire array would be  Font.textRequiresLayout(chars, 0, chars.length);\n An application may find this information helpful in performance sensitive code. Note that even if this method returns false, layout processing may still be invoked when used with any Font for which hasLayoutAttributes() returns true, so that method will need to be consulted for the specific font, in order to obtain an answer which accounts for such font attributes.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003echars\u003c/code\u003e - the text.",
          "\u003ccode\u003estart\u003c/code\u003e - the index of the first char to examine.",
          "\u003ccode\u003eend\u003c/code\u003e - the ending index, exclusive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003echars\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e is negative or \n\u003ccode\u003eend\u003c/code\u003e is greater than the length of the \n\u003ccode\u003echars\u003c/code\u003e array."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified text will need special layout."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.text.AttributedCharacterIterator$Attribute",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "attributes",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFont",
      "comment": "Returns a Font appropriate to the attributes. If attributes contains a FONT attribute with a valid Font as its value, it will be merged with any remaining attributes. See TextAttribute.FONT for more information.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eTextAttribute\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eattributes\u003c/code\u003e - the attributes to assign to the new \n\u003ccode\u003eFont\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eattributes\u003c/code\u003e is null."
        ],
        "return": [
          "a new \n\u003ccode\u003eFont\u003c/code\u003e created with the specified attributes"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class",
        "arrayDimensions": 1
      },
      "throwsClasses": [
        {
          "name": "java.awt.FontFormatException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "name": "fontStream",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createFonts",
      "comment": "Returns a new array of Font decoded from the specified stream. The returned Font[] will have at least one element. The explicit purpose of this variation on the createFont(int, InputStream) method is to support font sources which represent a TrueType/OpenType font collection and be able to return all individual fonts in that collection. Consequently this method will throw FontFormatException if the data source does not contain at least one TrueType/OpenType font. The same exception will also be thrown if any of the fonts in the collection does not contain the required font tables. The condition \"at least one\", allows for the stream to represent a single OpenType/TrueType font. That is, it does not have to be a collection. Each Font element of the returned array is created with a point size of 1 and style PLAIN. This base font can then be used with the deriveFont methods in this class to derive new Font objects with varying sizes, styles, transforms and font features. This method does not close the InputStream. To make each Font available to Font constructors it must be registered in the GraphicsEnvironment by calling registerFont(Font).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#registerFont(java.awt.Font)\"\u003e\u003ccode\u003eGraphicsEnvironment.registerFont(Font)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efontStream\u003c/code\u003e - an \n\u003ccode\u003eInputStream\u003c/code\u003e object representing the input data for the font or font collection."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontFormatException.html\" title\u003d\"class in java.awt\"\u003eFontFormatException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003efontStream\u003c/code\u003e data does not contain the required font tables for any of the elements of the collection, or if it contains no fonts at all.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003efontStream\u003c/code\u003e cannot be completely read."
        ],
        "return": [
          "a new \n\u003ccode\u003eFont[]\u003c/code\u003e."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class",
        "arrayDimensions": 1
      },
      "throwsClasses": [
        {
          "name": "java.awt.FontFormatException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "name": "fontFile",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createFonts",
      "comment": "Returns a new array of Font decoded from the specified file. The returned Font[] will have at least one element. The explicit purpose of this variation on the createFont(int, File) method is to support font sources which represent a TrueType/OpenType font collection and be able to return all individual fonts in that collection. Consequently this method will throw FontFormatException if the data source does not contain at least one TrueType/OpenType font. The same exception will also be thrown if any of the fonts in the collection does not contain the required font tables. The condition \"at least one\", allows for the stream to represent a single OpenType/TrueType font. That is, it does not have to be a collection. Each Font element of the returned array is created with a point size of 1 and style PLAIN. This base font can then be used with the deriveFont methods in this class to derive new Font objects with varying sizes, styles, transforms and font features. To make each Font available to Font constructors it must be registered in the GraphicsEnvironment by calling registerFont(Font).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#registerFont(java.awt.Font)\"\u003e\u003ccode\u003eGraphicsEnvironment.registerFont(Font)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efontFile\u003c/code\u003e - a \n\u003ccode\u003eFile\u003c/code\u003e object containing the input data for the font or font collection."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontFormatException.html\" title\u003d\"class in java.awt\"\u003eFontFormatException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eFile\u003c/code\u003e does not contain the required font tables for any of the elements of the collection, or if it contains no fonts at all.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003efontFile\u003c/code\u003e cannot be read."
        ],
        "return": [
          "a new \n\u003ccode\u003eFont[]\u003c/code\u003e."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.FontFormatException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "fontFormat",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "name": "fontStream",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createFont",
      "comment": "Returns a new Font using the specified font type and input data. The new Font is created with a point size of 1 and style PLAIN. This base font can then be used with the deriveFont methods in this class to derive new Font objects with varying sizes, styles, transforms and font features. This method does not close the InputStream. To make the Font available to Font constructors the returned Font must be registered in the GraphicsEnvironment by calling registerFont(Font).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#registerFont(java.awt.Font)\"\u003e\u003ccode\u003eGraphicsEnvironment.registerFont(Font)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efontFormat\u003c/code\u003e - the type of the \n\u003ccode\u003eFont\u003c/code\u003e, which is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#TRUETYPE_FONT\"\u003e\u003ccode\u003eTRUETYPE_FONT\u003c/code\u003e\u003c/a\u003e if a TrueType resource is specified. or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#TYPE1_FONT\"\u003e\u003ccode\u003eTYPE1_FONT\u003c/code\u003e\u003c/a\u003e if a Type 1 resource is specified.",
          "\u003ccode\u003efontStream\u003c/code\u003e - an \n\u003ccode\u003eInputStream\u003c/code\u003e object representing the input data for the font."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efontFormat\u003c/code\u003e is not \n\u003ccode\u003eTRUETYPE_FONT\u003c/code\u003e or \n\u003ccode\u003eTYPE1_FONT\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontFormatException.html\" title\u003d\"class in java.awt\"\u003eFontFormatException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003efontStream\u003c/code\u003e data does not contain the required font tables for the specified format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003efontStream\u003c/code\u003e cannot be completely read."
        ],
        "return": [
          "a new \n\u003ccode\u003eFont\u003c/code\u003e created with the specified font type."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.awt.FontFormatException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "fontFormat",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "name": "fontFile",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createFont",
      "comment": "Returns a new Font using the specified font type and the specified font file. The new Font is created with a point size of 1 and style PLAIN. This base font can then be used with the deriveFont methods in this class to derive new Font objects with varying sizes, styles, transforms and font features.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#registerFont(java.awt.Font)\"\u003e\u003ccode\u003eGraphicsEnvironment.registerFont(Font)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efontFormat\u003c/code\u003e - the type of the \n\u003ccode\u003eFont\u003c/code\u003e, which is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#TRUETYPE_FONT\"\u003e\u003ccode\u003eTRUETYPE_FONT\u003c/code\u003e\u003c/a\u003e if a TrueType resource is specified or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#TYPE1_FONT\"\u003e\u003ccode\u003eTYPE1_FONT\u003c/code\u003e\u003c/a\u003e if a Type 1 resource is specified. So long as the returned font, or its derived fonts are referenced the implementation may continue to access \n\u003ccode\u003efontFile\u003c/code\u003e to retrieve font data. Thus the results are undefined if the file is changed, or becomes inaccessible. \n\u003cp\u003e To make the \u003ccode\u003eFont\u003c/code\u003e available to Font constructors the returned \u003ccode\u003eFont\u003c/code\u003e must be registered in the \u003ccode\u003eGraphicsEnvironment\u003c/code\u003e by calling \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#registerFont(java.awt.Font)\"\u003e\u003ccode\u003eregisterFont(Font)\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
          "\u003ccode\u003efontFile\u003c/code\u003e - a \n\u003ccode\u003eFile\u003c/code\u003e object representing the input data for the font."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efontFormat\u003c/code\u003e is not \n\u003ccode\u003eTRUETYPE_FONT\u003c/code\u003e or \n\u003ccode\u003eTYPE1_FONT\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efontFile\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003efontFile\u003c/code\u003e cannot be read.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/FontFormatException.html\" title\u003d\"class in java.awt\"\u003eFontFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efontFile\u003c/code\u003e does not contain the required font tables for the specified format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the executing code does not have permission to read from the file."
        ],
        "return": [
          "a new \n\u003ccode\u003eFont\u003c/code\u003e created with the specified font type."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.AffineTransform",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTransform",
      "comment": "Returns a copy of the transform associated with this Font. This transform is not necessarily the one used to construct the font. If the font has algorithmic superscripting or width adjustment, this will be incorporated into the returned AffineTransform. Typically, fonts will not be transformed. Clients generally should call isTransformed() first, and only call this method if isTransformed returns true.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/AffineTransform.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eAffineTransform\u003c/code\u003e\u003c/a\u003e object representing the transform attribute of this \n\u003ccode\u003eFont\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFamily",
      "comment": "Returns the family name of this Font. The family name of a font is font specific. Two fonts such as Helvetica Italic and Helvetica Bold have the same family name, Helvetica, whereas their font face names are Helvetica Bold and Helvetica Italic. The list of available family names may be obtained by using the GraphicsEnvironment.getAvailableFontFamilyNames() method. Use getName to get the logical name of the font. Use getFontName to get the font face name of the font.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getName()\"\u003e\u003ccode\u003egetName()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getFontName()\"\u003e\u003ccode\u003egetFontName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e that is the family name of this \n\u003ccode\u003eFont\u003c/code\u003e."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFamily",
      "comment": "Returns the family name of this Font, localized for the specified locale. The family name of a font is font specific. Two fonts such as Helvetica Italic and Helvetica Bold have the same family name, Helvetica, whereas their font face names are Helvetica Bold and Helvetica Italic. The list of available family names may be obtained by using the GraphicsEnvironment.getAvailableFontFamilyNames() method. Use getFontName to get the font face name of the font.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getFontName()\"\u003e\u003ccode\u003egetFontName()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - locale for which to get the family name"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e representing the family name of the font, localized for the specified locale."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPSName",
      "comment": "Returns the postscript name of this Font. Use getFamily to get the family name of the font. Use getFontName to get the font face name of the font.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e representing the postscript name of this \n\u003ccode\u003eFont\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getName",
      "comment": "Returns the logical name of this Font. Use getFamily to get the family name of the font. Use getFontName to get the font face name of the font.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getFamily()\"\u003e\u003ccode\u003egetFamily()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getFontName()\"\u003e\u003ccode\u003egetFontName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e representing the logical name of this \n\u003ccode\u003eFont\u003c/code\u003e."
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFontName",
      "comment": "Returns the font face name of this Font. For example, Helvetica Bold could be returned as a font face name. Use getFamily to get the family name of the font. Use getName to get the logical name of the font.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getFamily()\"\u003e\u003ccode\u003egetFamily()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getName()\"\u003e\u003ccode\u003egetName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e representing the font face name of this \n\u003ccode\u003eFont\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFontName",
      "comment": "Returns the font face name of the Font, localized for the specified locale. For example, Helvetica Fett could be returned as the font face name. Use getFamily to get the family name of the font.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getFamily()\"\u003e\u003ccode\u003egetFamily()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - a locale for which to get the font face name"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e representing the font face name, localized for the specified locale."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStyle",
      "comment": "Returns the style of this Font. The style can be PLAIN, BOLD, ITALIC, or BOLD+ITALIC.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#isPlain()\"\u003e\u003ccode\u003eisPlain()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#isBold()\"\u003e\u003ccode\u003eisBold()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#isItalic()\"\u003e\u003ccode\u003eisItalic()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the style of this \n\u003ccode\u003eFont\u003c/code\u003e"
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSize",
      "comment": "Returns the point size of this Font, rounded to an integer. Most users are familiar with the idea of using point size to specify the size of glyphs in a font. This point size defines a measurement between the baseline of one line to the baseline of the following line in a single spaced text document. The point size is based on typographic points, approximately 1/72 of an inch. The Java(tm)2D API adopts the convention that one point is equivalent to one unit in user coordinates. When using a normalized transform for converting user space coordinates to device space coordinates 72 user space units equal 1 inch in device space. In this case one point is 1/72 of an inch.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getSize2D()\"\u003e\u003ccode\u003egetSize2D()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html#getDefaultTransform()\"\u003e\u003ccode\u003eGraphicsConfiguration.getDefaultTransform()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html#getNormalizingTransform()\"\u003e\u003ccode\u003eGraphicsConfiguration.getNormalizingTransform()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the point size of this \n\u003ccode\u003eFont\u003c/code\u003e in 1/72 of an inch units."
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSize2D",
      "comment": "Returns the point size of this Font in float value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getSize()\"\u003e\u003ccode\u003egetSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the point size of this \n\u003ccode\u003eFont\u003c/code\u003e as a \n\u003ccode\u003efloat\u003c/code\u003e value."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPlain",
      "comment": "Indicates whether or not this Font object\u0027s style is PLAIN.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getStyle()\"\u003e\u003ccode\u003egetStyle()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eFont\u003c/code\u003e has a PLAIN style; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBold",
      "comment": "Indicates whether or not this Font object\u0027s style is BOLD.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getStyle()\"\u003e\u003ccode\u003egetStyle()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eFont\u003c/code\u003e object\u0027s style is BOLD; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isItalic",
      "comment": "Indicates whether or not this Font object\u0027s style is ITALIC.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getStyle()\"\u003e\u003ccode\u003egetStyle()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eFont\u003c/code\u003e object\u0027s style is ITALIC; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isTransformed",
      "comment": "Indicates whether or not this Font object has a transform that affects its size in addition to the Size attribute.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getTransform()\"\u003e\u003ccode\u003egetTransform()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eFont\u003c/code\u003e object has a non-identity AffineTransform attribute. \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasLayoutAttributes",
      "comment": "Return true if this Font contains attributes that require extra layout processing.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the font has layout attributes"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nm",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFont",
      "comment": "Returns a Font object from the system properties list. nm is treated as the name of a system property to be obtained. The String value of this property is then interpreted as a Font object according to the specification of Font.decode(String) If the specified property is not found, or the executing code does not have permission to read the property, null is returned instead.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#decode(java.lang.String)\"\u003e\u003ccode\u003edecode(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the property name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if nm is null."
        ],
        "return": [
          "a \n\u003ccode\u003eFont\u003c/code\u003e object that the property name describes, or null if no such property exists."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "decode",
      "comment": "Returns the Font that the str argument describes. To ensure that this method returns the desired Font, format the str parameter in one of these ways fontname-style-pointsize fontname-pointsize fontname-style fontname fontname style pointsize fontname pointsize fontname style fontname in which style is one of the four case-insensitive strings: \"PLAIN\", \"BOLD\", \"BOLDITALIC\", or \"ITALIC\", and pointsize is a positive decimal integer representation of the point size. For example, if you want a font that is Arial, bold, with a point size of 18, you would call this method with: \"Arial-BOLD-18\". This is equivalent to calling the Font constructor : new Font(\"Arial\", Font.BOLD, 18); and the values are interpreted as specified by that constructor. A valid trailing decimal field is always interpreted as the pointsize. Therefore a fontname containing a trailing decimal value should not be used in the fontname only form. If a style name field is not one of the valid style strings, it is interpreted as part of the font name, and the default style is used. Only one of \u0027 \u0027 or \u0027-\u0027 may be used to separate fields in the input. The identified separator is the one closest to the end of the string which separates a valid pointsize, or a valid style name from the rest of the string. Null (empty) pointsize and style fields are treated as valid fields with the default value for that field. Some font names may include the separator characters \u0027 \u0027 or \u0027-\u0027. If str is not formed with 3 components, e.g. such that style or pointsize fields are not present in str, and fontname also contains a character determined to be the separator character then these characters where they appear as intended to be part of fontname may instead be interpreted as separators so the font name may not be properly recognised. The default size is 12 and the default style is PLAIN. If str does not specify a valid size, the returned Font has a size of 12. If str does not specify a valid style, the returned Font has a style of PLAIN. If you do not specify a valid font name in the str argument, this method will return a font with the family name \"Dialog\". To determine what font family names are available on your system, use the GraphicsEnvironment.getAvailableFontFamilyNames() method. If str is null, a new Font is returned with the family name \"Dialog\", a size of 12 and a PLAIN style.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#getFamily()\"\u003e\u003ccode\u003egetFamily()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the name of the font, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eFont\u003c/code\u003e object that \n\u003ccode\u003estr\u003c/code\u003e describes, or a new default \n\u003ccode\u003eFont\u003c/code\u003e if \n\u003ccode\u003estr\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nm",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "name": "font",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFont",
      "comment": "Gets the specified Font from the system properties list. As in the getProperty method of System, the first argument is treated as the name of a system property to be obtained. The String value of this property is then interpreted as a Font object. The property value should be one of the forms accepted by Font.decode(String) If the specified property is not found, or the executing code does not have permission to read the property, the font argument is returned instead.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#decode(java.lang.String)\"\u003e\u003ccode\u003edecode(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the case-insensitive property name",
          "\u003ccode\u003efont\u003c/code\u003e - a default \n\u003ccode\u003eFont\u003c/code\u003e to return if property \n\u003ccode\u003enm\u003c/code\u003e is not defined"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if nm is null."
        ],
        "return": [
          "the \n\u003ccode\u003eFont\u003c/code\u003e value of the property."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hashcode for this Font.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hashcode value for this \n\u003ccode\u003eFont\u003c/code\u003e."
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this Font object to the specified Object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the \n\u003ccode\u003eObject\u003c/code\u003e to compare"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the objects are the same or if the argument is a \n\u003ccode\u003eFont\u003c/code\u003e object describing the same font as this object; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Converts this Font object to a String representation.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e representation of this \n\u003ccode\u003eFont\u003c/code\u003e object."
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNumGlyphs",
      "comment": "Returns the number of glyphs in this Font. Glyph codes for this Font range from 0 to getNumGlyphs() - 1.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of glyphs in this \n\u003ccode\u003eFont\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMissingGlyphCode",
      "comment": "Returns the glyphCode which is used when this Font does not have a glyph for a specified unicode code point.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the glyphCode of this \n\u003ccode\u003eFont\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaselineFor",
      "comment": "Returns the baseline appropriate for displaying this character. Large fonts can support different writing systems, and each system can use a different baseline. The character argument determines the writing system to use. Clients should not assume all characters use the same baseline.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/LineMetrics.html#getBaselineOffsets()\"\u003e\u003ccode\u003eLineMetrics.getBaselineOffsets()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#ROMAN_BASELINE\"\u003e\u003ccode\u003eROMAN_BASELINE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#CENTER_BASELINE\"\u003e\u003ccode\u003eCENTER_BASELINE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#HANGING_BASELINE\"\u003e\u003ccode\u003eHANGING_BASELINE\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a character used to identify the writing system"
        ],
        "return": [
          "the baseline appropriate for the specified character."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.awt.font.TextAttribute",
            "type": "Class"
          },
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAttributes",
      "comment": "Returns a map of font attributes available in this Font. Attributes include things like ligatures and glyph substitution.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the attributes map of this \n\u003ccode\u003eFont\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.text.AttributedCharacterIterator$Attribute",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAvailableAttributes",
      "comment": "Returns the keys of all the attributes supported by this Font. These attributes can be used to derive other fonts.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an array containing the keys of all the attributes supported by this \n\u003ccode\u003eFont\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "style",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "size",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "deriveFont",
      "comment": "Creates a new Font object by replicating this Font object and applying a new style and size.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estyle\u003c/code\u003e - the style for the new \n\u003ccode\u003eFont\u003c/code\u003e",
          "\u003ccode\u003esize\u003c/code\u003e - the size for the new \n\u003ccode\u003eFont\u003c/code\u003e"
        ],
        "return": [
          "a new \n\u003ccode\u003eFont\u003c/code\u003e object."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "style",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "name": "trans",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "deriveFont",
      "comment": "Creates a new Font object by replicating this Font object and applying a new style and transform.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estyle\u003c/code\u003e - the style for the new \n\u003ccode\u003eFont\u003c/code\u003e",
          "\u003ccode\u003etrans\u003c/code\u003e - the \n\u003ccode\u003eAffineTransform\u003c/code\u003e associated with the new \n\u003ccode\u003eFont\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etrans\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a new \n\u003ccode\u003eFont\u003c/code\u003e object."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "size",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "deriveFont",
      "comment": "Creates a new Font object by replicating the current Font object and applying a new size to it.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esize\u003c/code\u003e - the size for the new \n\u003ccode\u003eFont\u003c/code\u003e."
        ],
        "return": [
          "a new \n\u003ccode\u003eFont\u003c/code\u003e object."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "name": "trans",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "deriveFont",
      "comment": "Creates a new Font object by replicating the current Font object and applying a new transform to it.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etrans\u003c/code\u003e - the \n\u003ccode\u003eAffineTransform\u003c/code\u003e associated with the new \n\u003ccode\u003eFont\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etrans\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a new \n\u003ccode\u003eFont\u003c/code\u003e object."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "style",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "deriveFont",
      "comment": "Creates a new Font object by replicating the current Font object and applying a new style to it.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estyle\u003c/code\u003e - the style for the new \n\u003ccode\u003eFont\u003c/code\u003e"
        ],
        "return": [
          "a new \n\u003ccode\u003eFont\u003c/code\u003e object."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Font",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.text.AttributedCharacterIterator$Attribute",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "attributes",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "deriveFont",
      "comment": "Creates a new Font object by replicating the current Font object and applying a new set of font attributes to it.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eattributes\u003c/code\u003e - a map of attributes enabled for the new \n\u003ccode\u003eFont\u003c/code\u003e"
        ],
        "return": [
          "a new \n\u003ccode\u003eFont\u003c/code\u003e object."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canDisplay",
      "comment": "Checks if this Font has a glyph for the specified character. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the canDisplay(int) method or canDisplayUpTo methods.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the character for which a glyph is needed"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eFont\u003c/code\u003e has a glyph for this character; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canDisplay",
      "comment": "Checks if this Font has a glyph for the specified character.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isValidCodePoint(int)\"\u003e\u003ccode\u003eCharacter.isValidCodePoint(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) for which a glyph is needed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the code point is not a valid Unicode code point."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eFont\u003c/code\u003e has a glyph for the character; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canDisplayUpTo",
      "comment": "Indicates whether or not this Font can display a specified String. For strings with Unicode encoding, it is important to know if a particular font can display the string. This method returns an offset into the String str which is the first character this Font cannot display without using the missing glyph code. If the Font can display all characters, -1 is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e object"
        ],
        "return": [
          "an offset into \n\u003ccode\u003estr\u003c/code\u003e that points to the first character in \n\u003ccode\u003estr\u003c/code\u003e that this \n\u003ccode\u003eFont\u003c/code\u003e cannot display; or \n\u003ccode\u003e-1\u003c/code\u003e if this \n\u003ccode\u003eFont\u003c/code\u003e can display all characters in \n\u003ccode\u003estr\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canDisplayUpTo",
      "comment": "Indicates whether or not this Font can display the characters in the specified text starting at start and ending at limit. This method is a convenience overload.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the specified array of \n\u003ccode\u003echar\u003c/code\u003e values",
          "\u003ccode\u003estart\u003c/code\u003e - the specified starting offset (in \n\u003ccode\u003echar\u003c/code\u003es) into the specified array of \n\u003ccode\u003echar\u003c/code\u003e values",
          "\u003ccode\u003elimit\u003c/code\u003e - the specified ending offset (in \n\u003ccode\u003echar\u003c/code\u003es) into the specified array of \n\u003ccode\u003echar\u003c/code\u003e values"
        ],
        "return": [
          "an offset into \n\u003ccode\u003etext\u003c/code\u003e that points to the first character in \n\u003ccode\u003etext\u003c/code\u003e that this \n\u003ccode\u003eFont\u003c/code\u003e cannot display; or \n\u003ccode\u003e-1\u003c/code\u003e if this \n\u003ccode\u003eFont\u003c/code\u003e can display all characters in \n\u003ccode\u003etext\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.CharacterIterator",
            "type": "Class"
          },
          "name": "iter",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canDisplayUpTo",
      "comment": "Indicates whether or not this Font can display the text specified by the iter starting at start and ending at limit.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eiter\u003c/code\u003e - a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/CharacterIterator.html\" title\u003d\"interface in java.text\"\u003e\u003ccode\u003eCharacterIterator\u003c/code\u003e\u003c/a\u003e object",
          "\u003ccode\u003estart\u003c/code\u003e - the specified starting offset into the specified \n\u003ccode\u003eCharacterIterator\u003c/code\u003e.",
          "\u003ccode\u003elimit\u003c/code\u003e - the specified ending offset into the specified \n\u003ccode\u003eCharacterIterator\u003c/code\u003e."
        ],
        "return": [
          "an offset into \n\u003ccode\u003eiter\u003c/code\u003e that points to the first character in \n\u003ccode\u003eiter\u003c/code\u003e that this \n\u003ccode\u003eFont\u003c/code\u003e cannot display; or \n\u003ccode\u003e-1\u003c/code\u003e if this \n\u003ccode\u003eFont\u003c/code\u003e can display all characters in \n\u003ccode\u003eiter\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getItalicAngle",
      "comment": "Returns the italic angle of this Font. The italic angle is the inverse slope of the caret which best matches the posture of this Font.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html#POSTURE\"\u003e\u003ccode\u003eTextAttribute.POSTURE\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the angle of the ITALIC style of this \n\u003ccode\u003eFont\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasUniformLineMetrics",
      "comment": "Checks whether or not this Font has uniform line metrics. A logical Font might be a composite font, which means that it is composed of different physical fonts to cover different code ranges. Each of these fonts might have different LineMetrics. If the logical Font is a single font then the metrics would be uniform.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eFont\u003c/code\u003e has uniform line metrics; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.LineMetrics",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLineMetrics",
      "comment": "Returns a LineMetrics object created with the specified String and FontRenderContext.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the specified \n\u003ccode\u003eString\u003c/code\u003e",
          "\u003ccode\u003efrc\u003c/code\u003e - the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eLineMetrics\u003c/code\u003e object created with the specified \n\u003ccode\u003eString\u003c/code\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/FontRenderContext.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eFontRenderContext\u003c/code\u003e\u003c/a\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.LineMetrics",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLineMetrics",
      "comment": "Returns a LineMetrics object created with the specified arguments.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the specified \n\u003ccode\u003eString\u003c/code\u003e",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the initial offset of \n\u003ccode\u003estr\u003c/code\u003e",
          "\u003ccode\u003elimit\u003c/code\u003e - the end offset of \n\u003ccode\u003estr\u003c/code\u003e",
          "\u003ccode\u003efrc\u003c/code\u003e - the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eLineMetrics\u003c/code\u003e object created with the specified arguments."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.LineMetrics",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "chars",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLineMetrics",
      "comment": "Returns a LineMetrics object created with the specified arguments.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003echars\u003c/code\u003e - an array of characters",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the initial offset of \n\u003ccode\u003echars\u003c/code\u003e",
          "\u003ccode\u003elimit\u003c/code\u003e - the end offset of \n\u003ccode\u003echars\u003c/code\u003e",
          "\u003ccode\u003efrc\u003c/code\u003e - the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eLineMetrics\u003c/code\u003e object created with the specified arguments."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.LineMetrics",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.CharacterIterator",
            "type": "Class"
          },
          "name": "ci",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLineMetrics",
      "comment": "Returns a LineMetrics object created with the specified arguments.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eci\u003c/code\u003e - the specified \n\u003ccode\u003eCharacterIterator\u003c/code\u003e",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the initial offset in \n\u003ccode\u003eci\u003c/code\u003e",
          "\u003ccode\u003elimit\u003c/code\u003e - the end offset of \n\u003ccode\u003eci\u003c/code\u003e",
          "\u003ccode\u003efrc\u003c/code\u003e - the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eLineMetrics\u003c/code\u003e object created with the specified arguments."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStringBounds",
      "comment": "Returns the logical bounds of the specified String in the specified FontRenderContext. The logical bounds contains the origin, ascent, advance, and height, which includes the leading. The logical bounds does not always enclose all the text. For example, in some languages and in some fonts, accent marks can be positioned above the ascent or below the descent. To obtain a visual bounding box, which encloses all the text, use the getBounds method of TextLayout. Note: The returned bounds is in baseline-relative coordinates (see class notes).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/FontRenderContext.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eFontRenderContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)\"\u003e\u003ccode\u003ecreateGlyphVector(java.awt.font.FontRenderContext, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the specified \n\u003ccode\u003eString\u003c/code\u003e",
          "\u003ccode\u003efrc\u003c/code\u003e - the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/geom/Rectangle2D.html\" title\u003d\"class in java.awt.geom\"\u003e\u003ccode\u003eRectangle2D\u003c/code\u003e\u003c/a\u003e that is the bounding box of the specified \n\u003ccode\u003eString\u003c/code\u003e in the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStringBounds",
      "comment": "Returns the logical bounds of the specified String in the specified FontRenderContext. The logical bounds contains the origin, ascent, advance, and height, which includes the leading. The logical bounds does not always enclose all the text. For example, in some languages and in some fonts, accent marks can be positioned above the ascent or below the descent. To obtain a visual bounding box, which encloses all the text, use the getBounds method of TextLayout. Note: The returned bounds is in baseline-relative coordinates (see class notes).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/FontRenderContext.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eFontRenderContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)\"\u003e\u003ccode\u003ecreateGlyphVector(java.awt.font.FontRenderContext, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the specified \n\u003ccode\u003eString\u003c/code\u003e",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the initial offset of \n\u003ccode\u003estr\u003c/code\u003e",
          "\u003ccode\u003elimit\u003c/code\u003e - the end offset of \n\u003ccode\u003estr\u003c/code\u003e",
          "\u003ccode\u003efrc\u003c/code\u003e - the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebeginIndex\u003c/code\u003e is less than zero, or \n\u003ccode\u003elimit\u003c/code\u003e is greater than the length of \n\u003ccode\u003estr\u003c/code\u003e, or \n\u003ccode\u003ebeginIndex\u003c/code\u003e is greater than \n\u003ccode\u003elimit\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eRectangle2D\u003c/code\u003e that is the bounding box of the specified \n\u003ccode\u003eString\u003c/code\u003e in the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "chars",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStringBounds",
      "comment": "Returns the logical bounds of the specified array of characters in the specified FontRenderContext. The logical bounds contains the origin, ascent, advance, and height, which includes the leading. The logical bounds does not always enclose all the text. For example, in some languages and in some fonts, accent marks can be positioned above the ascent or below the descent. To obtain a visual bounding box, which encloses all the text, use the getBounds method of TextLayout. Note: The returned bounds is in baseline-relative coordinates (see class notes).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/FontRenderContext.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eFontRenderContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)\"\u003e\u003ccode\u003ecreateGlyphVector(java.awt.font.FontRenderContext, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003echars\u003c/code\u003e - an array of characters",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the initial offset in the array of characters",
          "\u003ccode\u003elimit\u003c/code\u003e - the end offset in the array of characters",
          "\u003ccode\u003efrc\u003c/code\u003e - the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebeginIndex\u003c/code\u003e is less than zero, or \n\u003ccode\u003elimit\u003c/code\u003e is greater than the length of \n\u003ccode\u003echars\u003c/code\u003e, or \n\u003ccode\u003ebeginIndex\u003c/code\u003e is greater than \n\u003ccode\u003elimit\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eRectangle2D\u003c/code\u003e that is the bounding box of the specified array of characters in the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.text.CharacterIterator",
            "type": "Class"
          },
          "name": "ci",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStringBounds",
      "comment": "Returns the logical bounds of the characters indexed in the specified CharacterIterator in the specified FontRenderContext. The logical bounds contains the origin, ascent, advance, and height, which includes the leading. The logical bounds does not always enclose all the text. For example, in some languages and in some fonts, accent marks can be positioned above the ascent or below the descent. To obtain a visual bounding box, which encloses all the text, use the getBounds method of TextLayout. Note: The returned bounds is in baseline-relative coordinates (see class notes).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/FontRenderContext.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eFontRenderContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)\"\u003e\u003ccode\u003ecreateGlyphVector(java.awt.font.FontRenderContext, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eci\u003c/code\u003e - the specified \n\u003ccode\u003eCharacterIterator\u003c/code\u003e",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the initial offset in \n\u003ccode\u003eci\u003c/code\u003e",
          "\u003ccode\u003elimit\u003c/code\u003e - the end offset in \n\u003ccode\u003eci\u003c/code\u003e",
          "\u003ccode\u003efrc\u003c/code\u003e - the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebeginIndex\u003c/code\u003e is less than the start index of \n\u003ccode\u003eci\u003c/code\u003e, or \n\u003ccode\u003elimit\u003c/code\u003e is greater than the end index of \n\u003ccode\u003eci\u003c/code\u003e, or \n\u003ccode\u003ebeginIndex\u003c/code\u003e is greater than \n\u003ccode\u003elimit\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eRectangle2D\u003c/code\u003e that is the bounding box of the characters indexed in the specified \n\u003ccode\u003eCharacterIterator\u003c/code\u003e in the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxCharBounds",
      "comment": "Returns the bounds for the character with the maximum bounds as defined in the specified FontRenderContext. Note: The returned bounds is in baseline-relative coordinates (see class notes).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efrc\u003c/code\u003e - the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eRectangle2D\u003c/code\u003e that is the bounding box for the character with the maximum bounds."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.GlyphVector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createGlyphVector",
      "comment": "Creates a GlyphVector by mapping characters to glyphs one-to-one based on the Unicode cmap in this Font. This method does no other processing besides the mapping of glyphs to characters. This means that this method is not useful for some scripts, such as Arabic, Hebrew, Thai, and Indic, that require reordering, shaping, or ligature substitution.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efrc\u003c/code\u003e - the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e",
          "\u003ccode\u003estr\u003c/code\u003e - the specified \n\u003ccode\u003eString\u003c/code\u003e"
        ],
        "return": [
          "a new \n\u003ccode\u003eGlyphVector\u003c/code\u003e created with the specified \n\u003ccode\u003eString\u003c/code\u003e and the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.GlyphVector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "chars",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createGlyphVector",
      "comment": "Creates a GlyphVector by mapping characters to glyphs one-to-one based on the Unicode cmap in this Font. This method does no other processing besides the mapping of glyphs to characters. This means that this method is not useful for some scripts, such as Arabic, Hebrew, Thai, and Indic, that require reordering, shaping, or ligature substitution.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efrc\u003c/code\u003e - the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e",
          "\u003ccode\u003echars\u003c/code\u003e - the specified array of characters"
        ],
        "return": [
          "a new \n\u003ccode\u003eGlyphVector\u003c/code\u003e created with the specified array of characters and the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.GlyphVector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.text.CharacterIterator",
            "type": "Class"
          },
          "name": "ci",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createGlyphVector",
      "comment": "Creates a GlyphVector by mapping the specified characters to glyphs one-to-one based on the Unicode cmap in this Font. This method does no other processing besides the mapping of glyphs to characters. This means that this method is not useful for some scripts, such as Arabic, Hebrew, Thai, and Indic, that require reordering, shaping, or ligature substitution.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efrc\u003c/code\u003e - the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e",
          "\u003ccode\u003eci\u003c/code\u003e - the specified \n\u003ccode\u003eCharacterIterator\u003c/code\u003e"
        ],
        "return": [
          "a new \n\u003ccode\u003eGlyphVector\u003c/code\u003e created with the specified \n\u003ccode\u003eCharacterIterator\u003c/code\u003e and the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.GlyphVector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "glyphCodes",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createGlyphVector",
      "comment": "Creates a GlyphVector by mapping characters to glyphs one-to-one based on the Unicode cmap in this Font. This method does no other processing besides the mapping of glyphs to characters. This means that this method is not useful for some scripts, such as Arabic, Hebrew, Thai, and Indic, that require reordering, shaping, or ligature substitution.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efrc\u003c/code\u003e - the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e",
          "\u003ccode\u003eglyphCodes\u003c/code\u003e - the specified integer array"
        ],
        "return": [
          "a new \n\u003ccode\u003eGlyphVector\u003c/code\u003e created with the specified integer array and the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.font.GlyphVector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.font.FontRenderContext",
            "type": "Class"
          },
          "name": "frc",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "flags",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "layoutGlyphVector",
      "comment": "Returns a new GlyphVector object, performing full layout of the text if possible. Full layout is required for complex text, such as Arabic or Hindi. Support for different scripts depends on the font and implementation. Layout requires bidi analysis, as performed by Bidi, and should only be performed on text that has a uniform direction. The direction is indicated in the flags parameter,by using LAYOUT_RIGHT_TO_LEFT to indicate a right-to-left (Arabic and Hebrew) run direction, or LAYOUT_LEFT_TO_RIGHT to indicate a left-to-right (English) run direction. In addition, some operations, such as Arabic shaping, require context, so that the characters at the start and limit can have the proper shapes. Sometimes the data in the buffer outside the provided range does not have valid data. The values LAYOUT_NO_START_CONTEXT and LAYOUT_NO_LIMIT_CONTEXT can be added to the flags parameter to indicate that the text before start, or after limit, respectively, should not be examined for context. All other values for the flags parameter are reserved.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Bidi.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eBidi\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#LAYOUT_LEFT_TO_RIGHT\"\u003e\u003ccode\u003eLAYOUT_LEFT_TO_RIGHT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#LAYOUT_RIGHT_TO_LEFT\"\u003e\u003ccode\u003eLAYOUT_RIGHT_TO_LEFT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#LAYOUT_NO_START_CONTEXT\"\u003e\u003ccode\u003eLAYOUT_NO_START_CONTEXT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Font.html#LAYOUT_NO_LIMIT_CONTEXT\"\u003e\u003ccode\u003eLAYOUT_NO_LIMIT_CONTEXT\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efrc\u003c/code\u003e - the specified \n\u003ccode\u003eFontRenderContext\u003c/code\u003e",
          "\u003ccode\u003etext\u003c/code\u003e - the text to layout",
          "\u003ccode\u003estart\u003c/code\u003e - the start of the text to use for the \n\u003ccode\u003eGlyphVector\u003c/code\u003e",
          "\u003ccode\u003elimit\u003c/code\u003e - the limit of the text to use for the \n\u003ccode\u003eGlyphVector\u003c/code\u003e",
          "\u003ccode\u003eflags\u003c/code\u003e - control flags as described above"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if start or limit is out of bounds"
        ],
        "return": [
          "a new \n\u003ccode\u003eGlyphVector\u003c/code\u003e representing the text between start and limit, with glyphs chosen and positioned so as to best represent the text"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "style",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "size",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new Font from the specified name, style and point size. The font name can be a font face name or a font family name. It is used together with the style to find an appropriate font face. When a font family name is specified, the style argument is used to select the most appropriate face from the family. When a font face name is specified, the face\u0027s style and the style argument are merged to locate the best matching font from the same family. For example if face name \"Arial Bold\" is specified with style Font.ITALIC, the font system looks for a face in the \"Arial\" family that is bold and italic, and may associate the font instance with the physical font face \"Arial Bold Italic\". The style argument is merged with the specified face\u0027s style, not added or subtracted. This means, specifying a bold face and a bold style does not double-embolden the font, and specifying a bold face and a plain style does not lighten the font. If no face for the requested style can be found, the font system may apply algorithmic styling to achieve the desired style. For example, if ITALIC is requested, but no italic face is available, glyphs from the plain face may be algorithmically obliqued (slanted). Font name lookup is case insensitive, using the case folding rules of the US locale. If the name parameter represents something other than a logical font, i.e. is interpreted as a physical font face or family, and this cannot be mapped by the implementation to a physical font or a compatible alternative, then the font system will map the Font instance to \"Dialog\", such that for example, the family as reported by getFamily will be \"Dialog\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#getAllFonts()\"\u003e\u003ccode\u003eGraphicsEnvironment.getAllFonts()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsEnvironment.html#getAvailableFontFamilyNames()\"\u003e\u003ccode\u003eGraphicsEnvironment.getAvailableFontFamilyNames()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the font name. This can be a font face name or a font family name, and may represent either a logical font or a physical font found in this \n\u003ccode\u003eGraphicsEnvironment\u003c/code\u003e. The family names for logical fonts are: Dialog, DialogInput, Monospaced, Serif, or SansSerif. Pre-defined String constants exist for all of these names, for example, \n\u003ccode\u003eDIALOG\u003c/code\u003e. If \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, the \n\u003cem\u003elogical font name\u003c/em\u003e of the new \n\u003ccode\u003eFont\u003c/code\u003e as returned by \n\u003ccode\u003egetName()\u003c/code\u003e is set to the name \"Default\".",
          "\u003ccode\u003estyle\u003c/code\u003e - the style constant for the \n\u003ccode\u003eFont\u003c/code\u003e The style argument is an integer bitmask that may be \n\u003ccode\u003ePLAIN\u003c/code\u003e, or a bitwise union of \n\u003ccode\u003eBOLD\u003c/code\u003e and/or \n\u003ccode\u003eITALIC\u003c/code\u003e (for example, \n\u003ccode\u003eITALIC\u003c/code\u003e or \n\u003ccode\u003eBOLD|ITALIC\u003c/code\u003e). If the style argument does not conform to one of the expected integer bitmasks then the style is set to \n\u003ccode\u003ePLAIN\u003c/code\u003e.",
          "\u003ccode\u003esize\u003c/code\u003e - the point size of the \n\u003ccode\u003eFont\u003c/code\u003e"
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.text.AttributedCharacterIterator$Attribute",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "attributes",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new Font with the specified attributes. Only keys defined in TextAttribute are recognized. In addition the FONT attribute is not recognized by this constructor (see getAvailableAttributes()). Only attributes that have values of valid types will affect the new Font. If attributes is null, a new Font is initialized with default values.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/font/TextAttribute.html\" title\u003d\"class in java.awt.font\"\u003e\u003ccode\u003eTextAttribute\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eattributes\u003c/code\u003e - the attributes to assign to the new \n\u003ccode\u003eFont\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.Font",
            "type": "Class"
          },
          "name": "font",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a new Font from the specified font. This constructor is intended for use by subclasses.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efont\u003c/code\u003e - from which to create this \n\u003ccode\u003eFont\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efont\u003c/code\u003e is null"
        ],
        "since": [
          "1.6"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.Font",
  "comment": "The \n\u003ccode\u003eFont\u003c/code\u003e class represents fonts, which are used to render text in a visible way. A font provides the information needed to map sequences of \n\u003cem\u003echaracters\u003c/em\u003e to sequences of \n\u003cem\u003eglyphs\u003c/em\u003e and to render sequences of glyphs on \n\u003ccode\u003eGraphics\u003c/code\u003e and \n\u003ccode\u003eComponent\u003c/code\u003e objects. \n\u003ch2\u003eCharacters and Glyphs\u003c/h2\u003e A \n\u003cem\u003echaracter\u003c/em\u003e is a symbol that represents an item such as a letter, a digit, or punctuation in an abstract way. For example, \n\u003ccode\u003e\u0027g\u0027\u003c/code\u003e, LATIN SMALL LETTER G, is a character. \n\u003cp\u003e A \u003cem\u003eglyph\u003c/em\u003e is a shape used to render a character or a sequence of characters. In simple writing systems, such as Latin, typically one glyph represents one character. In general, however, characters and glyphs do not have one-to-one correspondence. For example, the character \u0027á\u0027 LATIN SMALL LETTER A WITH ACUTE, can be represented by two glyphs: one for \u0027a\u0027 and one for \u0027´\u0027. On the other hand, the two-character string \"fi\" can be represented by a single glyph, an \"fi\" ligature. In complex writing systems, such as Arabic or the South and South-East Asian writing systems, the relationship between characters and glyphs can be more complicated and involve context-dependent selection of glyphs as well as glyph reordering. A font encapsulates the collection of glyphs needed to render a selected set of characters as well as the tables needed to map sequences of characters to corresponding sequences of glyphs. \u003c/p\u003e\n\u003ch2\u003ePhysical and Logical Fonts\u003c/h2\u003e The Java Platform distinguishes between two kinds of fonts: \n\u003cem\u003ephysical\u003c/em\u003e fonts and \n\u003cem\u003elogical\u003c/em\u003e fonts. \n\u003cp\u003e \u003cem\u003ePhysical\u003c/em\u003e fonts are the actual font libraries containing glyph data and tables to map from character sequences to glyph sequences, using a font technology such as TrueType or PostScript Type 1. All implementations of the Java Platform must support TrueType fonts; support for other font technologies is implementation dependent. Physical fonts may use names such as Helvetica, Palatino, HonMincho, or any number of other font names. Typically, each physical font supports only a limited set of writing systems, for example, only Latin characters or only Japanese and Basic Latin. The set of available physical fonts varies between configurations. Applications that require specific fonts can bundle them and instantiate them using the \u003ca href\u003d\"#createFont(int,java.io.InputStream)\"\u003e\u003ccode\u003ecreateFont\u003c/code\u003e\u003c/a\u003e method. \u003c/p\u003e\n\u003cp\u003e \u003cem\u003eLogical\u003c/em\u003e fonts are the five font families defined by the Java platform which must be supported by any Java runtime environment: Serif, SansSerif, Monospaced, Dialog, and DialogInput. These logical fonts are not actual font libraries. Instead, the logical font names are mapped to physical fonts by the Java runtime environment. The mapping is implementation and usually locale dependent, so the look and the metrics provided by them vary. Typically, each logical font name maps to several physical fonts in order to cover a large range of characters. \u003c/p\u003e\n\u003cp\u003e Peered AWT components, such as \u003ca href\u003d\"Label.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eLabel\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"TextField.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eTextField\u003c/code\u003e\u003c/a\u003e, can only use logical fonts. \u003c/p\u003e\n\u003cp\u003e For a discussion of the relative advantages and disadvantages of using physical or logical fonts, see the \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/2d/text/fonts.html#advantages-and-disadvantages\"\u003e Physical and Logical Fonts\u003c/a\u003e in \u003ca href\u003d\"https://docs.oracle.com/javase/tutorial/index.html\"\u003eThe Java Tutorials\u003c/a\u003e document. \u003c/p\u003e\n\u003ch2\u003eFont Faces and Names\u003c/h2\u003e A \n\u003ccode\u003eFont\u003c/code\u003e can have many faces, such as heavy, medium, oblique, gothic and regular. All of these faces have similar typographic design. \n\u003cp\u003e There are three different names that you can get from a \u003ccode\u003eFont\u003c/code\u003e object. The \u003cem\u003elogical font name\u003c/em\u003e is simply the name that was used to construct the font. The \u003cem\u003efont face name\u003c/em\u003e, or just \u003cem\u003efont name\u003c/em\u003e for short, is the name of a particular font face, like Helvetica Bold. The \u003cem\u003efamily name\u003c/em\u003e is the name of the font family that determines the typographic design across several faces, like Helvetica. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eFont\u003c/code\u003e class represents an instance of a font face from a collection of font faces that are present in the system resources of the host system. As examples, Arial Bold and Courier Bold Italic are font faces. There can be several \u003ccode\u003eFont\u003c/code\u003e objects associated with a font face, each differing in size, style, transform and font features. \u003c/p\u003e\n\u003cp\u003e Glyphs may not always be rendered with the requested properties (e.g, font and style) due to platform limitations such as the absence of suitable platform fonts to implement a logical font. \u003c/p\u003e\n\u003cp\u003e The \u003ca href\u003d\"GraphicsEnvironment.html#getAllFonts()\"\u003e\u003ccode\u003egetAllFonts\u003c/code\u003e\u003c/a\u003e method of the \u003ccode\u003eGraphicsEnvironment\u003c/code\u003e class returns an array of all font faces available in the system. These font faces are returned as \u003ccode\u003eFont\u003c/code\u003e objects with a size of 1, identity transform and default font features. These base fonts can then be used to derive new \u003ccode\u003eFont\u003c/code\u003e objects with varying sizes, styles, transforms and font features via the \u003ccode\u003ederiveFont\u003c/code\u003e methods in this class. \u003c/p\u003e\n\u003ch2\u003eFont and TextAttribute\u003c/h2\u003e \n\u003cp\u003e\u003ccode\u003eFont\u003c/code\u003e supports most \u003ccode\u003eTextAttribute\u003c/code\u003es. This makes some operations, such as rendering underlined text, convenient since it is not necessary to explicitly construct a \u003ccode\u003eTextLayout\u003c/code\u003e object. Attributes can be set on a Font by constructing or deriving it using a \u003ccode\u003eMap\u003c/code\u003e of \u003ccode\u003eTextAttribute\u003c/code\u003e values. \u003c/p\u003e\n\u003cp\u003eThe values of some \u003ccode\u003eTextAttributes\u003c/code\u003e are not serializable, and therefore attempting to serialize an instance of \u003ccode\u003eFont\u003c/code\u003e that has such values will not serialize them. This means a Font deserialized from such a stream will not compare equal to the original Font that contained the non-serializable attributes. This should very rarely pose a problem since these attributes are typically used only in special circumstances and are unlikely to be serialized. \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eFOREGROUND\u003c/code\u003e and \u003ccode\u003eBACKGROUND\u003c/code\u003e use \u003ccode\u003ePaint\u003c/code\u003e values. The subclass \u003ccode\u003eColor\u003c/code\u003e is serializable, while \u003ccode\u003eGradientPaint\u003c/code\u003e and \u003ccode\u003eTexturePaint\u003c/code\u003e are not.\u003c/li\u003e \n \u003cli\u003e\u003ccode\u003eCHAR_REPLACEMENT\u003c/code\u003e uses \u003ccode\u003eGraphicAttribute\u003c/code\u003e values. The subclasses \u003ccode\u003eShapeGraphicAttribute\u003c/code\u003e and \u003ccode\u003eImageGraphicAttribute\u003c/code\u003e are not serializable.\u003c/li\u003e \n \u003cli\u003e\u003ccode\u003eINPUT_METHOD_HIGHLIGHT\u003c/code\u003e uses \u003ccode\u003eInputMethodHighlight\u003c/code\u003e values, which are not serializable. See \u003ca href\u003d\"im/InputMethodHighlight.html\" title\u003d\"class in java.awt.im\"\u003e\u003ccode\u003eInputMethodHighlight\u003c/code\u003e\u003c/a\u003e.\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eClients who create custom subclasses of \u003ccode\u003ePaint\u003c/code\u003e and \u003ccode\u003eGraphicAttribute\u003c/code\u003e can make them serializable and avoid this problem. Clients who use input method highlights can convert these to the platform-specific attributes for that highlight on the current platform and set them on the Font as a workaround. \u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eMap\u003c/code\u003e-based constructor and \u003ccode\u003ederiveFont\u003c/code\u003e APIs ignore the FONT attribute, and it is not retained by the Font; the static \u003ca href\u003d\"#getFont(java.util.Map)\"\u003e\u003ccode\u003egetFont(java.util.Map\u0026lt;? extends java.text.AttributedCharacterIterator.Attribute, ?\u0026gt;)\u003c/code\u003e\u003c/a\u003e method should be used if the FONT attribute might be present. See \u003ca href\u003d\"font/TextAttribute.html#FONT\"\u003e\u003ccode\u003eTextAttribute.FONT\u003c/code\u003e\u003c/a\u003e for more information.\u003c/p\u003e \n\u003cp\u003eSeveral attributes will cause additional rendering overhead and potentially invoke layout. If a \u003ccode\u003eFont\u003c/code\u003e has such attributes, the \u003ccode\u003e\u003ca href\u003d\"#hasLayoutAttributes()\"\u003e\u003ccode\u003ehasLayoutAttributes()\u003c/code\u003e\u003c/a\u003e\u003c/code\u003e method will return true.\u003c/p\u003e \n\u003cp\u003eNote: Font rotations can cause text baselines to be rotated. In order to account for this (rare) possibility, font APIs are specified to return metrics and take parameters \u0027in baseline-relative coordinates\u0027. This maps the \u0027x\u0027 coordinate to the advance along the baseline, (positive x is forward along the baseline), and the \u0027y\u0027 coordinate to a distance along the perpendicular to the baseline at \u0027x\u0027 (positive y is 90 degrees clockwise from the baseline vector). APIs for which this is especially important are called out as having \u0027baseline-relative coordinates.\u0027\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.awt.Font\"\u003eSerialized Form\u003c/a\u003e"
    ]
  }
}