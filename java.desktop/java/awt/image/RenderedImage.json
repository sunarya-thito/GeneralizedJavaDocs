{
  "packageName": "java.awt.image",
  "simpleName": "RenderedImage",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Vector",
        "parameters": [
          {
            "name": "java.awt.image.RenderedImage",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSources",
      "comment": "Returns a vector of RenderedImages that are the immediate sources of image data for this RenderedImage. This method returns null if the RenderedImage object has no information about its immediate sources. It returns an empty Vector if the RenderedImage object has no immediate sources.",
      "tagMap": {
        "return": [
          "a Vector of \n\u003ccode\u003eRenderedImage\u003c/code\u003e objects."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getProperty",
      "comment": "Gets a property from the property set of this image. The set of properties and whether it is immutable is determined by the implementing class. This method returns java.awt.Image.UndefinedProperty if the specified property is not defined for this RenderedImage.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Image.html#UndefinedProperty\"\u003e\u003ccode\u003eImage.UndefinedProperty\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the property"
        ],
        "return": [
          "the property indicated by the specified name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPropertyNames",
      "comment": "Returns an array of names recognized by getProperty(String) or null, if no property names are recognized.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e array containing all of the property names that \n\u003ccode\u003egetProperty(String)\u003c/code\u003e recognizes; or \n\u003ccode\u003enull\u003c/code\u003e if no property names are recognized."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.ColorModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getColorModel",
      "comment": "Returns the ColorModel associated with this image. All Rasters returned from this image will have this as their ColorModel. This can return null.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eColorModel\u003c/code\u003e of this image."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.SampleModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSampleModel",
      "comment": "Returns the SampleModel associated with this image. All Rasters returned from this image will have this as their SampleModel.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eSampleModel\u003c/code\u003e of this image."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWidth",
      "comment": "Returns the width of the RenderedImage.",
      "tagMap": {
        "return": [
          "the width of this \n\u003ccode\u003eRenderedImage\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHeight",
      "comment": "Returns the height of the RenderedImage.",
      "tagMap": {
        "return": [
          "the height of this \n\u003ccode\u003eRenderedImage\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMinX",
      "comment": "Returns the minimum X coordinate (inclusive) of the RenderedImage.",
      "tagMap": {
        "return": [
          "the X coordinate of this \n\u003ccode\u003eRenderedImage\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMinY",
      "comment": "Returns the minimum Y coordinate (inclusive) of the RenderedImage.",
      "tagMap": {
        "return": [
          "the Y coordinate of this \n\u003ccode\u003eRenderedImage\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNumXTiles",
      "comment": "Returns the number of tiles in the X direction.",
      "tagMap": {
        "return": [
          "the number of tiles in the X direction."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNumYTiles",
      "comment": "Returns the number of tiles in the Y direction.",
      "tagMap": {
        "return": [
          "the number of tiles in the Y direction."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMinTileX",
      "comment": "Returns the minimum tile index in the X direction.",
      "tagMap": {
        "return": [
          "the minimum tile index in the X direction."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMinTileY",
      "comment": "Returns the minimum tile index in the Y direction.",
      "tagMap": {
        "return": [
          "the minimum tile index in the X direction."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTileWidth",
      "comment": "Returns the tile width in pixels. All tiles must have the same width.",
      "tagMap": {
        "return": [
          "the tile width in pixels."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTileHeight",
      "comment": "Returns the tile height in pixels. All tiles must have the same height.",
      "tagMap": {
        "return": [
          "the tile height in pixels."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTileGridXOffset",
      "comment": "Returns the X offset of the tile grid relative to the origin, i.e., the X coordinate of the upper-left pixel of tile (0, 0). (Note that tile (0, 0) may not actually exist.)",
      "tagMap": {
        "return": [
          "the X offset of the tile grid relative to the origin."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTileGridYOffset",
      "comment": "Returns the Y offset of the tile grid relative to the origin, i.e., the Y coordinate of the upper-left pixel of tile (0, 0). (Note that tile (0, 0) may not actually exist.)",
      "tagMap": {
        "return": [
          "the Y offset of the tile grid relative to the origin."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.Raster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "tileX"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "tileY"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTile",
      "comment": "Returns tile (tileX, tileY). Note that tileX and tileY are indices into the tile array, not pixel locations. The Raster that is returned is live and will be updated if the image is changed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etileX\u003c/code\u003e - the X index of the requested tile in the tile array",
          "\u003ccode\u003etileY\u003c/code\u003e - the Y index of the requested tile in the tile array"
        ],
        "return": [
          "the tile given the specified indices."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.Raster",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getData",
      "comment": "Returns the image as one large tile (for tile based images this will require fetching the whole image and copying the image data over). The Raster returned is a copy of the image data and will not be updated if the image is changed.",
      "tagMap": {
        "return": [
          "the image as one large tile."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.Raster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "rect"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getData",
      "comment": "Computes and returns an arbitrary region of the RenderedImage. The Raster returned is a copy of the image data and will not be updated if the image is changed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erect\u003c/code\u003e - the region of the RenderedImage to be returned."
        ],
        "return": [
          "the region of the \n\u003ccode\u003eRenderedImage\u003c/code\u003e indicated by the specified \n\u003ccode\u003eRectangle\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.WritableRaster",
            "type": "Class"
          },
          "field": {
            "name": "raster"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "copyData",
      "comment": "Computes an arbitrary rectangular region of the RenderedImage and copies it into a caller-supplied WritableRaster. The region to be computed is determined from the bounds of the supplied WritableRaster. The supplied WritableRaster must have a SampleModel that is compatible with this image. If raster is null, an appropriate WritableRaster is created.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eraster\u003c/code\u003e - a WritableRaster to hold the returned portion of the image, or null."
        ],
        "return": [
          "a reference to the supplied or created WritableRaster."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.awt.image.RenderedImage",
  "comment": "RenderedImage is a common interface for objects which contain or can produce image data in the form of Rasters. The image data may be stored/produced as a single tile or a regular array of tiles.",
  "tagMap": {}
}