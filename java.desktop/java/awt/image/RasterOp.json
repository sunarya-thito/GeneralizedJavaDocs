{
  "packageName": "java.awt.image",
  "simpleName": "RasterOp",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.Raster",
            "type": "Class"
          },
          "field": {
            "name": "src"
          }
        },
        {
          "type": {
            "name": "java.awt.image.WritableRaster",
            "type": "Class"
          },
          "field": {
            "name": "dest"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "filter",
      "comment": "Performs a single-input/single-output operation from a source Raster to a destination Raster. If the destination Raster is null, a new Raster will be created. The IllegalArgumentException may be thrown if the source and/or destination Raster is incompatible with the types of Rasters allowed by the class implementing this filter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - the source \n\u003ccode\u003eRaster\u003c/code\u003e",
          "\u003ccode\u003edest\u003c/code\u003e - the destination \n\u003ccode\u003eWritableRaster\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eWritableRaster\u003c/code\u003e that represents the result of the filtering operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.Raster",
            "type": "Class"
          },
          "field": {
            "name": "src"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBounds2D",
      "comment": "Returns the bounding box of the filtered destination Raster. The IllegalArgumentException may be thrown if the source Raster is incompatible with the types of Rasters allowed by the class implementing this filter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - the source \n\u003ccode\u003eRaster\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eRectangle2D\u003c/code\u003e that is the bounding box of the \n\u003ccode\u003eRaster\u003c/code\u003e resulting from the filtering operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.Raster",
            "type": "Class"
          },
          "field": {
            "name": "src"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createCompatibleDestRaster",
      "comment": "Creates a zeroed destination Raster with the correct size and number of bands. The IllegalArgumentException may be thrown if the source Raster is incompatible with the types of Rasters allowed by the class implementing this filter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - the source \n\u003ccode\u003eRaster\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eWritableRaster\u003c/code\u003e that is compatible with \n\u003ccode\u003esrc\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Point2D",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "field": {
            "name": "srcPt"
          }
        },
        {
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "field": {
            "name": "dstPt"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPoint2D",
      "comment": "Returns the location of the destination point given a point in the source Raster. If dstPt is non-null, it will be used to hold the return value.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrcPt\u003c/code\u003e - the source \n\u003ccode\u003ePoint2D\u003c/code\u003e",
          "\u003ccode\u003edstPt\u003c/code\u003e - the destination \n\u003ccode\u003ePoint2D\u003c/code\u003e"
        ],
        "return": [
          "the location of the destination point."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.RenderingHints",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRenderingHints",
      "comment": "Returns the rendering hints for this RasterOp. Returns null if no hints have been set.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eRenderingHints\u003c/code\u003e object of this \n\u003ccode\u003eRasterOp\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.awt.image.RasterOp",
  "comment": "This interface describes single-input/single-output operations performed on Raster objects. It is implemented by such classes as AffineTransformOp, ConvolveOp, and LookupOp. The Source and Destination objects must contain the appropriate number of bands for the particular classes implementing this interface. Otherwise, an exception is thrown. This interface cannot be used to describe more sophisticated Ops such as ones that take multiple sources. Each class implementing this interface will specify whether or not it will allow an in-place filtering operation (i.e. source object equal to the destination object). Note that the restriction to single-input operations means that the values of destination pixels prior to the operation are not used as input to the filter operation.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/AffineTransformOp.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eAffineTransformOp\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BandCombineOp.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eBandCombineOp\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorConvertOp.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eColorConvertOp\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ConvolveOp.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eConvolveOp\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/LookupOp.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eLookupOp\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RescaleOp.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eRescaleOp\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}