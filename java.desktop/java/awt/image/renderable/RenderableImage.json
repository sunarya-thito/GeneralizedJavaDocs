{
  "packageName": "java.awt.image.renderable",
  "simpleName": "RenderableImage",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "HINTS_OBSERVED",
      "comment": "String constant that can be used to identify a property on a RenderedImage obtained via the createRendering or createScaledRendering methods. If such a property exists, the value of the property will be a RenderingHints object specifying which hints were observed in creating the rendering.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.image.renderable.RenderableImage.HINTS_OBSERVED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Vector",
        "parameters": [
          {
            "name": "java.awt.image.renderable.RenderableImage",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSources",
      "comment": "Returns a vector of RenderableImages that are the sources of image data for this RenderableImage. Note that this method may return an empty vector, to indicate that the image has no sources, or null, to indicate that no information is available.",
      "tagMap": {
        "return": [
          "a (possibly empty) Vector of RenderableImages, or null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getProperty",
      "comment": "Gets a property from the property set of this image. If the property name is not recognized, java.awt.Image.UndefinedProperty will be returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the property to get, as a String."
        ],
        "return": [
          "a reference to the property Object, or the value java.awt.Image.UndefinedProperty."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPropertyNames",
      "comment": "Returns a list of names recognized by getProperty.",
      "tagMap": {
        "return": [
          "a list of property names."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isDynamic",
      "comment": "Returns true if successive renderings (that is, calls to createRendering() or createScaledRendering()) with the same arguments may produce different results. This method may be used to determine whether an existing rendering may be cached and reused. It is always safe to return true.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successive renderings with the same arguments might produce different results; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWidth",
      "comment": "Gets the width in user coordinate space. By convention, the usual width of a RenderableImage is equal to the image\u0027s aspect ratio (width divided by height).",
      "tagMap": {
        "return": [
          "the width of the image in user coordinates."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHeight",
      "comment": "Gets the height in user coordinate space. By convention, the usual height of a RenderedImage is equal to 1.0F.",
      "tagMap": {
        "return": [
          "the height of the image in user coordinates."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMinX",
      "comment": "Gets the minimum X coordinate of the rendering-independent image data.",
      "tagMap": {
        "return": [
          "the minimum X coordinate of the rendering-independent image data."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMinY",
      "comment": "Gets the minimum Y coordinate of the rendering-independent image data.",
      "tagMap": {
        "return": [
          "the minimum Y coordinate of the rendering-independent image data."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.RenderedImage",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "java.awt.RenderingHints",
            "type": "Class"
          },
          "field": {
            "name": "hints"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createScaledRendering",
      "comment": "Creates a RenderedImage instance of this image with width w, and height h in pixels. The RenderContext is built automatically with an appropriate usr2dev transform and an area of interest of the full image. All the rendering hints come from hints passed in. If w \u003d\u003d 0, it will be taken to equal Math.round(h*(getWidth()/getHeight())). Similarly, if h \u003d\u003d 0, it will be taken to equal Math.round(w*(getHeight()/getWidth())). One of w or h must be non-zero or else an IllegalArgumentException will be thrown. The created RenderedImage may have a property identified by the String HINTS_OBSERVED to indicate which RenderingHints were used to create the image. In addition any RenderedImages that are obtained via the getSources() method on the created RenderedImage may have such a property.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ew\u003c/code\u003e - the width of rendered image in pixels, or 0.",
          "\u003ccode\u003eh\u003c/code\u003e - the height of rendered image in pixels, or 0.",
          "\u003ccode\u003ehints\u003c/code\u003e - a RenderingHints object containing hints."
        ],
        "return": [
          "a RenderedImage containing the rendered data."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.RenderedImage",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createDefaultRendering",
      "comment": "Returns a RenderedImage instance of this image with a default width and height in pixels. The RenderContext is built automatically with an appropriate usr2dev transform and an area of interest of the full image. The rendering hints are empty. createDefaultRendering may make use of a stored rendering for speed.",
      "tagMap": {
        "return": [
          "a RenderedImage containing the rendered data."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.RenderedImage",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.renderable.RenderContext",
            "type": "Class"
          },
          "field": {
            "name": "renderContext"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createRendering",
      "comment": "Creates a RenderedImage that represented a rendering of this image using a given RenderContext. This is the most general way to obtain a rendering of a RenderableImage. The created RenderedImage may have a property identified by the String HINTS_OBSERVED to indicate which RenderingHints (from the RenderContext) were used to create the image. In addition any RenderedImages that are obtained via the getSources() method on the created RenderedImage may have such a property.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erenderContext\u003c/code\u003e - the RenderContext to use to produce the rendering."
        ],
        "return": [
          "a RenderedImage containing the rendered data."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.awt.image.renderable.RenderableImage",
  "comment": "A RenderableImage is a common interface for rendering-independent images (a notion which subsumes resolution independence). That is, images which are described and have operations applied to them independent of any specific rendering of the image. For example, a RenderableImage can be rotated and cropped in resolution-independent terms. Then, it can be rendered for various specific contexts, such as a draft preview, a high-quality screen display, or a printer, each in an optimal fashion. \n\u003cp\u003e A RenderedImage is returned from a RenderableImage via the createRendering() method, which takes a RenderContext. The RenderContext specifies how the RenderedImage should be constructed. Note that it is not possible to extract pixels directly from a RenderableImage. \u003c/p\u003e\n\u003cp\u003e The createDefaultRendering() and createScaledRendering() methods are convenience methods that construct an appropriate RenderContext internally. All of the rendering methods may return a reference to a previously produced rendering.\u003c/p\u003e",
  "tagMap": {}
}