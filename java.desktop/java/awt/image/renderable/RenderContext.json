{
  "packageName": "java.awt.image.renderable",
  "simpleName": "RenderContext",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.RenderingHints",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRenderingHints",
      "comment": "Gets the rendering hints of this RenderContext.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/renderable/RenderContext.html#setRenderingHints(java.awt.RenderingHints)\"\u003e\u003ccode\u003esetRenderingHints(RenderingHints)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eRenderingHints\u003c/code\u003e object that represents the rendering hints of this \n\u003ccode\u003eRenderContext\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.RenderingHints",
            "type": "Class"
          },
          "field": {
            "name": "hints"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRenderingHints",
      "comment": "Sets the rendering hints of this RenderContext.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/renderable/RenderContext.html#getRenderingHints()\"\u003e\u003ccode\u003egetRenderingHints()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehints\u003c/code\u003e - a \n\u003ccode\u003eRenderingHints\u003c/code\u003e object that represents the rendering hints to assign to this \n\u003ccode\u003eRenderContext\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "newTransform"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTransform",
      "comment": "Sets the current user-to-device AffineTransform contained in the RenderContext to a given transform.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/renderable/RenderContext.html#getTransform()\"\u003e\u003ccode\u003egetTransform()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewTransform\u003c/code\u003e - the new AffineTransform."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "modTransform"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preConcatenateTransform",
      "comment": "Modifies the current user-to-device transform by prepending another transform. In matrix notation the operation is:  [this] \u003d [modTransform] x [this]",
      "tagMap": {
        "param": [
          "\u003ccode\u003emodTransform\u003c/code\u003e - the AffineTransform to prepend to the current usr2dev transform."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "modTransform"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preConcetenateTransform",
      "comment": "Modifies the current user-to-device transform by prepending another transform. In matrix notation the operation is:  [this] \u003d [modTransform] x [this]\n This method does the same thing as the preConcatenateTransform method. It is here for backward compatibility with previous releases which misspelled the method name.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emodTransform\u003c/code\u003e - the AffineTransform to prepend to the current usr2dev transform."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "modTransform"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "concatenateTransform",
      "comment": "Modifies the current user-to-device transform by appending another transform. In matrix notation the operation is:  [this] \u003d [this] x [modTransform]",
      "tagMap": {
        "param": [
          "\u003ccode\u003emodTransform\u003c/code\u003e - the AffineTransform to append to the current usr2dev transform."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "modTransform"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "concetenateTransform",
      "comment": "Modifies the current user-to-device transform by appending another transform. In matrix notation the operation is:  [this] \u003d [this] x [modTransform]\n This method does the same thing as the concatenateTransform method. It is here for backward compatibility with previous releases which misspelled the method name.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emodTransform\u003c/code\u003e - the AffineTransform to append to the current usr2dev transform."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.AffineTransform",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTransform",
      "comment": "Gets the current user-to-device AffineTransform.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/renderable/RenderContext.html#setTransform(java.awt.geom.AffineTransform)\"\u003e\u003ccode\u003esetTransform(AffineTransform)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a reference to the current AffineTransform."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "newAoi"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAreaOfInterest",
      "comment": "Sets the current area of interest. The old area is discarded.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/renderable/RenderContext.html#getAreaOfInterest()\"\u003e\u003ccode\u003egetAreaOfInterest()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewAoi\u003c/code\u003e - The new area of interest."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Shape",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAreaOfInterest",
      "comment": "Gets the ares of interest currently contained in the RenderContext.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/renderable/RenderContext.html#setAreaOfInterest(java.awt.Shape)\"\u003e\u003ccode\u003esetAreaOfInterest(Shape)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a reference to the area of interest of the RenderContext, or null if none is specified."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Makes a copy of a RenderContext. The area of interest is copied by reference. The usr2dev AffineTransform and hints are cloned, while the area of interest is copied by reference.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the new cloned RenderContext."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "usr2dev"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "aoi"
          }
        },
        {
          "type": {
            "name": "java.awt.RenderingHints",
            "type": "Class"
          },
          "field": {
            "name": "hints"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a RenderContext with a given transform. The area of interest is supplied as a Shape, and the rendering hints are supplied as a RenderingHints object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eusr2dev\u003c/code\u003e - an AffineTransform.",
          "\u003ccode\u003eaoi\u003c/code\u003e - a Shape representing the area of interest.",
          "\u003ccode\u003ehints\u003c/code\u003e - a RenderingHints object containing rendering hints."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "usr2dev"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a RenderContext with a given transform. The area of interest is taken to be the entire renderable area. No rendering hints are used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eusr2dev\u003c/code\u003e - an AffineTransform."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "usr2dev"
          }
        },
        {
          "type": {
            "name": "java.awt.RenderingHints",
            "type": "Class"
          },
          "field": {
            "name": "hints"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a RenderContext with a given transform and rendering hints. The area of interest is taken to be the entire renderable area.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eusr2dev\u003c/code\u003e - an AffineTransform.",
          "\u003ccode\u003ehints\u003c/code\u003e - a RenderingHints object containing rendering hints."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.geom.AffineTransform",
            "type": "Class"
          },
          "field": {
            "name": "usr2dev"
          }
        },
        {
          "type": {
            "name": "java.awt.Shape",
            "type": "Class"
          },
          "field": {
            "name": "aoi"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a RenderContext with a given transform and area of interest. The area of interest is supplied as a Shape. No rendering hints are used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eusr2dev\u003c/code\u003e - an AffineTransform.",
          "\u003ccode\u003eaoi\u003c/code\u003e - a Shape representing the area of interest."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.image.renderable.RenderContext",
  "comment": "A RenderContext encapsulates the information needed to produce a specific rendering from a RenderableImage. It contains the area to be rendered specified in rendering-independent terms, the resolution at which the rendering is to be performed, and hints used to control the rendering process. \n\u003cp\u003e Users create RenderContexts and pass them to the RenderableImage via the createRendering method. Most of the methods of RenderContexts are not meant to be used directly by applications, but by the RenderableImage and operator classes to which it is passed. \u003c/p\u003e\n\u003cp\u003e The AffineTransform parameter passed into and out of this class are cloned. The RenderingHints and Shape parameters are not necessarily cloneable and are therefore only reference copied. Altering RenderingHints or Shape instances that are in use by instances of RenderContext may have undesired side effects.\u003c/p\u003e",
  "tagMap": {}
}