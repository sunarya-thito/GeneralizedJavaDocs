{
  "packageName": "java.awt.image.renderable",
  "simpleName": "ContextualRenderedImageFactory",
  "moduleName": "java.desktop",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.awt.image.renderable.RenderedImageFactory",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.awt.image.renderable.RenderContext",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        },
        {
          "type": {
            "name": "java.awt.image.renderable.RenderContext",
            "type": "Class"
          },
          "field": {
            "name": "renderContext"
          }
        },
        {
          "type": {
            "name": "java.awt.image.renderable.ParameterBlock",
            "type": "Class"
          },
          "field": {
            "name": "paramBlock"
          }
        },
        {
          "type": {
            "name": "java.awt.image.renderable.RenderableImage",
            "type": "Class"
          },
          "field": {
            "name": "image"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "mapRenderContext",
      "comment": "Maps the operation\u0027s output RenderContext into a RenderContext for each of the operation\u0027s sources. This is useful for operations that can be expressed in whole or in part simply as alterations in the RenderContext, such as an affine mapping, or operations that wish to obtain lower quality renderings of their sources in order to save processing effort or transmission bandwidth. Some operations, such as blur, can also use this mechanism to avoid obtaining sources of higher quality than necessary.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the index of the source image.",
          "\u003ccode\u003erenderContext\u003c/code\u003e - the RenderContext being applied to the operation.",
          "\u003ccode\u003eparamBlock\u003c/code\u003e - a ParameterBlock containing the operation\u0027s sources and parameters.",
          "\u003ccode\u003eimage\u003c/code\u003e - the RenderableImage being rendered."
        ],
        "return": [
          "a \n\u003ccode\u003eRenderContext\u003c/code\u003e for the source at the specified index of the parameters Vector contained in the specified ParameterBlock."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.RenderedImage",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.renderable.RenderContext",
            "type": "Class"
          },
          "field": {
            "name": "renderContext"
          }
        },
        {
          "type": {
            "name": "java.awt.image.renderable.ParameterBlock",
            "type": "Class"
          },
          "field": {
            "name": "paramBlock"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "create",
      "comment": "Creates a rendering, given a RenderContext and a ParameterBlock containing the operation\u0027s sources and parameters. The output is a RenderedImage that takes the RenderContext into account to determine its dimensions and placement on the image plane. This method houses the \"intelligence\" that allows a rendering-independent operation to adapt to a specific RenderContext.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erenderContext\u003c/code\u003e - The RenderContext specifying the rendering",
          "\u003ccode\u003eparamBlock\u003c/code\u003e - a ParameterBlock containing the operation\u0027s sources and parameters"
        ],
        "return": [
          "a \n\u003ccode\u003eRenderedImage\u003c/code\u003e from the sources and parameters in the specified ParameterBlock and according to the rendering instructions in the specified RenderContext."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.renderable.ParameterBlock",
            "type": "Class"
          },
          "field": {
            "name": "paramBlock"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBounds2D",
      "comment": "Returns the bounding box for the output of the operation, performed on a given set of sources, in rendering-independent space. The bounds are returned as a Rectangle2D, that is, an axis-aligned rectangle with floating-point corner coordinates.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparamBlock\u003c/code\u003e - a ParameterBlock containing the operation\u0027s sources and parameters."
        ],
        "return": [
          "a Rectangle2D specifying the rendering-independent bounding box of the output."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.renderable.ParameterBlock",
            "type": "Class"
          },
          "field": {
            "name": "paramBlock"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getProperty",
      "comment": "Gets the appropriate instance of the property specified by the name parameter. This method must determine which instance of a property to return when there are multiple sources that each specify the property.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparamBlock\u003c/code\u003e - a ParameterBlock containing the operation\u0027s sources and parameters.",
          "\u003ccode\u003ename\u003c/code\u003e - a String naming the desired property."
        ],
        "return": [
          "an object reference to the value of the property requested."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPropertyNames",
      "comment": "Returns a list of names recognized by getProperty.",
      "tagMap": {
        "return": [
          "the list of property names."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isDynamic",
      "comment": "Returns true if successive renderings (that is, calls to create(RenderContext, ParameterBlock)) with the same arguments may produce different results. This method may be used to determine whether an existing rendering may be cached and reused. It is always safe to return true.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successive renderings with the same arguments might produce different results; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.awt.image.renderable.ContextualRenderedImageFactory",
  "comment": "ContextualRenderedImageFactory provides an interface for the functionality that may differ between instances of RenderableImageOp. Thus different operations on RenderableImages may be performed by a single class such as RenderedImageOp through the use of multiple instances of ContextualRenderedImageFactory. The name ContextualRenderedImageFactory is commonly shortened to \"CRIF.\" \n\u003cp\u003e All operations that are to be used in a rendering-independent chain must implement ContextualRenderedImageFactory. \u003c/p\u003e\n\u003cp\u003e Classes that implement this interface must provide a constructor with no arguments.\u003c/p\u003e",
  "tagMap": {}
}