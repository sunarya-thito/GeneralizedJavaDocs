{
  "packageName": "java.awt.image",
  "simpleName": "VolatileImage",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.Image",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IMAGE_OK",
      "comment": "Validated image is ready to use as-is.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.image.VolatileImage.IMAGE_OK\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IMAGE_RESTORED",
      "comment": "Validated image has been restored and is now ready to use. Note that restoration causes contents of the image to be lost.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.image.VolatileImage.IMAGE_RESTORED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IMAGE_INCOMPATIBLE",
      "comment": "Validated image is incompatible with supplied GraphicsConfiguration object and should be re-created as appropriate. Usage of the image as-is after receiving this return code from validate is undefined.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.awt.image.VolatileImage.IMAGE_INCOMPATIBLE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "transparency",
      "comment": "The transparency value with which this image was created.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html#createCompatibleVolatileImage(int,int,int)\"\u003e\u003ccode\u003eGraphicsConfiguration.createCompatibleVolatileImage(int, int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html#createCompatibleVolatileImage(int,int,java.awt.ImageCapabilities,int)\"\u003e\u003ccode\u003eGraphicsConfiguration.createCompatibleVolatileImage(int, int,ImageCapabilities,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html\" title\u003d\"interface in java.awt\"\u003e\u003ccode\u003eTransparency\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.BufferedImage",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSnapshot",
      "comment": "Returns a static snapshot image of this object. The BufferedImage returned is only current with the VolatileImage at the time of the request and will not be updated with any future changes to the VolatileImage.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eBufferedImage\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eBufferedImage\u003c/code\u003e\u003c/a\u003e representation of this \n\u003ccode\u003eVolatileImage\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getWidth",
      "comment": "Returns the width of the VolatileImage.",
      "tagMap": {
        "return": [
          "the width of this \n\u003ccode\u003eVolatileImage\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getHeight",
      "comment": "Returns the height of the VolatileImage.",
      "tagMap": {
        "return": [
          "the height of this \n\u003ccode\u003eVolatileImage\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.ImageProducer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSource",
      "comment": "This returns an ImageProducer for this VolatileImage. Note that the VolatileImage object is optimized for rendering operations and blitting to the screen or other VolatileImage objects, as opposed to reading back the pixels of the image. Therefore, operations such as getSource may not perform as fast as operations that do not rely on reading the pixels. Note also that the pixel values read from the image are current with those in the image only at the time that they are retrieved. This method takes a snapshot of the image at the time the request is made and the ImageProducer object returned works with that static snapshot image, not the original VolatileImage. Calling getSource() is equivalent to calling getSnapshot().getSource().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageProducer.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageProducer\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/VolatileImage.html#getSnapshot()\"\u003e\u003ccode\u003egetSnapshot()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Image.html#getSource()\"\u003egetSource\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Image.html\" title\u003d\"class in java.awt\"\u003eImage\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ImageProducer.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageProducer\u003c/code\u003e\u003c/a\u003e that can be used to produce the pixels for a \n\u003ccode\u003eBufferedImage\u003c/code\u003e representation of this Image."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Graphics",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGraphics",
      "comment": "This method returns a Graphics2D, but is here for backwards compatibility. createGraphics is more convenient, since it is declared to return a Graphics2D.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Graphics.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphics\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html#createImage(int,int)\"\u003e\u003ccode\u003eComponent.createImage(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Image.html#getGraphics()\"\u003egetGraphics\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Image.html\" title\u003d\"class in java.awt\"\u003eImage\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eGraphics2D\u003c/code\u003e, which can be used to draw into this image."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Graphics2D",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createGraphics",
      "comment": "Creates a Graphics2D, which can be used to draw into this VolatileImage.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eGraphics2D\u003c/code\u003e, used for drawing into this image."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.GraphicsConfiguration",
            "type": "Class"
          },
          "field": {
            "name": "gc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "validate",
      "comment": "Attempts to restore the drawing surface of the image if the surface had been lost since the last validate call. Also validates this image against the given GraphicsConfiguration parameter to see whether operations from this image to the GraphicsConfiguration are compatible. An example of an incompatible combination might be a situation where a VolatileImage object was created on one graphics device and then was used to render to a different graphics device. Since VolatileImage objects tend to be very device-specific, this operation might not work as intended, so the return code from this validate call would note that incompatibility. A null or incorrect value for gc may cause incorrect values to be returned from validate and may cause later problems with rendering.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/GraphicsConfiguration.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Component.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eComponent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/VolatileImage.html#IMAGE_OK\"\u003e\u003ccode\u003eIMAGE_OK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/VolatileImage.html#IMAGE_RESTORED\"\u003e\u003ccode\u003eIMAGE_RESTORED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/VolatileImage.html#IMAGE_INCOMPATIBLE\"\u003e\u003ccode\u003eIMAGE_INCOMPATIBLE\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003egc\u003c/code\u003e - a \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e object for this image to be validated against. A null gc implies that the validate method should skip the compatibility test."
        ],
        "return": [
          "\u003ccode\u003eIMAGE_OK\u003c/code\u003e if the image did not need validation\n\u003cbr\u003e \n\u003ccode\u003eIMAGE_RESTORED\u003c/code\u003e if the image needed restoration. Restoration implies that the contents of the image may have been affected and the image may need to be re-rendered.\n\u003cbr\u003e \n\u003ccode\u003eIMAGE_INCOMPATIBLE\u003c/code\u003e if the image is incompatible with the \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e object passed into the \n\u003ccode\u003evalidate\u003c/code\u003e method. Incompatibility implies that the image may need to be recreated with a new \n\u003ccode\u003eComponent\u003c/code\u003e or \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e in order to get an image that can be used successfully with this \n\u003ccode\u003eGraphicsConfiguration\u003c/code\u003e. An incompatible image is not checked for whether restoration was necessary, so the state of the image is unchanged after a return value of \n\u003ccode\u003eIMAGE_INCOMPATIBLE\u003c/code\u003e and this return value implies nothing about whether the image needs to be restored."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "contentsLost",
      "comment": "Returns true if rendering data was lost since last validate call. This method should be called by the application at the end of any series of rendering operations to or from the image to see whether the image needs to be validated and the rendering redone.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the drawing surface needs to be restored; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.ImageCapabilities",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getCapabilities",
      "comment": "Returns an ImageCapabilities object which can be inquired as to the specific capabilities of this VolatileImage. This would allow programmers to find out more runtime information on the specific VolatileImage object that they have created. For example, the user might create a VolatileImage but the system may have no video memory left for creating an image of that size, so although the object is a VolatileImage, it is not as accelerated as other VolatileImage objects on this platform might be. The user might want that information to find other solutions to their problem.",
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eImageCapabilities\u003c/code\u003e object that contains the capabilities of this \n\u003ccode\u003eVolatileImage\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTransparency",
      "comment": "Returns the transparency. Returns either OPAQUE, BITMASK, or TRANSLUCENT.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#OPAQUE\"\u003e\u003ccode\u003eTransparency.OPAQUE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#BITMASK\"\u003e\u003ccode\u003eTransparency.BITMASK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#TRANSLUCENT\"\u003e\u003ccode\u003eTransparency.TRANSLUCENT\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html#getTransparency()\"\u003egetTransparency\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/Transparency.html\" title\u003d\"interface in java.awt\"\u003eTransparency\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the transparency of this \n\u003ccode\u003eVolatileImage\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.image.VolatileImage",
  "comment": "VolatileImage is an image which can lose its contents at any time due to circumstances beyond the control of the application (e.g., situations caused by the operating system or by other applications). Because of the potential for hardware acceleration, a VolatileImage object can have significant performance benefits on some platforms. \n\u003cp\u003e The drawing surface of an image (the memory where the image contents actually reside) can be lost or invalidated, causing the contents of that memory to go away. The drawing surface thus needs to be restored or recreated and the contents of that surface need to be re-rendered. VolatileImage provides an interface for allowing the user to detect these problems and fix them when they occur. \u003c/p\u003e\n\u003cp\u003e When a VolatileImage object is created, limited system resources such as video memory (VRAM) may be allocated in order to support the image. When a VolatileImage object is no longer used, it may be garbage-collected and those system resources will be returned, but this process does not happen at guaranteed times. Applications that create many VolatileImage objects (for example, a resizing window may force recreation of its back buffer as the size changes) may run out of optimal system resources for new VolatileImage objects simply because the old objects have not yet been removed from the system. (New VolatileImage objects may still be created, but they may not perform as well as those created in accelerated memory). The flush method may be called at any time to proactively release the resources used by a VolatileImage so that it does not prevent subsequent VolatileImage objects from being accelerated. In this way, applications can have more control over the state of the resources taken up by obsolete VolatileImage objects. \u003c/p\u003e\n\u003cp\u003e This image should not be subclassed directly but should be created by using the \u003ca href\u003d\"../Component.html#createVolatileImage(int,int)\"\u003e\u003ccode\u003eComponent.createVolatileImage\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"../GraphicsConfiguration.html#createCompatibleVolatileImage(int,int)\"\u003e\u003ccode\u003eGraphicsConfiguration.createCompatibleVolatileImage(int, int)\u003c/code\u003e\u003c/a\u003e methods. \u003c/p\u003e\n\u003cp\u003e An example of using a VolatileImage object follows: \u003c/p\u003e\n\u003cpre\u003e // image creation\n VolatileImage vImg \u003d createVolatileImage(w, h);\n\n\n // rendering to the image\n void renderOffscreen() {\n      do {\n          if (vImg.validate(getGraphicsConfiguration()) \u003d\u003d\n              VolatileImage.IMAGE_INCOMPATIBLE)\n          {\n              // old vImg doesn\u0027t work with new GraphicsConfig; re-create it\n              vImg \u003d createVolatileImage(w, h);\n          }\n          Graphics2D g \u003d vImg.createGraphics();\n          //\n          // miscellaneous rendering commands...\n          //\n          g.dispose();\n      } while (vImg.contentsLost());\n }\n\n\n // copying from the image (here, gScreen is the Graphics\n // object for the onscreen window)\n do {\n      int returnCode \u003d vImg.validate(getGraphicsConfiguration());\n      if (returnCode \u003d\u003d VolatileImage.IMAGE_RESTORED) {\n          // Contents need to be restored\n          renderOffscreen();      // restore contents\n      } else if (returnCode \u003d\u003d VolatileImage.IMAGE_INCOMPATIBLE) {\n          // old vImg doesn\u0027t work with new GraphicsConfig; re-create it\n          vImg \u003d createVolatileImage(w, h);\n          renderOffscreen();\n      }\n      gScreen.drawImage(vImg, 0, 0, this);\n } while (vImg.contentsLost());\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Note that this class subclasses from the \u003ca href\u003d\"../Image.html\" title\u003d\"class in java.awt\"\u003e\u003ccode\u003eImage\u003c/code\u003e\u003c/a\u003e class, which includes methods that take an \u003ca href\u003d\"ImageObserver.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageObserver\u003c/code\u003e\u003c/a\u003e parameter for asynchronous notifications as information is received from a potential \u003ca href\u003d\"ImageProducer.html\" title\u003d\"interface in java.awt.image\"\u003e\u003ccode\u003eImageProducer\u003c/code\u003e\u003c/a\u003e. Since this \u003ccode\u003eVolatileImage\u003c/code\u003e is not loaded from an asynchronous source, the various methods that take an \u003ccode\u003eImageObserver\u003c/code\u003e parameter will behave as if the data has already been obtained from the \u003ccode\u003eImageProducer\u003c/code\u003e. Specifically, this means that the return values from such methods will never indicate that the information is not yet available and the \u003ccode\u003eImageObserver\u003c/code\u003e used in such methods will never need to be recorded for an asynchronous callback notification.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}