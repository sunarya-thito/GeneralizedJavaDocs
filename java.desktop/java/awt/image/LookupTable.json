{
  "packageName": "java.awt.image",
  "simpleName": "LookupTable",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNumComponents",
      "comment": "Returns the number of components in the lookup table.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of components in this \n\u003ccode\u003eLookupTable\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOffset",
      "comment": "Returns the offset.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the offset of this \n\u003ccode\u003eLookupTable\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "lookupPixel",
      "comment": "Returns an int array of components for one pixel. The dest array contains the result of the lookup and is returned. If dest is null, a new array is allocated. The source and destination can be equal.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - the source array of components of one pixel",
          "\u003ccode\u003edest\u003c/code\u003e - the destination array of components for one pixel, translated with this \n\u003ccode\u003eLookupTable\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eint\u003c/code\u003e array of components for one pixel."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "numComponents",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a new LookupTable from the number of components and an offset into the lookup table.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset to subtract from input values before indexing into the data arrays for this \n\u003ccode\u003eLookupTable\u003c/code\u003e",
          "\u003ccode\u003enumComponents\u003c/code\u003e - the number of data arrays in this \n\u003ccode\u003eLookupTable\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset\u003c/code\u003e is less than 0 or if \n\u003ccode\u003enumComponents\u003c/code\u003e is less than 1"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.image.LookupTable",
  "comment": "This abstract class defines a lookup table object. ByteLookupTable and ShortLookupTable are subclasses, which contain byte and short data, respectively. A lookup table contains data arrays for one or more bands (or components) of an image (for example, separate arrays for R, G, and B), and it contains an offset which will be subtracted from the input values before indexing into the arrays. This allows an array smaller than the native data size to be provided for a constrained input. If there is only one array in the lookup table, it will be applied to all bands. All arrays must be the same size.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ByteLookupTable.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eByteLookupTable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ShortLookupTable.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eShortLookupTable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/LookupOp.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eLookupOp\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}