{
  "packageName": "java.awt.image",
  "simpleName": "Raster",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.awt.image.SampleModel",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "sampleModel",
      "comment": "The SampleModel that describes how pixels from this Raster are stored in the DataBuffer.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.image.DataBuffer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "dataBuffer",
      "comment": "The DataBuffer that stores the image data.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "minX",
      "comment": "The X coordinate of the upper-left pixel of this Raster.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "minY",
      "comment": "The Y coordinate of the upper-left pixel of this Raster.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "width",
      "comment": "The width of this Raster.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "height",
      "comment": "The height of this Raster.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "sampleModelTranslateX",
      "comment": "The X translation from the coordinate space of the Raster\u0027s SampleModel to that of the Raster.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "sampleModelTranslateY",
      "comment": "The Y translation from the coordinate space of the Raster\u0027s SampleModel to that of the Raster.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "numBands",
      "comment": "The number of bands in the Raster.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "numDataElements",
      "comment": "The number of DataBuffer data elements per pixel.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.awt.image.Raster",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "parent",
      "comment": "The parent of this Raster, or null.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dataType"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bands"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createInterleavedRaster",
      "comment": "Creates a Raster based on a PixelInterleavedSampleModel with the specified data type, width, height, and number of bands. The upper left corner of the Raster is given by the location argument. If location is null, (0, 0) will be used. The dataType parameter should be one of the enumerated values defined in the DataBuffer class. Note that interleaved DataBuffer.TYPE_INT Rasters are not supported. To create a 1-band Raster of type DataBuffer.TYPE_INT, use Raster.createPackedRaster(). The only dataTypes supported currently are TYPE_BYTE and TYPE_USHORT.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edataType\u003c/code\u003e - the data type for storing samples",
          "\u003ccode\u003ew\u003c/code\u003e - the width in pixels of the image data",
          "\u003ccode\u003eh\u003c/code\u003e - the height in pixels of the image data",
          "\u003ccode\u003ebands\u003c/code\u003e - the number of bands",
          "\u003ccode\u003elocation\u003c/code\u003e - the upper-left corner of the \n\u003ccode\u003eRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ew\u003c/code\u003e or \n\u003ccode\u003eh\u003c/code\u003e is less than or equal to zero, or computing either \n\u003ccode\u003elocation.x + w\u003c/code\u003e or \n\u003ccode\u003elocation.y + h\u003c/code\u003e results in integer overflow"
        ],
        "return": [
          "a WritableRaster object with the specified data type, width, height and number of bands."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dataType"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scanlineStride"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pixelStride"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bandOffsets"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createInterleavedRaster",
      "comment": "Creates a Raster based on a PixelInterleavedSampleModel with the specified data type, width, height, scanline stride, pixel stride, and band offsets. The number of bands is inferred from bandOffsets.length. The upper left corner of the Raster is given by the location argument. If location is null, (0, 0) will be used. The dataType parameter should be one of the enumerated values defined in the DataBuffer class. Note that interleaved DataBuffer.TYPE_INT Rasters are not supported. To create a 1-band Raster of type DataBuffer.TYPE_INT, use Raster.createPackedRaster(). The only dataTypes supported currently are TYPE_BYTE and TYPE_USHORT.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edataType\u003c/code\u003e - the data type for storing samples",
          "\u003ccode\u003ew\u003c/code\u003e - the width in pixels of the image data",
          "\u003ccode\u003eh\u003c/code\u003e - the height in pixels of the image data",
          "\u003ccode\u003escanlineStride\u003c/code\u003e - the line stride of the image data",
          "\u003ccode\u003epixelStride\u003c/code\u003e - the pixel stride of the image data",
          "\u003ccode\u003ebandOffsets\u003c/code\u003e - the offsets of all bands",
          "\u003ccode\u003elocation\u003c/code\u003e - the upper-left corner of the \n\u003ccode\u003eRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ew\u003c/code\u003e or \n\u003ccode\u003eh\u003c/code\u003e is less than or equal to zero, or computing either \n\u003ccode\u003elocation.x + w\u003c/code\u003e or \n\u003ccode\u003elocation.y + h\u003c/code\u003e results in integer overflow",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataType\u003c/code\u003e is not one of the supported data types, which are \n\u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, or \n\u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e."
        ],
        "return": [
          "a WritableRaster object with the specified data type, width, height, scanline stride, pixel stride and band offsets."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dataType"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bands"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createBandedRaster",
      "comment": "Creates a Raster based on a BandedSampleModel with the specified data type, width, height, and number of bands. The upper left corner of the Raster is given by the location argument. If location is null, (0, 0) will be used. The dataType parameter should be one of the enumerated values defined in the DataBuffer class. The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT, and TYPE_INT.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edataType\u003c/code\u003e - the data type for storing samples",
          "\u003ccode\u003ew\u003c/code\u003e - the width in pixels of the image data",
          "\u003ccode\u003eh\u003c/code\u003e - the height in pixels of the image data",
          "\u003ccode\u003ebands\u003c/code\u003e - the number of bands",
          "\u003ccode\u003elocation\u003c/code\u003e - the upper-left corner of the \n\u003ccode\u003eRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ew\u003c/code\u003e or \n\u003ccode\u003eh\u003c/code\u003e is less than or equal to zero, or computing either \n\u003ccode\u003elocation.x + w\u003c/code\u003e or \n\u003ccode\u003elocation.y + h\u003c/code\u003e results in integer overflow",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebands\u003c/code\u003e is less than 1"
        ],
        "return": [
          "a WritableRaster object with the specified data type, width, height and number of bands."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dataType"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scanlineStride"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bankIndices"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bandOffsets"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createBandedRaster",
      "comment": "Creates a Raster based on a BandedSampleModel with the specified data type, width, height, scanline stride, bank indices and band offsets. The number of bands is inferred from bankIndices.length and bandOffsets.length, which must be the same. The upper left corner of the Raster is given by the location argument. The dataType parameter should be one of the enumerated values defined in the DataBuffer class. The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT, and TYPE_INT.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edataType\u003c/code\u003e - the data type for storing samples",
          "\u003ccode\u003ew\u003c/code\u003e - the width in pixels of the image data",
          "\u003ccode\u003eh\u003c/code\u003e - the height in pixels of the image data",
          "\u003ccode\u003escanlineStride\u003c/code\u003e - the line stride of the image data",
          "\u003ccode\u003ebankIndices\u003c/code\u003e - the bank indices for each band",
          "\u003ccode\u003ebandOffsets\u003c/code\u003e - the offsets of all bands",
          "\u003ccode\u003elocation\u003c/code\u003e - the upper-left corner of the \n\u003ccode\u003eRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ew\u003c/code\u003e or \n\u003ccode\u003eh\u003c/code\u003e is less than or equal to zero, or computing either \n\u003ccode\u003elocation.x + w\u003c/code\u003e or \n\u003ccode\u003elocation.y + h\u003c/code\u003e results in integer overflow",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataType\u003c/code\u003e is not one of the supported data types, which are \n\u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, \n\u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e or \n\u003ccode\u003eDataBuffer.TYPE_INT\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebankIndices\u003c/code\u003e or \n\u003ccode\u003ebandOffsets\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a WritableRaster object with the specified data type, width, height, scanline stride, bank indices and band offsets."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dataType"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bandMasks"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createPackedRaster",
      "comment": "Creates a Raster based on a SinglePixelPackedSampleModel with the specified data type, width, height, and band masks. The number of bands is inferred from bandMasks.length. The upper left corner of the Raster is given by the location argument. If location is null, (0, 0) will be used. The dataType parameter should be one of the enumerated values defined in the DataBuffer class. The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT, and TYPE_INT.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edataType\u003c/code\u003e - the data type for storing samples",
          "\u003ccode\u003ew\u003c/code\u003e - the width in pixels of the image data",
          "\u003ccode\u003eh\u003c/code\u003e - the height in pixels of the image data",
          "\u003ccode\u003ebandMasks\u003c/code\u003e - an array containing an entry for each band",
          "\u003ccode\u003elocation\u003c/code\u003e - the upper-left corner of the \n\u003ccode\u003eRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ew\u003c/code\u003e or \n\u003ccode\u003eh\u003c/code\u003e is less than or equal to zero, or computing either \n\u003ccode\u003elocation.x + w\u003c/code\u003e or \n\u003ccode\u003elocation.y + h\u003c/code\u003e results in integer overflow",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataType\u003c/code\u003e is not one of the supported data types, which are \n\u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, \n\u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e or \n\u003ccode\u003eDataBuffer.TYPE_INT\u003c/code\u003e"
        ],
        "return": [
          "a WritableRaster object with the specified data type, width, height, and band masks."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dataType"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bands"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bitsPerBand"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createPackedRaster",
      "comment": "Creates a Raster based on a packed SampleModel with the specified data type, width, height, number of bands, and bits per band. If the number of bands is one, the SampleModel will be a MultiPixelPackedSampleModel. If the number of bands is more than one, the SampleModel will be a SinglePixelPackedSampleModel, with each band having bitsPerBand bits. In either case, the requirements on dataType and bitsPerBand imposed by the corresponding SampleModel must be met. The upper left corner of the Raster is given by the location argument. If location is null, (0, 0) will be used. The dataType parameter should be one of the enumerated values defined in the DataBuffer class. The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT, and TYPE_INT.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edataType\u003c/code\u003e - the data type for storing samples",
          "\u003ccode\u003ew\u003c/code\u003e - the width in pixels of the image data",
          "\u003ccode\u003eh\u003c/code\u003e - the height in pixels of the image data",
          "\u003ccode\u003ebands\u003c/code\u003e - the number of bands",
          "\u003ccode\u003ebitsPerBand\u003c/code\u003e - the number of bits per band",
          "\u003ccode\u003elocation\u003c/code\u003e - the upper-left corner of the \n\u003ccode\u003eRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ew\u003c/code\u003e or \n\u003ccode\u003eh\u003c/code\u003e is less than or equal to zero, or computing either \n\u003ccode\u003elocation.x + w\u003c/code\u003e or \n\u003ccode\u003elocation.y + h\u003c/code\u003e results in integer overflow",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the product of \n\u003ccode\u003ebitsPerBand\u003c/code\u003e and \n\u003ccode\u003ebands\u003c/code\u003e is greater than the number of bits held by \n\u003ccode\u003edataType\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebitsPerBand\u003c/code\u003e or \n\u003ccode\u003ebands\u003c/code\u003e is not greater than zero",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataType\u003c/code\u003e is not one of the supported data types, which are \n\u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, \n\u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e or \n\u003ccode\u003eDataBuffer.TYPE_INT\u003c/code\u003e"
        ],
        "return": [
          "a WritableRaster object with the specified data type, width, height, number of bands, and bits per band."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.DataBuffer",
            "type": "Class"
          },
          "field": {
            "name": "dataBuffer"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scanlineStride"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "pixelStride"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bandOffsets"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createInterleavedRaster",
      "comment": "Creates a Raster based on a PixelInterleavedSampleModel with the specified DataBuffer, width, height, scanline stride, pixel stride, and band offsets. The number of bands is inferred from bandOffsets.length. The upper left corner of the Raster is given by the location argument. If location is null, (0, 0) will be used. Note that interleaved DataBuffer.TYPE_INT Rasters are not supported. To create a 1-band Raster of type DataBuffer.TYPE_INT, use Raster.createPackedRaster().",
      "tagMap": {
        "param": [
          "\u003ccode\u003edataBuffer\u003c/code\u003e - the \n\u003ccode\u003eDataBuffer\u003c/code\u003e that contains the image data",
          "\u003ccode\u003ew\u003c/code\u003e - the width in pixels of the image data",
          "\u003ccode\u003eh\u003c/code\u003e - the height in pixels of the image data",
          "\u003ccode\u003escanlineStride\u003c/code\u003e - the line stride of the image data",
          "\u003ccode\u003epixelStride\u003c/code\u003e - the pixel stride of the image data",
          "\u003ccode\u003ebandOffsets\u003c/code\u003e - the offsets of all bands",
          "\u003ccode\u003elocation\u003c/code\u003e - the upper-left corner of the \n\u003ccode\u003eRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ew\u003c/code\u003e or \n\u003ccode\u003eh\u003c/code\u003e is less than or equal to zero, or computing either \n\u003ccode\u003elocation.x + w\u003c/code\u003e or \n\u003ccode\u003elocation.y + h\u003c/code\u003e results in integer overflow",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataType\u003c/code\u003e is not one of the supported data types, which are \n\u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, \n\u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataBuffer\u003c/code\u003e has more than one bank.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataBuffer\u003c/code\u003e is null"
        ],
        "return": [
          "a WritableRaster object with the specified \n\u003ccode\u003eDataBuffer\u003c/code\u003e, width, height, scanline stride, pixel stride and band offsets."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.DataBuffer",
            "type": "Class"
          },
          "field": {
            "name": "dataBuffer"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scanlineStride"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bankIndices"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bandOffsets"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createBandedRaster",
      "comment": "Creates a Raster based on a BandedSampleModel with the specified DataBuffer, width, height, scanline stride, bank indices, and band offsets. The number of bands is inferred from bankIndices.length and bandOffsets.length, which must be the same. The upper left corner of the Raster is given by the location argument. If location is null, (0, 0) will be used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edataBuffer\u003c/code\u003e - the \n\u003ccode\u003eDataBuffer\u003c/code\u003e that contains the image data",
          "\u003ccode\u003ew\u003c/code\u003e - the width in pixels of the image data",
          "\u003ccode\u003eh\u003c/code\u003e - the height in pixels of the image data",
          "\u003ccode\u003escanlineStride\u003c/code\u003e - the line stride of the image data",
          "\u003ccode\u003ebankIndices\u003c/code\u003e - the bank indices for each band",
          "\u003ccode\u003ebandOffsets\u003c/code\u003e - the offsets of all bands",
          "\u003ccode\u003elocation\u003c/code\u003e - the upper-left corner of the \n\u003ccode\u003eRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ew\u003c/code\u003e or \n\u003ccode\u003eh\u003c/code\u003e is less than or equal to zero, or computing either \n\u003ccode\u003elocation.x + w\u003c/code\u003e or \n\u003ccode\u003elocation.y + h\u003c/code\u003e results in integer overflow",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataType\u003c/code\u003e is not one of the supported data types, which are \n\u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, \n\u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e or \n\u003ccode\u003eDataBuffer.TYPE_INT\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataBuffer\u003c/code\u003e is null"
        ],
        "return": [
          "a WritableRaster object with the specified \n\u003ccode\u003eDataBuffer\u003c/code\u003e, width, height, scanline stride, bank indices and band offsets."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.DataBuffer",
            "type": "Class"
          },
          "field": {
            "name": "dataBuffer"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scanlineStride"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bandMasks"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createPackedRaster",
      "comment": "Creates a Raster based on a SinglePixelPackedSampleModel with the specified DataBuffer, width, height, scanline stride, and band masks. The number of bands is inferred from bandMasks.length. The upper left corner of the Raster is given by the location argument. If location is null, (0, 0) will be used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edataBuffer\u003c/code\u003e - the \n\u003ccode\u003eDataBuffer\u003c/code\u003e that contains the image data",
          "\u003ccode\u003ew\u003c/code\u003e - the width in pixels of the image data",
          "\u003ccode\u003eh\u003c/code\u003e - the height in pixels of the image data",
          "\u003ccode\u003escanlineStride\u003c/code\u003e - the line stride of the image data",
          "\u003ccode\u003ebandMasks\u003c/code\u003e - an array containing an entry for each band",
          "\u003ccode\u003elocation\u003c/code\u003e - the upper-left corner of the \n\u003ccode\u003eRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ew\u003c/code\u003e or \n\u003ccode\u003eh\u003c/code\u003e is less than or equal to zero, or computing either \n\u003ccode\u003elocation.x + w\u003c/code\u003e or \n\u003ccode\u003elocation.y + h\u003c/code\u003e results in integer overflow",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataType\u003c/code\u003e is not one of the supported data types, which are \n\u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, \n\u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e or \n\u003ccode\u003eDataBuffer.TYPE_INT\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataBuffer\u003c/code\u003e has more than one bank.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataBuffer\u003c/code\u003e is null"
        ],
        "return": [
          "a WritableRaster object with the specified \n\u003ccode\u003eDataBuffer\u003c/code\u003e, width, height, scanline stride, and band masks."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.DataBuffer",
            "type": "Class"
          },
          "field": {
            "name": "dataBuffer"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bitsPerPixel"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createPackedRaster",
      "comment": "Creates a Raster based on a MultiPixelPackedSampleModel with the specified DataBuffer, width, height, and bits per pixel. The upper left corner of the Raster is given by the location argument. If location is null, (0, 0) will be used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edataBuffer\u003c/code\u003e - the \n\u003ccode\u003eDataBuffer\u003c/code\u003e that contains the image data",
          "\u003ccode\u003ew\u003c/code\u003e - the width in pixels of the image data",
          "\u003ccode\u003eh\u003c/code\u003e - the height in pixels of the image data",
          "\u003ccode\u003ebitsPerPixel\u003c/code\u003e - the number of bits for each pixel",
          "\u003ccode\u003elocation\u003c/code\u003e - the upper-left corner of the \n\u003ccode\u003eRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ew\u003c/code\u003e or \n\u003ccode\u003eh\u003c/code\u003e is less than or equal to zero, or computing either \n\u003ccode\u003elocation.x + w\u003c/code\u003e or \n\u003ccode\u003elocation.y + h\u003c/code\u003e results in integer overflow",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataType\u003c/code\u003e is not one of the supported data types, which are \n\u003ccode\u003eDataBuffer.TYPE_BYTE\u003c/code\u003e, \n\u003ccode\u003eDataBuffer.TYPE_USHORT\u003c/code\u003e or \n\u003ccode\u003eDataBuffer.TYPE_INT\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataBuffer\u003c/code\u003e has more than one bank.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edataBuffer\u003c/code\u003e is null"
        ],
        "return": [
          "a WritableRaster object with the specified \n\u003ccode\u003eDataBuffer\u003c/code\u003e, width, height, and bits per pixel."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.Raster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.SampleModel",
            "type": "Class"
          },
          "field": {
            "name": "sm"
          }
        },
        {
          "type": {
            "name": "java.awt.image.DataBuffer",
            "type": "Class"
          },
          "field": {
            "name": "db"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createRaster",
      "comment": "Creates a Raster with the specified SampleModel and DataBuffer. The upper left corner of the Raster is given by the location argument. If location is null, (0, 0) will be used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esm\u003c/code\u003e - the specified \n\u003ccode\u003eSampleModel\u003c/code\u003e",
          "\u003ccode\u003edb\u003c/code\u003e - the specified \n\u003ccode\u003eDataBuffer\u003c/code\u003e",
          "\u003ccode\u003elocation\u003c/code\u003e - the upper-left corner of the \n\u003ccode\u003eRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if computing either \n\u003ccode\u003elocation.x + sm.getWidth()\u003c/code\u003e or \n\u003ccode\u003elocation.y + sm.getHeight()\u003c/code\u003e results in integer overflow",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edb\u003c/code\u003e has more than one bank and \n\u003ccode\u003esm\u003c/code\u003e is a PixelInterleavedSampleModel, SinglePixelPackedSampleModel, or MultiPixelPackedSampleModel.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either SampleModel or DataBuffer is null"
        ],
        "return": [
          "a \n\u003ccode\u003eRaster\u003c/code\u003e with the specified \n\u003ccode\u003eSampleModel\u003c/code\u003e, \n\u003ccode\u003eDataBuffer\u003c/code\u003e, and location."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.SampleModel",
            "type": "Class"
          },
          "field": {
            "name": "sm"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createWritableRaster",
      "comment": "Creates a WritableRaster with the specified SampleModel. The upper left corner of the Raster is given by the location argument. If location is null, (0, 0) will be used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esm\u003c/code\u003e - the specified \n\u003ccode\u003eSampleModel\u003c/code\u003e",
          "\u003ccode\u003elocation\u003c/code\u003e - the upper-left corner of the \n\u003ccode\u003eWritableRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if computing either \n\u003ccode\u003elocation.x + sm.getWidth()\u003c/code\u003e or \n\u003ccode\u003elocation.y + sm.getHeight()\u003c/code\u003e results in integer overflow"
        ],
        "return": [
          "a \n\u003ccode\u003eWritableRaster\u003c/code\u003e with the specified \n\u003ccode\u003eSampleModel\u003c/code\u003e and location."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.SampleModel",
            "type": "Class"
          },
          "field": {
            "name": "sm"
          }
        },
        {
          "type": {
            "name": "java.awt.image.DataBuffer",
            "type": "Class"
          },
          "field": {
            "name": "db"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createWritableRaster",
      "comment": "Creates a WritableRaster with the specified SampleModel and DataBuffer. The upper left corner of the Raster is given by the location argument. If location is null, (0, 0) will be used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esm\u003c/code\u003e - the specified \n\u003ccode\u003eSampleModel\u003c/code\u003e",
          "\u003ccode\u003edb\u003c/code\u003e - the specified \n\u003ccode\u003eDataBuffer\u003c/code\u003e",
          "\u003ccode\u003elocation\u003c/code\u003e - the upper-left corner of the \n\u003ccode\u003eWritableRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if computing either \n\u003ccode\u003elocation.x + sm.getWidth()\u003c/code\u003e or \n\u003ccode\u003elocation.y + sm.getHeight()\u003c/code\u003e results in integer overflow",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edb\u003c/code\u003e has more than one bank and \n\u003ccode\u003esm\u003c/code\u003e is a PixelInterleavedSampleModel, SinglePixelPackedSampleModel, or MultiPixelPackedSampleModel.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either SampleModel or DataBuffer is null"
        ],
        "return": [
          "a \n\u003ccode\u003eWritableRaster\u003c/code\u003e with the specified \n\u003ccode\u003eSampleModel\u003c/code\u003e, \n\u003ccode\u003eDataBuffer\u003c/code\u003e, and location."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.Raster",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParent",
      "comment": "Returns the parent Raster (if any) of this Raster or null.",
      "tagMap": {
        "return": [
          "the parent Raster or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getSampleModelTranslateX",
      "comment": "Returns the X translation from the coordinate system of the SampleModel to that of the Raster. To convert a pixel\u0027s X coordinate from the Raster coordinate system to the SampleModel coordinate system, this value must be subtracted.",
      "tagMap": {
        "return": [
          "the X translation from the coordinate space of the Raster\u0027s SampleModel to that of the Raster."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getSampleModelTranslateY",
      "comment": "Returns the Y translation from the coordinate system of the SampleModel to that of the Raster. To convert a pixel\u0027s Y coordinate from the Raster coordinate system to the SampleModel coordinate system, this value must be subtracted.",
      "tagMap": {
        "return": [
          "the Y translation from the coordinate space of the Raster\u0027s SampleModel to that of the Raster."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createCompatibleWritableRaster",
      "comment": "Create a compatible WritableRaster the same size as this Raster with the same SampleModel and a new initialized DataBuffer.",
      "tagMap": {
        "return": [
          "a compatible \n\u003ccode\u003eWritableRaster\u003c/code\u003e with the same sample model and a new data buffer."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createCompatibleWritableRaster",
      "comment": "Create a compatible WritableRaster with the specified size, a new SampleModel, and a new initialized DataBuffer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ew\u003c/code\u003e - the specified width of the new \n\u003ccode\u003eWritableRaster\u003c/code\u003e",
          "\u003ccode\u003eh\u003c/code\u003e - the specified height of the new \n\u003ccode\u003eWritableRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if the width or height is less than or equal to zero."
        ],
        "return": [
          "a compatible \n\u003ccode\u003eWritableRaster\u003c/code\u003e with the specified size and a new sample model and data buffer."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "rect"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createCompatibleWritableRaster",
      "comment": "Create a compatible WritableRaster with location (minX, minY) and size (width, height) specified by rect, a new SampleModel, and a new initialized DataBuffer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erect\u003c/code\u003e - a \n\u003ccode\u003eRectangle\u003c/code\u003e that specifies the size and location of the \n\u003ccode\u003eWritableRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erect\u003c/code\u003e has width or height less than or equal to zero, or computing either \n\u003ccode\u003erect.x + rect.width\u003c/code\u003e or \n\u003ccode\u003erect.y + rect.height\u003c/code\u003e results in integer overflow",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erect\u003c/code\u003e is null"
        ],
        "return": [
          "a compatible \n\u003ccode\u003eWritableRaster\u003c/code\u003e with the specified size and location and a new sample model and data buffer."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createCompatibleWritableRaster",
      "comment": "Create a compatible WritableRaster with the specified location (minX, minY) and size (width, height), a new SampleModel, and a new initialized DataBuffer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the X coordinate of the upper-left corner of the \n\u003ccode\u003eWritableRaster\u003c/code\u003e",
          "\u003ccode\u003ey\u003c/code\u003e - the Y coordinate of the upper-left corner of the \n\u003ccode\u003eWritableRaster\u003c/code\u003e",
          "\u003ccode\u003ew\u003c/code\u003e - the specified width of the \n\u003ccode\u003eWritableRaster\u003c/code\u003e",
          "\u003ccode\u003eh\u003c/code\u003e - the specified height of the \n\u003ccode\u003eWritableRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ew\u003c/code\u003e or \n\u003ccode\u003eh\u003c/code\u003e is less than or equal to zero, or computing either \n\u003ccode\u003ex + w\u003c/code\u003e or \n\u003ccode\u003ey + h\u003c/code\u003e results in integer overflow"
        ],
        "return": [
          "a compatible \n\u003ccode\u003eWritableRaster\u003c/code\u003e with the specified size and location and a new sample model and data buffer."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.Raster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "childMinX"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "childMinY"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createTranslatedChild",
      "comment": "Create a Raster with the same size, SampleModel and DataBuffer as this one, but with a different location. The new Raster will possess a reference to the current Raster, accessible through its getParent() method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003echildMinX\u003c/code\u003e - the X coordinate of the upper-left corner of the new \n\u003ccode\u003eRaster\u003c/code\u003e",
          "\u003ccode\u003echildMinY\u003c/code\u003e - the Y coordinate of the upper-left corner of the new \n\u003ccode\u003eRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if computing either \n\u003ccode\u003echildMinX + this.getWidth()\u003c/code\u003e or \n\u003ccode\u003echildMinY + this.getHeight()\u003c/code\u003e results in integer overflow"
        ],
        "return": [
          "a new \n\u003ccode\u003eRaster\u003c/code\u003e with the same size, SampleModel, and DataBuffer as this \n\u003ccode\u003eRaster\u003c/code\u003e, but with the specified location."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.Raster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parentX"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parentY"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "width"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "height"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "childMinX"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "childMinY"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bandList"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createChild",
      "comment": "Returns a new Raster which shares all or part of this Raster\u0027s DataBuffer. The new Raster will possess a reference to the current Raster, accessible through its getParent() method. The parentX, parentY, width and height parameters form a Rectangle in this Raster\u0027s coordinate space, indicating the area of pixels to be shared. An error will be thrown if this Rectangle is not contained with the bounds of the current Raster. The new Raster may additionally be translated to a different coordinate system for the plane than that used by the current Raster. The childMinX and childMinY parameters give the new (x, y) coordinate of the upper-left pixel of the returned Raster; the coordinate (childMinX, childMinY) in the new Raster will map to the same pixel as the coordinate (parentX, parentY) in the current Raster. The new Raster may be defined to contain only a subset of the bands of the current Raster, possibly reordered, by means of the bandList parameter. If bandList is null, it is taken to include all of the bands of the current Raster in their current order. To create a new Raster that contains a subregion of the current Raster, but shares its coordinate system and bands, this method should be called with childMinX equal to parentX, childMinY equal to parentY, and bandList equal to null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparentX\u003c/code\u003e - The X coordinate of the upper-left corner in this Raster\u0027s coordinates",
          "\u003ccode\u003eparentY\u003c/code\u003e - The Y coordinate of the upper-left corner in this Raster\u0027s coordinates",
          "\u003ccode\u003ewidth\u003c/code\u003e - Width of the region starting at (parentX, parentY)",
          "\u003ccode\u003eheight\u003c/code\u003e - Height of the region starting at (parentX, parentY).",
          "\u003ccode\u003echildMinX\u003c/code\u003e - The X coordinate of the upper-left corner of the returned Raster",
          "\u003ccode\u003echildMinY\u003c/code\u003e - The Y coordinate of the upper-left corner of the returned Raster",
          "\u003ccode\u003ebandList\u003c/code\u003e - Array of band indices, or null to use all bands"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if the specified subregion is outside of the raster bounds.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ewidth\u003c/code\u003e or \n\u003ccode\u003eheight\u003c/code\u003e is less than or equal to zero, or computing any of \n\u003ccode\u003eparentX + width\u003c/code\u003e, \n\u003ccode\u003eparentY + height\u003c/code\u003e, \n\u003ccode\u003echildMinX + width\u003c/code\u003e, or \n\u003ccode\u003echildMinY + height\u003c/code\u003e results in integer overflow"
        ],
        "return": [
          "a new \n\u003ccode\u003eRaster\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.Rectangle",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBounds",
      "comment": "Returns the bounding Rectangle of this Raster. This function returns the same information as getMinX/MinY/Width/Height.",
      "tagMap": {
        "return": [
          "the bounding box of this \n\u003ccode\u003eRaster\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getMinX",
      "comment": "Returns the minimum valid X coordinate of the Raster.",
      "tagMap": {
        "return": [
          "the minimum x coordinate of this \n\u003ccode\u003eRaster\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getMinY",
      "comment": "Returns the minimum valid Y coordinate of the Raster.",
      "tagMap": {
        "return": [
          "the minimum y coordinate of this \n\u003ccode\u003eRaster\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getWidth",
      "comment": "Returns the width in pixels of the Raster.",
      "tagMap": {
        "return": [
          "the width of this \n\u003ccode\u003eRaster\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getHeight",
      "comment": "Returns the height in pixels of the Raster.",
      "tagMap": {
        "return": [
          "the height of this \n\u003ccode\u003eRaster\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getNumBands",
      "comment": "Returns the number of bands (samples per pixel) in this Raster.",
      "tagMap": {
        "return": [
          "the number of bands of this \n\u003ccode\u003eRaster\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getNumDataElements",
      "comment": "Returns the number of data elements needed to transfer one pixel via the getDataElements and setDataElements methods. When pixels are transferred via these methods, they may be transferred in a packed or unpacked format, depending on the implementation of the underlying SampleModel. Using these methods, pixels are transferred as an array of getNumDataElements() elements of a primitive type given by getTransferType(). The TransferType may or may not be the same as the storage data type of the DataBuffer.",
      "tagMap": {
        "return": [
          "the number of data elements."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getTransferType",
      "comment": "Returns the TransferType used to transfer pixels via the getDataElements and setDataElements methods. When pixels are transferred via these methods, they may be transferred in a packed or unpacked format, depending on the implementation of the underlying SampleModel. Using these methods, pixels are transferred as an array of getNumDataElements() elements of a primitive type given by getTransferType(). The TransferType may or may not be the same as the storage data type of the DataBuffer. The TransferType will be one of the types defined in DataBuffer.",
      "tagMap": {
        "return": [
          "this transfer type."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.DataBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDataBuffer",
      "comment": "Returns the DataBuffer associated with this Raster.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eDataBuffer\u003c/code\u003e of this \n\u003ccode\u003eRaster\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.SampleModel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSampleModel",
      "comment": "Returns the SampleModel that describes the layout of the image data.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eSampleModel\u003c/code\u003e of this \n\u003ccode\u003eRaster\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "outData"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDataElements",
      "comment": "Returns data for a single pixel in a primitive array of type TransferType. For image data supported by the Java 2D(tm) API, this will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE. Data may be returned in a packed format, thus increasing efficiency for data transfers. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed. A ClassCastException will be thrown if the input object is non null and references anything other than an array of TransferType.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/SampleModel.html#getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)\"\u003e\u003ccode\u003eSampleModel.getDataElements(int, int, Object, DataBuffer)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The X coordinate of the pixel location",
          "\u003ccode\u003ey\u003c/code\u003e - The Y coordinate of the pixel location",
          "\u003ccode\u003eoutData\u003c/code\u003e - An object reference to an array of type defined by getTransferType() and length getNumDataElements(). If null, an array of appropriate type and size will be allocated"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the coordinates are not in bounds, or if outData is too small to hold the output."
        ],
        "return": [
          "An object reference to an array of type defined by getTransferType() with the requested pixel data."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "outData"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDataElements",
      "comment": "Returns the pixel data for the specified rectangle of pixels in a primitive array of type TransferType. For image data supported by the Java 2D API, this will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE. Data may be returned in a packed format, thus increasing efficiency for data transfers. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed. A ClassCastException will be thrown if the input object is non null and references anything other than an array of TransferType.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/SampleModel.html#getDataElements(int,int,int,int,java.lang.Object,java.awt.image.DataBuffer)\"\u003e\u003ccode\u003eSampleModel.getDataElements(int, int, int, int, Object, DataBuffer)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The X coordinate of the upper-left pixel location",
          "\u003ccode\u003ey\u003c/code\u003e - The Y coordinate of the upper-left pixel location",
          "\u003ccode\u003ew\u003c/code\u003e - Width of the pixel rectangle",
          "\u003ccode\u003eh\u003c/code\u003e - Height of the pixel rectangle",
          "\u003ccode\u003eoutData\u003c/code\u003e - An object reference to an array of type defined by getTransferType() and length w*h*getNumDataElements(). If null, an array of appropriate type and size will be allocated."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the coordinates are not in bounds, or if outData is too small to hold the output."
        ],
        "return": [
          "An object reference to an array of type defined by getTransferType() with the requested pixel data."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "iArray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPixel",
      "comment": "Returns the samples in an array of int for the specified pixel. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The X coordinate of the pixel location",
          "\u003ccode\u003ey\u003c/code\u003e - The Y coordinate of the pixel location",
          "\u003ccode\u003eiArray\u003c/code\u003e - An optionally preallocated int array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the coordinates are not in bounds, or if iArray is too small to hold the output."
        ],
        "return": [
          "the samples for the specified pixel."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "fArray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPixel",
      "comment": "Returns the samples in an array of float for the specified pixel. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The X coordinate of the pixel location",
          "\u003ccode\u003ey\u003c/code\u003e - The Y coordinate of the pixel location",
          "\u003ccode\u003efArray\u003c/code\u003e - An optionally preallocated float array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the coordinates are not in bounds, or if fArray is too small to hold the output."
        ],
        "return": [
          "the samples for the specified pixel."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "dArray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPixel",
      "comment": "Returns the samples in an array of double for the specified pixel. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The X coordinate of the pixel location",
          "\u003ccode\u003ey\u003c/code\u003e - The Y coordinate of the pixel location",
          "\u003ccode\u003edArray\u003c/code\u003e - An optionally preallocated double array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the coordinates are not in bounds, or if dArray is too small to hold the output."
        ],
        "return": [
          "the samples for the specified pixel."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "iArray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPixels",
      "comment": "Returns an int array containing all samples for a rectangle of pixels, one sample per array element. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The X coordinate of the upper-left pixel location",
          "\u003ccode\u003ey\u003c/code\u003e - The Y coordinate of the upper-left pixel location",
          "\u003ccode\u003ew\u003c/code\u003e - Width of the pixel rectangle",
          "\u003ccode\u003eh\u003c/code\u003e - Height of the pixel rectangle",
          "\u003ccode\u003eiArray\u003c/code\u003e - An optionally pre-allocated int array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the coordinates are not in bounds, or if iArray is too small to hold the output."
        ],
        "return": [
          "the samples for the specified rectangle of pixels."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "fArray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPixels",
      "comment": "Returns a float array containing all samples for a rectangle of pixels, one sample per array element. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The X coordinate of the pixel location",
          "\u003ccode\u003ey\u003c/code\u003e - The Y coordinate of the pixel location",
          "\u003ccode\u003ew\u003c/code\u003e - Width of the pixel rectangle",
          "\u003ccode\u003eh\u003c/code\u003e - Height of the pixel rectangle",
          "\u003ccode\u003efArray\u003c/code\u003e - An optionally pre-allocated float array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the coordinates are not in bounds, or if fArray is too small to hold the output."
        ],
        "return": [
          "the samples for the specified rectangle of pixels."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "dArray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPixels",
      "comment": "Returns a double array containing all samples for a rectangle of pixels, one sample per array element. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The X coordinate of the upper-left pixel location",
          "\u003ccode\u003ey\u003c/code\u003e - The Y coordinate of the upper-left pixel location",
          "\u003ccode\u003ew\u003c/code\u003e - Width of the pixel rectangle",
          "\u003ccode\u003eh\u003c/code\u003e - Height of the pixel rectangle",
          "\u003ccode\u003edArray\u003c/code\u003e - An optionally pre-allocated double array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the coordinates are not in bounds, or if dArray is too small to hold the output."
        ],
        "return": [
          "the samples for the specified rectangle of pixels."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSample",
      "comment": "Returns the sample in a specified band for the pixel located at (x,y) as an int. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The X coordinate of the pixel location",
          "\u003ccode\u003ey\u003c/code\u003e - The Y coordinate of the pixel location",
          "\u003ccode\u003eb\u003c/code\u003e - The band to return"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the coordinates or the band index are not in bounds."
        ],
        "return": [
          "the sample in the specified band for the pixel at the specified coordinate."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSampleFloat",
      "comment": "Returns the sample in a specified band for the pixel located at (x,y) as a float. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The X coordinate of the pixel location",
          "\u003ccode\u003ey\u003c/code\u003e - The Y coordinate of the pixel location",
          "\u003ccode\u003eb\u003c/code\u003e - The band to return"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the coordinates or the band index are not in bounds."
        ],
        "return": [
          "the sample in the specified band for the pixel at the specified coordinate."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSampleDouble",
      "comment": "Returns the sample in a specified band for a pixel located at (x,y) as a double. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The X coordinate of the pixel location",
          "\u003ccode\u003ey\u003c/code\u003e - The Y coordinate of the pixel location",
          "\u003ccode\u003eb\u003c/code\u003e - The band to return"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the coordinates or the band index are not in bounds."
        ],
        "return": [
          "the sample in the specified band for the pixel at the specified coordinate."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "iArray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSamples",
      "comment": "Returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The X coordinate of the upper-left pixel location",
          "\u003ccode\u003ey\u003c/code\u003e - The Y coordinate of the upper-left pixel location",
          "\u003ccode\u003ew\u003c/code\u003e - Width of the pixel rectangle",
          "\u003ccode\u003eh\u003c/code\u003e - Height of the pixel rectangle",
          "\u003ccode\u003eb\u003c/code\u003e - The band to return",
          "\u003ccode\u003eiArray\u003c/code\u003e - An optionally pre-allocated int array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the coordinates or the band index are not in bounds, or if iArray is too small to hold the output."
        ],
        "return": [
          "the samples for the specified band for the specified rectangle of pixels."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "fArray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSamples",
      "comment": "Returns the samples for a specified band for the specified rectangle of pixels in a float array, one sample per array element. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The X coordinate of the upper-left pixel location",
          "\u003ccode\u003ey\u003c/code\u003e - The Y coordinate of the upper-left pixel location",
          "\u003ccode\u003ew\u003c/code\u003e - Width of the pixel rectangle",
          "\u003ccode\u003eh\u003c/code\u003e - Height of the pixel rectangle",
          "\u003ccode\u003eb\u003c/code\u003e - The band to return",
          "\u003ccode\u003efArray\u003c/code\u003e - An optionally pre-allocated float array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the coordinates or the band index are not in bounds, or if fArray is too small to hold the output."
        ],
        "return": [
          "the samples for the specified band for the specified rectangle of pixels."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "dArray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSamples",
      "comment": "Returns the samples for a specified band for a specified rectangle of pixels in a double array, one sample per array element. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The X coordinate of the upper-left pixel location",
          "\u003ccode\u003ey\u003c/code\u003e - The Y coordinate of the upper-left pixel location",
          "\u003ccode\u003ew\u003c/code\u003e - Width of the pixel rectangle",
          "\u003ccode\u003eh\u003c/code\u003e - Height of the pixel rectangle",
          "\u003ccode\u003eb\u003c/code\u003e - The band to return",
          "\u003ccode\u003edArray\u003c/code\u003e - An optionally pre-allocated double array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the coordinates or the band index are not in bounds, or if dArray is too small to hold the output."
        ],
        "return": [
          "the samples for the specified band for the specified rectangle of pixels."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.SampleModel",
            "type": "Class"
          },
          "field": {
            "name": "sampleModel"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a Raster with the given SampleModel. The Raster\u0027s upper left corner is origin and it is the same size as the SampleModel. A DataBuffer large enough to describe the Raster is automatically created.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esampleModel\u003c/code\u003e - The SampleModel that specifies the layout",
          "\u003ccode\u003eorigin\u003c/code\u003e - The Point that specified the origin"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if computing either \n\u003ccode\u003eorigin.x + sampleModel.getWidth()\u003c/code\u003e or \n\u003ccode\u003eorigin.y + sampleModel.getHeight()\u003c/code\u003e results in integer overflow",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - either \n\u003ccode\u003esampleModel\u003c/code\u003e or \n\u003ccode\u003eorigin\u003c/code\u003e is null"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.SampleModel",
            "type": "Class"
          },
          "field": {
            "name": "sampleModel"
          }
        },
        {
          "type": {
            "name": "java.awt.image.DataBuffer",
            "type": "Class"
          },
          "field": {
            "name": "dataBuffer"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a Raster with the given SampleModel and DataBuffer. The Raster\u0027s upper left corner is origin and it is the same size as the SampleModel. The DataBuffer is not initialized and must be compatible with SampleModel.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esampleModel\u003c/code\u003e - The SampleModel that specifies the layout",
          "\u003ccode\u003edataBuffer\u003c/code\u003e - The DataBuffer that contains the image data",
          "\u003ccode\u003eorigin\u003c/code\u003e - The Point that specifies the origin"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if computing either \n\u003ccode\u003eorigin.x + sampleModel.getWidth()\u003c/code\u003e or \n\u003ccode\u003eorigin.y + sampleModel.getHeight()\u003c/code\u003e results in integer overflow",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - either \n\u003ccode\u003esampleModel\u003c/code\u003e or \n\u003ccode\u003eorigin\u003c/code\u003e is null"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.SampleModel",
            "type": "Class"
          },
          "field": {
            "name": "sampleModel"
          }
        },
        {
          "type": {
            "name": "java.awt.image.DataBuffer",
            "type": "Class"
          },
          "field": {
            "name": "dataBuffer"
          }
        },
        {
          "type": {
            "name": "java.awt.Rectangle",
            "type": "Class"
          },
          "field": {
            "name": "aRegion"
          }
        },
        {
          "type": {
            "name": "java.awt.Point",
            "type": "Class"
          },
          "field": {
            "name": "sampleModelTranslate"
          }
        },
        {
          "type": {
            "name": "java.awt.image.Raster",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a Raster with the given SampleModel, DataBuffer, and parent. aRegion specifies the bounding rectangle of the new Raster. When translated into the base Raster\u0027s coordinate system, aRegion must be contained by the base Raster. (The base Raster is the Raster\u0027s ancestor which has no parent.) sampleModelTranslate specifies the sampleModelTranslateX and sampleModelTranslateY values of the new Raster. Note that this constructor should generally be called by other constructors or create methods, it should not be used directly.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esampleModel\u003c/code\u003e - The SampleModel that specifies the layout",
          "\u003ccode\u003edataBuffer\u003c/code\u003e - The DataBuffer that contains the image data",
          "\u003ccode\u003eaRegion\u003c/code\u003e - The Rectangle that specifies the image area",
          "\u003ccode\u003esampleModelTranslate\u003c/code\u003e - The Point that specifies the translation from SampleModel to Raster coordinates",
          "\u003ccode\u003eparent\u003c/code\u003e - The parent (if any) of this raster"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any of \n\u003ccode\u003esampleModel\u003c/code\u003e, \n\u003ccode\u003edataBuffer\u003c/code\u003e, \n\u003ccode\u003eaRegion\u003c/code\u003e or \n\u003ccode\u003esampleModelTranslate\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterFormatException.html\" title\u003d\"class in java.awt.image\"\u003eRasterFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eaRegion\u003c/code\u003e has width or height less than or equal to zero, or computing either \n\u003ccode\u003eaRegion.x + aRegion.width\u003c/code\u003e or \n\u003ccode\u003eaRegion.y + aRegion.height\u003c/code\u003e results in integer overflow"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.image.Raster",
  "comment": "A class representing a rectangular array of pixels. A Raster encapsulates a DataBuffer that stores the sample values and a SampleModel that describes how to locate a given sample value in a DataBuffer. \n\u003cp\u003e A Raster defines values for pixels occupying a particular rectangular area of the plane, not necessarily including (0, 0). The rectangle, known as the Raster\u0027s bounding rectangle and available by means of the getBounds method, is defined by minX, minY, width, and height values. The minX and minY values define the coordinate of the upper left corner of the Raster. References to pixels outside of the bounding rectangle may result in an exception being thrown, or may result in references to unintended elements of the Raster\u0027s associated DataBuffer. It is the user\u0027s responsibility to avoid accessing such pixels. \u003c/p\u003e\n\u003cp\u003e A SampleModel describes how samples of a Raster are stored in the primitive array elements of a DataBuffer. Samples may be stored one per data element, as in a PixelInterleavedSampleModel or BandedSampleModel, or packed several to an element, as in a SinglePixelPackedSampleModel or MultiPixelPackedSampleModel. The SampleModel is also controls whether samples are sign extended, allowing unsigned data to be stored in signed Java data types such as byte, short, and int. \u003c/p\u003e\n\u003cp\u003e Although a Raster may live anywhere in the plane, a SampleModel makes use of a simple coordinate system that starts at (0, 0). A Raster therefore contains a translation factor that allows pixel locations to be mapped between the Raster\u0027s coordinate system and that of the SampleModel. The translation from the SampleModel coordinate system to that of the Raster may be obtained by the getSampleModelTranslateX and getSampleModelTranslateY methods. \u003c/p\u003e\n\u003cp\u003e A Raster may share a DataBuffer with another Raster either by explicit construction or by the use of the createChild and createTranslatedChild methods. Rasters created by these methods can return a reference to the Raster they were created from by means of the getParent method. For a Raster that was not constructed by means of a call to createTranslatedChild or createChild, getParent will return null. \u003c/p\u003e\n\u003cp\u003e The createTranslatedChild method returns a new Raster that shares all of the data of the current Raster, but occupies a bounding rectangle of the same width and height but with a different starting point. For example, if the parent Raster occupied the region (10, 10) to (100, 100), and the translated Raster was defined to start at (50, 50), then pixel (20, 20) of the parent and pixel (60, 60) of the child occupy the same location in the DataBuffer shared by the two Rasters. In the first case, (-10, -10) should be added to a pixel coordinate to obtain the corresponding SampleModel coordinate, and in the second case (-50, -50) should be added. \u003c/p\u003e\n\u003cp\u003e The translation between a parent and child Raster may be determined by subtracting the child\u0027s sampleModelTranslateX and sampleModelTranslateY values from those of the parent. \u003c/p\u003e\n\u003cp\u003e The createChild method may be used to create a new Raster occupying only a subset of its parent\u0027s bounding rectangle (with the same or a translated coordinate system) or with a subset of the bands of its parent. \u003c/p\u003e\n\u003cp\u003e All constructors are protected. The correct way to create a Raster is to use one of the static create methods defined in this class. These methods create instances of Raster that use the standard Interleaved, Banded, and Packed SampleModels and that may be processed more efficiently than a Raster created by combining an externally generated SampleModel and DataBuffer.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/DataBuffer.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eDataBuffer\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/SampleModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eSampleModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/PixelInterleavedSampleModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003ePixelInterleavedSampleModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BandedSampleModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eBandedSampleModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/SinglePixelPackedSampleModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eSinglePixelPackedSampleModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/MultiPixelPackedSampleModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eMultiPixelPackedSampleModel\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}