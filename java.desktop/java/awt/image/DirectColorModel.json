{
  "packageName": "java.awt.image",
  "simpleName": "DirectColorModel",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.image.PackedColorModel",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getRedMask",
      "comment": "Returns the mask indicating which bits in an int pixel representation contain the red color component.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the mask, which indicates which bits of the \n\u003ccode\u003eint\u003c/code\u003e pixel representation contain the red color sample."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getGreenMask",
      "comment": "Returns the mask indicating which bits in an int pixel representation contain the green color component.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the mask, which indicates which bits of the \n\u003ccode\u003eint\u003c/code\u003e pixel representation contain the green color sample."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getBlueMask",
      "comment": "Returns the mask indicating which bits in an int pixel representation contain the blue color component.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the mask, which indicates which bits of the \n\u003ccode\u003eint\u003c/code\u003e pixel representation contain the blue color sample."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getAlphaMask",
      "comment": "Returns the mask indicating which bits in an int pixel representation contain the alpha component.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the mask, which indicates which bits of the \n\u003ccode\u003eint\u003c/code\u003e pixel representation contain the alpha sample."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getRed",
      "comment": "Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. A color conversion is done if necessary. The pixel value is specified as an int. The returned value is a non pre-multiplied value. Thus, if the alpha is premultiplied, this method divides it out before returning the value. If the alpha value is 0, for example, the red value is 0.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getRed(int)\"\u003egetRed\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epixel\u003c/code\u003e - the specified pixel"
        ],
        "return": [
          "the red color component for the specified pixel, from 0 to 255 in the sRGB \n\u003ccode\u003eColorSpace\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getGreen",
      "comment": "Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. A color conversion is done if necessary. The pixel value is specified as an int. The returned value is a non pre-multiplied value. Thus, if the alpha is premultiplied, this method divides it out before returning the value. If the alpha value is 0, for example, the green value is 0.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getGreen(int)\"\u003egetGreen\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epixel\u003c/code\u003e - the specified pixel"
        ],
        "return": [
          "the green color component for the specified pixel, from 0 to 255 in the sRGB \n\u003ccode\u003eColorSpace\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getBlue",
      "comment": "Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. A color conversion is done if necessary. The pixel value is specified as an int. The returned value is a non pre-multiplied value. Thus, if the alpha is premultiplied, this method divides it out before returning the value. If the alpha value is 0, for example, the blue value is 0.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getBlue(int)\"\u003egetBlue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epixel\u003c/code\u003e - the specified pixel"
        ],
        "return": [
          "the blue color component for the specified pixel, from 0 to 255 in the sRGB \n\u003ccode\u003eColorSpace\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getAlpha",
      "comment": "Returns the alpha component for the specified pixel, scaled from 0 to 255. The pixel value is specified as an int.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getAlpha(int)\"\u003egetAlpha\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epixel\u003c/code\u003e - the specified pixel"
        ],
        "return": [
          "the value of the alpha component of \n\u003ccode\u003epixel\u003c/code\u003e from 0 to 255."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getRGB",
      "comment": "Returns the color/alpha components of the pixel in the default RGB color model format. A color conversion is done if necessary. The pixel value is specified as an int. The returned value is in a non pre-multiplied format. Thus, if the alpha is premultiplied, this method divides it out of the color components. If the alpha value is 0, for example, the color values are each 0.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getRGBdefault()\"\u003e\u003ccode\u003eColorModel.getRGBdefault()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getRGB(int)\"\u003egetRGB\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epixel\u003c/code\u003e - the specified pixel"
        ],
        "return": [
          "the RGB value of the color/alpha components of the specified pixel."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRed",
      "comment": "Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. A color conversion is done if necessary. The pixel value is specified by an array of data elements of type transferType passed in as an object reference. The returned value is a non pre-multiplied value. Thus, if the alpha is premultiplied, this method divides it out before returning the value. If the alpha value is 0, for example, the red value is 0. If inData is not a primitive array of type transferType, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if inData is not large enough to hold a pixel value for this ColorModel. Since DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported transferType. An UnsupportedOperationException is thrown if this transferType is not supported by this ColorModel.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getRed(java.lang.Object)\"\u003egetRed\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003einData\u003c/code\u003e - the array containing the pixel value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einData\u003c/code\u003e is not large enough to hold a pixel value for this color model",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einData\u003c/code\u003e is not a primitive array of type \n\u003ccode\u003etransferType\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003etransferType\u003c/code\u003e is not supported by this color model"
        ],
        "return": [
          "the value of the red component of the specified pixel."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGreen",
      "comment": "Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. A color conversion is done if necessary. The pixel value is specified by an array of data elements of type transferType passed in as an object reference. The returned value is a non pre-multiplied value. Thus, if the alpha is premultiplied, this method divides it out before returning the value. If the alpha value is 0, for example, the green value is 0. If inData is not a primitive array of type transferType, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if inData is not large enough to hold a pixel value for this ColorModel. Since DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported transferType. An UnsupportedOperationException is thrown if this transferType is not supported by this ColorModel.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getGreen(java.lang.Object)\"\u003egetGreen\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003einData\u003c/code\u003e - the array containing the pixel value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einData\u003c/code\u003e is not large enough to hold a pixel value for this color model",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einData\u003c/code\u003e is not a primitive array of type \n\u003ccode\u003etransferType\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003etransferType\u003c/code\u003e is not supported by this color model"
        ],
        "return": [
          "the value of the green component of the specified pixel."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBlue",
      "comment": "Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. A color conversion is done if necessary. The pixel value is specified by an array of data elements of type transferType passed in as an object reference. The returned value is a non pre-multiplied value. Thus, if the alpha is premultiplied, this method divides it out before returning the value. If the alpha value is 0, for example, the blue value is 0. If inData is not a primitive array of type transferType, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if inData is not large enough to hold a pixel value for this ColorModel. Since DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported transferType. An UnsupportedOperationException is thrown if this transferType is not supported by this ColorModel.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getBlue(java.lang.Object)\"\u003egetBlue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003einData\u003c/code\u003e - the array containing the pixel value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einData\u003c/code\u003e is not large enough to hold a pixel value for this color model",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einData\u003c/code\u003e is not a primitive array of type \n\u003ccode\u003etransferType\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003etransferType\u003c/code\u003e is not supported by this color model"
        ],
        "return": [
          "the value of the blue component of the specified pixel."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAlpha",
      "comment": "Returns the alpha component for the specified pixel, scaled from 0 to 255. The pixel value is specified by an array of data elements of type transferType passed in as an object reference. If inData is not a primitive array of type transferType, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if inData is not large enough to hold a pixel value for this ColorModel. Since DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported transferType. If this transferType is not supported, an UnsupportedOperationException is thrown.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getAlpha(java.lang.Object)\"\u003egetAlpha\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003einData\u003c/code\u003e - the specified pixel"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einData\u003c/code\u003e is not a primitive array of type \n\u003ccode\u003etransferType\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einData\u003c/code\u003e is not large enough to hold a pixel value for this \n\u003ccode\u003eColorModel\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003etranferType\u003c/code\u003e is not supported by this \n\u003ccode\u003eColorModel\u003c/code\u003e"
        ],
        "return": [
          "the alpha component of the specified pixel, scaled from 0 to 255."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRGB",
      "comment": "Returns the color/alpha components for the specified pixel in the default RGB color model format. A color conversion is done if necessary. The pixel value is specified by an array of data elements of type transferType passed in as an object reference. If inData is not a primitive array of type transferType, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if inData is not large enough to hold a pixel value for this ColorModel. The returned value is in a non pre-multiplied format. Thus, if the alpha is premultiplied, this method divides it out of the color components. If the alpha value is 0, for example, the color values is 0. Since DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported transferType.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getRGBdefault()\"\u003e\u003ccode\u003eColorModel.getRGBdefault()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getRGB(java.lang.Object)\"\u003egetRGB\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003einData\u003c/code\u003e - the specified pixel"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003etransferType\u003c/code\u003e is not supported by this \n\u003ccode\u003eColorModel\u003c/code\u003e"
        ],
        "return": [
          "the color and alpha components of the specified pixel."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDataElements",
      "comment": "Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model. This array can then be passed to the setDataElements method of a WritableRaster object. If the pixel variable is null, a new array is allocated. If pixel is not null, it must be a primitive array of type transferType; otherwise, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if pixel is not large enough to hold a pixel value for this ColorModel. The pixel array is returned. Since DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported transferType.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/WritableRaster.html#setDataElements(int,int,java.lang.Object)\"\u003e\u003ccode\u003eWritableRaster.setDataElements(int, int, java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/SampleModel.html#setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)\"\u003e\u003ccode\u003eSampleModel.setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getDataElements(int,java.lang.Object)\"\u003egetDataElements\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ergb\u003c/code\u003e - the integer pixel representation in the default RGB color model",
          "\u003ccode\u003epixel\u003c/code\u003e - the specified pixel"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epixel\u003c/code\u003e is not a primitive array of type \n\u003ccode\u003etransferType\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epixel\u003c/code\u003e is not large enough to hold a pixel value for this \n\u003ccode\u003eColorModel\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003etransferType\u003c/code\u003e is not supported by this \n\u003ccode\u003eColorModel\u003c/code\u003e"
        ],
        "return": [
          "an array representation of the specified pixel in this \n\u003ccode\u003eColorModel\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getComponents",
      "comment": "Returns an array of unnormalized color/alpha components given a pixel in this ColorModel. The pixel value is specified as an int. If the components array is null, a new array is allocated. The components array is returned. Color/alpha components are stored in the components array starting at offset, even if the array is allocated by this method. An ArrayIndexOutOfBoundsException is thrown if the components array is not null and is not large enough to hold all the color and alpha components, starting at offset.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getComponents(int,int%5B%5D,int)\"\u003egetComponents\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epixel\u003c/code\u003e - the specified pixel",
          "\u003ccode\u003ecomponents\u003c/code\u003e - the array to receive the color and alpha components of the specified pixel",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the \n\u003ccode\u003ecomponents\u003c/code\u003e array at which to start storing the color and alpha components"
        ],
        "return": [
          "an array containing the color and alpha components of the specified pixel starting at the specified offset."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getComponents",
      "comment": "Returns an array of unnormalized color/alpha components given a pixel in this ColorModel. The pixel value is specified by an array of data elements of type transferType passed in as an object reference. If pixel is not a primitive array of type transferType, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if pixel is not large enough to hold a pixel value for this ColorModel. If the components array is null, a new array is allocated. The components array is returned. Color/alpha components are stored in the components array starting at offset, even if the array is allocated by this method. An ArrayIndexOutOfBoundsException is thrown if the components array is not null and is not large enough to hold all the color and alpha components, starting at offset. Since DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported transferType.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getComponents(java.lang.Object,int%5B%5D,int)\"\u003egetComponents\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epixel\u003c/code\u003e - the specified pixel",
          "\u003ccode\u003ecomponents\u003c/code\u003e - the array to receive the color and alpha components of the specified pixel",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset into the \n\u003ccode\u003ecomponents\u003c/code\u003e array at which to start storing the color and alpha components"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epixel\u003c/code\u003e is not a primitive array of type \n\u003ccode\u003etransferType\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epixel\u003c/code\u003e is not large enough to hold a pixel value for this \n\u003ccode\u003eColorModel\u003c/code\u003e, or if \n\u003ccode\u003ecomponents\u003c/code\u003e is not \n\u003ccode\u003enull\u003c/code\u003e and is not large enough to hold all the color and alpha components, starting at \n\u003ccode\u003eoffset\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003etransferType\u003c/code\u003e is not supported by this color model"
        ],
        "return": [
          "an array containing the color and alpha components of the specified pixel starting at the specified offset."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "createCompatibleWritableRaster",
      "comment": "Creates a WritableRaster with the specified width and height that has a data layout (SampleModel) compatible with this ColorModel.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/WritableRaster.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eWritableRaster\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/SampleModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eSampleModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#createCompatibleWritableRaster(int,int)\"\u003ecreateCompatibleWritableRaster\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ew\u003c/code\u003e - the width to apply to the new \n\u003ccode\u003eWritableRaster\u003c/code\u003e",
          "\u003ccode\u003eh\u003c/code\u003e - the height to apply to the new \n\u003ccode\u003eWritableRaster\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ew\u003c/code\u003e or \n\u003ccode\u003eh\u003c/code\u003e is less than or equal to zero"
        ],
        "return": [
          "a \n\u003ccode\u003eWritableRaster\u003c/code\u003e object with the specified width and height."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDataElement",
      "comment": "Returns a pixel value represented as an int in this ColorModel, given an array of unnormalized color/alpha components. An ArrayIndexOutOfBoundsException is thrown if the components array is not large enough to hold all the color and alpha components, starting at offset.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getDataElement(int%5B%5D,int)\"\u003egetDataElement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomponents\u003c/code\u003e - an array of unnormalized color and alpha components",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index into \n\u003ccode\u003ecomponents\u003c/code\u003e at which to begin retrieving the color and alpha components"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ecomponents\u003c/code\u003e array is not large enough to hold all of the color and alpha components starting at \n\u003ccode\u003eoffset\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eint\u003c/code\u003e pixel value in this \n\u003ccode\u003eColorModel\u003c/code\u003e corresponding to the specified components."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDataElements",
      "comment": "Returns a data element array representation of a pixel in this ColorModel, given an array of unnormalized color/alpha components. This array can then be passed to the setDataElements method of a WritableRaster object. An ArrayIndexOutOfBoundsException is thrown if the components array is not large enough to hold all the color and alpha components, starting at offset. If the obj variable is null, a new array is allocated. If obj is not null, it must be a primitive array of type transferType; otherwise, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if obj is not large enough to hold a pixel value for this ColorModel. Since DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported transferType.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/WritableRaster.html#setDataElements(int,int,java.lang.Object)\"\u003e\u003ccode\u003eWritableRaster.setDataElements(int, int, java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/SampleModel.html#setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)\"\u003e\u003ccode\u003eSampleModel.setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getDataElements(int%5B%5D,int,java.lang.Object)\"\u003egetDataElements\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecomponents\u003c/code\u003e - an array of unnormalized color and alpha components",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index into \n\u003ccode\u003ecomponents\u003c/code\u003e at which to begin retrieving color and alpha components",
          "\u003ccode\u003eobj\u003c/code\u003e - the \n\u003ccode\u003eObject\u003c/code\u003e representing an array of color and alpha components"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eobj\u003c/code\u003e is not a primitive array of type \n\u003ccode\u003etransferType\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eobj\u003c/code\u003e is not large enough to hold a pixel value for this \n\u003ccode\u003eColorModel\u003c/code\u003e or the \n\u003ccode\u003ecomponents\u003c/code\u003e array is not large enough to hold all of the color and alpha components starting at \n\u003ccode\u003eoffset\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003etransferType\u003c/code\u003e is not supported by this color model"
        ],
        "return": [
          "an \n\u003ccode\u003eObject\u003c/code\u003e representing an array of color and alpha components."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.ColorModel",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "coerceData",
      "comment": "Forces the raster data to match the state specified in the isAlphaPremultiplied variable, assuming the data is currently correctly described by this ColorModel. It may multiply or divide the color raster data by alpha, or do nothing if the data is in the correct state. If the data needs to be coerced, this method will also return an instance of this ColorModel with the isAlphaPremultiplied flag set appropriately. This method will throw a UnsupportedOperationException if this transferType is not supported by this ColorModel. Since ColorModel can be subclassed, subclasses inherit the implementation of this method and if they don\u0027t override it then they throw an exception if they use an unsupported transferType.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#coerceData(java.awt.image.WritableRaster,boolean)\"\u003ecoerceData\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eraster\u003c/code\u003e - the \n\u003ccode\u003eWritableRaster\u003c/code\u003e data",
          "\u003ccode\u003eisAlphaPremultiplied\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the alpha is premultiplied; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003etransferType\u003c/code\u003e is not supported by this color model"
        ],
        "return": [
          "a \n\u003ccode\u003eColorModel\u003c/code\u003e object that represents the coerced data."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCompatibleRaster",
      "comment": "Returns true if raster is compatible with this ColorModel and false if it is not.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#isCompatibleRaster(java.awt.image.Raster)\"\u003eisCompatibleRaster\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eraster\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/Raster.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eRaster\u003c/code\u003e\u003c/a\u003e object to test for compatibility"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003eraster\u003c/code\u003e is compatible with this \n\u003ccode\u003eColorModel\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a String that represents this DirectColorModel.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e representing this \n\u003ccode\u003eDirectColorModel\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "bits",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "rmask",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "gmask",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "bmask",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a DirectColorModel from the specified masks that indicate which bits in an int pixel representation contain the red, green and blue color samples. As pixel values do not contain alpha information, all pixels are treated as opaque, which means that alpha \u003d 1.0. All of the bits in each mask must be contiguous and fit in the specified number of least significant bits of an int pixel representation. The ColorSpace is the default sRGB space. The transparency value is Transparency.OPAQUE. The transfer type is the smallest of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT that can hold a single pixel.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebits\u003c/code\u003e - the number of bits in the pixel values; for example, the sum of the number of bits in the masks.",
          "\u003ccode\u003ermask\u003c/code\u003e - specifies a mask indicating which bits in an integer pixel contain the red component",
          "\u003ccode\u003egmask\u003c/code\u003e - specifies a mask indicating which bits in an integer pixel contain the green component",
          "\u003ccode\u003ebmask\u003c/code\u003e - specifies a mask indicating which bits in an integer pixel contain the blue component"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "bits",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "rmask",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "gmask",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "bmask",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "amask",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a DirectColorModel from the specified masks that indicate which bits in an int pixel representation contain the red, green and blue color samples and the alpha sample, if present. If amask is 0, pixel values do not contain alpha information and all pixels are treated as opaque, which means that alpha \u003d 1.0. All of the bits in each mask must be contiguous and fit in the specified number of least significant bits of an int pixel representation. Alpha, if present, is not premultiplied. The ColorSpace is the default sRGB space. The transparency value is Transparency.OPAQUE if no alpha is present, or Transparency.TRANSLUCENT otherwise. The transfer type is the smallest of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT that can hold a single pixel.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebits\u003c/code\u003e - the number of bits in the pixel values; for example, the sum of the number of bits in the masks.",
          "\u003ccode\u003ermask\u003c/code\u003e - specifies a mask indicating which bits in an integer pixel contain the red component",
          "\u003ccode\u003egmask\u003c/code\u003e - specifies a mask indicating which bits in an integer pixel contain the green component",
          "\u003ccode\u003ebmask\u003c/code\u003e - specifies a mask indicating which bits in an integer pixel contain the blue component",
          "\u003ccode\u003eamask\u003c/code\u003e - specifies a mask indicating which bits in an integer pixel contain the alpha component"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.color.ColorSpace",
            "type": "Class"
          },
          "name": "space",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "bits",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "rmask",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "gmask",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "bmask",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "amask",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isAlphaPremultiplied",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "transferType",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a DirectColorModel from the specified parameters. Color components are in the specified ColorSpace, which must be of type ColorSpace.TYPE_RGB and have minimum normalized component values which are all 0.0 and maximum values which are all 1.0. The masks specify which bits in an int pixel representation contain the red, green and blue color samples and the alpha sample, if present. If amask is 0, pixel values do not contain alpha information and all pixels are treated as opaque, which means that alpha \u003d 1.0. All of the bits in each mask must be contiguous and fit in the specified number of least significant bits of an int pixel representation. If there is alpha, the boolean isAlphaPremultiplied specifies how to interpret color and alpha samples in pixel values. If the boolean is true, color samples are assumed to have been multiplied by the alpha sample. The transparency value is Transparency.OPAQUE, if no alpha is present, or Transparency.TRANSLUCENT otherwise. The transfer type is the type of primitive array used to represent pixel values and must be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003espace\u003c/code\u003e - the specified \n\u003ccode\u003eColorSpace\u003c/code\u003e",
          "\u003ccode\u003ebits\u003c/code\u003e - the number of bits in the pixel values; for example, the sum of the number of bits in the masks.",
          "\u003ccode\u003ermask\u003c/code\u003e - specifies a mask indicating which bits in an integer pixel contain the red component",
          "\u003ccode\u003egmask\u003c/code\u003e - specifies a mask indicating which bits in an integer pixel contain the green component",
          "\u003ccode\u003ebmask\u003c/code\u003e - specifies a mask indicating which bits in an integer pixel contain the blue component",
          "\u003ccode\u003eamask\u003c/code\u003e - specifies a mask indicating which bits in an integer pixel contain the alpha component",
          "\u003ccode\u003eisAlphaPremultiplied\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if color samples are premultiplied by the alpha sample; \n\u003ccode\u003efalse\u003c/code\u003e otherwise",
          "\u003ccode\u003etransferType\u003c/code\u003e - the type of array used to represent pixel values"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003espace\u003c/code\u003e is not a TYPE_RGB space or if the min/max normalized component values are not 0.0/1.0."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.image.DirectColorModel",
  "comment": "The \n\u003ccode\u003eDirectColorModel\u003c/code\u003e class is a \n\u003ccode\u003eColorModel\u003c/code\u003e class that works with pixel values that represent RGB color and alpha information as separate samples and that pack all samples for a single pixel into a single int, short, or byte quantity. This class can be used only with ColorSpaces of type ColorSpace.TYPE_RGB. In addition, for each component of the ColorSpace, the minimum normalized component value obtained via the \n\u003ccode\u003egetMinValue()\u003c/code\u003e method of ColorSpace must be 0.0, and the maximum value obtained via the \n\u003ccode\u003egetMaxValue()\u003c/code\u003e method must be 1.0 (these min/max values are typical for RGB spaces). There must be three color samples in the pixel values and there can be a single alpha sample. For those methods that use a primitive array pixel representation of type \n\u003ccode\u003etransferType\u003c/code\u003e, the array length is always one. The transfer types supported are DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, and DataBuffer.TYPE_INT. Color and alpha samples are stored in the single element of the array in bits indicated by bit masks. Each bit mask must be contiguous and masks must not overlap. The same masks apply to the single int pixel representation used by other methods. The correspondence of masks and color/alpha samples is as follows: \n\u003cul\u003e \n \u003cli\u003e Masks are identified by indices running from 0 through 2 if no alpha is present, or 3 if an alpha is present. \u003c/li\u003e\n \u003cli\u003e The first three indices refer to color samples; index 0 corresponds to red, index 1 to green, and index 2 to blue. \u003c/li\u003e\n \u003cli\u003e Index 3 corresponds to the alpha sample, if present. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e The translation from pixel values to color/alpha components for display or processing purposes is a one-to-one correspondence of samples to components. A \u003ccode\u003eDirectColorModel\u003c/code\u003e is typically used with image data which uses masks to define packed samples. For example, a \u003ccode\u003eDirectColorModel\u003c/code\u003e can be used in conjunction with a \u003ccode\u003eSinglePixelPackedSampleModel\u003c/code\u003e to construct a \u003ca href\u003d\"BufferedImage.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eBufferedImage\u003c/code\u003e\u003c/a\u003e. Normally the masks used by the \u003ca href\u003d\"SampleModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eSampleModel\u003c/code\u003e\u003c/a\u003e and the \u003ccode\u003eColorModel\u003c/code\u003e would be the same. However, if they are different, the color interpretation of pixel data will be done according to the masks of the \u003ccode\u003eColorModel\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e A single int pixel representation is valid for all objects of this class, since it is always possible to represent pixel values used with this class in a single int. Therefore, methods which use this representation will not throw an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e due to an invalid pixel value. \u003c/p\u003e\n\u003cp\u003e This color model is similar to an X11 TrueColor visual. The default RGB ColorModel specified by the \u003ca href\u003d\"ColorModel.html#getRGBdefault()\"\u003e\u003ccode\u003egetRGBdefault\u003c/code\u003e\u003c/a\u003e method is a \u003ccode\u003eDirectColorModel\u003c/code\u003e with the following parameters: \u003c/p\u003e\n\u003cpre\u003e Number of bits:        32\n Red mask:              0x00ff0000\n Green mask:            0x0000ff00\n Blue mask:             0x000000ff\n Alpha mask:            0xff000000\n Color space:           sRGB\n isAlphaPremultiplied:  False\n Transparency:          Transparency.TRANSLUCENT\n transferType:          DataBuffer.TYPE_INT\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Many of the methods in this class are final. This is because the underlying native graphics code makes assumptions about the layout and operation of this class and those assumptions are reflected in the implementations of the methods here that are marked final. You can subclass this class for other reasons, but you cannot override or modify the behavior of those methods.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eColorModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/color/ColorSpace.html\" title\u003d\"class in java.awt.color\"\u003e\u003ccode\u003eColorSpace\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/SinglePixelPackedSampleModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eSinglePixelPackedSampleModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eBufferedImage\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getRGBdefault()\"\u003e\u003ccode\u003eColorModel.getRGBdefault()\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}