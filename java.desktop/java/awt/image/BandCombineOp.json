{
  "packageName": "java.awt.image",
  "simpleName": "BandCombineOp",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "float",
        "type": "Class",
        "arrayDimensions": 2
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getMatrix",
      "comment": "Returns a copy of the linear combination matrix.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The matrix associated with this band combine operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.Raster",
            "type": "Class"
          },
          "name": "src",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.WritableRaster",
            "type": "Class"
          },
          "name": "dst",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "filter",
      "comment": "Transforms the Raster using the matrix specified in the constructor. An IllegalArgumentException may be thrown if the number of bands in the source or destination is incompatible with the matrix. See the class comments for more details. If the destination is null, it will be created with a number of bands equalling the number of rows in the matrix. No exception is thrown if the operation causes a data overflow.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterOp.html#filter(java.awt.image.Raster,java.awt.image.WritableRaster)\"\u003efilter\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterOp.html\" title\u003d\"interface in java.awt.image\"\u003eRasterOp\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The \n\u003ccode\u003eRaster\u003c/code\u003e to be filtered.",
          "\u003ccode\u003edst\u003c/code\u003e - The \n\u003ccode\u003eRaster\u003c/code\u003e in which to store the results of the filter operation."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the number of bands in the source or destination is incompatible with the matrix."
        ],
        "return": [
          "The filtered \n\u003ccode\u003eRaster\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Rectangle2D",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.Raster",
            "type": "Class"
          },
          "name": "src",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getBounds2D",
      "comment": "Returns the bounding box of the transformed destination. Since this is not a geometric operation, the bounding box is the same for the source and destination. An IllegalArgumentException may be thrown if the number of bands in the source is incompatible with the matrix. See the class comments for more details.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterOp.html#getBounds2D(java.awt.image.Raster)\"\u003egetBounds2D\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterOp.html\" title\u003d\"interface in java.awt.image\"\u003eRasterOp\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The \n\u003ccode\u003eRaster\u003c/code\u003e to be filtered."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the number of bands in the source is incompatible with the matrix."
        ],
        "return": [
          "The \n\u003ccode\u003eRectangle2D\u003c/code\u003e representing the destination image\u0027s bounding box."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.image.Raster",
            "type": "Class"
          },
          "name": "src",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createCompatibleDestRaster",
      "comment": "Creates a zeroed destination Raster with the correct size and number of bands. An IllegalArgumentException may be thrown if the number of bands in the source is incompatible with the matrix. See the class comments for more details.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterOp.html#createCompatibleDestRaster(java.awt.image.Raster)\"\u003ecreateCompatibleDestRaster\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterOp.html\" title\u003d\"interface in java.awt.image\"\u003eRasterOp\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The \n\u003ccode\u003eRaster\u003c/code\u003e to be filtered."
        ],
        "return": [
          "The zeroed destination \n\u003ccode\u003eRaster\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.geom.Point2D",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "name": "srcPt",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.geom.Point2D",
            "type": "Class"
          },
          "name": "dstPt",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getPoint2D",
      "comment": "Returns the location of the corresponding destination point given a point in the source Raster. If dstPt is specified, it is used to hold the return value. Since this is not a geometric operation, the point returned is the same as the specified srcPt.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterOp.html#getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)\"\u003egetPoint2D\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterOp.html\" title\u003d\"interface in java.awt.image\"\u003eRasterOp\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esrcPt\u003c/code\u003e - The \n\u003ccode\u003ePoint2D\u003c/code\u003e that represents the point in the source \n\u003ccode\u003eRaster\u003c/code\u003e",
          "\u003ccode\u003edstPt\u003c/code\u003e - The \n\u003ccode\u003ePoint2D\u003c/code\u003e in which to store the result."
        ],
        "return": [
          "The \n\u003ccode\u003ePoint2D\u003c/code\u003e in the destination image that corresponds to the specified point in the source image."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.RenderingHints",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getRenderingHints",
      "comment": "Returns the rendering hints for this operation.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterOp.html#getRenderingHints()\"\u003egetRenderingHints\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/RasterOp.html\" title\u003d\"interface in java.awt.image\"\u003eRasterOp\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The \n\u003ccode\u003eRenderingHints\u003c/code\u003e object associated with this operation. Returns null if no hints have been set."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class",
            "arrayDimensions": 2
          },
          "name": "matrix",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.awt.RenderingHints",
            "type": "Class"
          },
          "name": "hints",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a BandCombineOp with the specified matrix. The width of the matrix must be equal to the number of bands in the source Raster, optionally plus one. If there is one more column in the matrix than the number of bands, there is an implied 1 at the end of the vector of band samples representing a pixel. The height of the matrix must be equal to the number of bands in the destination. The first subscript is the row index and the second is the column index. This operation uses none of the currently defined rendering hints; the RenderingHints argument can be null.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ematrix\u003c/code\u003e - The matrix to use for the band combine operation.",
          "\u003ccode\u003ehints\u003c/code\u003e - The \n\u003ccode\u003eRenderingHints\u003c/code\u003e object for this operation. Not currently used so it can be null."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.awt.image.BandCombineOp",
  "comment": "This class performs an arbitrary linear combination of the bands in a \n\u003ccode\u003eRaster\u003c/code\u003e, using a specified matrix. \n\u003cp\u003e The width of the matrix must be equal to the number of bands in the source \u003ccode\u003eRaster\u003c/code\u003e, optionally plus one. If there is one more column in the matrix than the number of bands, there is an implied 1 at the end of the vector of band samples representing a pixel. The height of the matrix must be equal to the number of bands in the destination. \u003c/p\u003e\n\u003cp\u003e For example, a 3-banded \u003ccode\u003eRaster\u003c/code\u003e might have the following transformation applied to each pixel in order to invert the second band of the \u003ccode\u003eRaster\u003c/code\u003e. \u003c/p\u003e\n\u003cpre\u003e   [ 1.0   0.0   0.0    0.0  ]     [ b1 ]\n   [ 0.0  -1.0   0.0  255.0  ]  x  [ b2 ]\n   [ 0.0   0.0   1.0    0.0  ]     [ b3 ]\n                                   [ 1 ]\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Note that the source and destination can be the same object.\u003c/p\u003e",
  "tagMap": {}
}