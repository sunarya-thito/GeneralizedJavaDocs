{
  "packageName": "java.awt.image",
  "simpleName": "PackedColorModel",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.awt.image.ColorModel",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getMask",
      "comment": "Returns the mask indicating which bits in a pixel contain the specified color/alpha sample. For color samples, index corresponds to the placement of color sample names in the color space. Thus, an index equal to 0 for a CMYK ColorSpace would correspond to Cyan and an index equal to 1 would correspond to Magenta. If there is alpha, the alpha index would be:       alphaIndex \u003d numComponents() - 1;",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the specified color or alpha sample"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is greater than the number of components minus 1 in this \n\u003ccode\u003ePackedColorModel\u003c/code\u003e or if \n\u003ccode\u003eindex\u003c/code\u003e is less than zero"
        ],
        "return": [
          "the mask, which indicates which bits of the \n\u003ccode\u003eint\u003c/code\u003e pixel representation contain the color or alpha sample specified by \n\u003ccode\u003eindex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getMasks",
      "comment": "Returns a mask array indicating which bits in a pixel contain the color and alpha samples.",
      "tagMap": {
        "return": [
          "the mask array , which indicates which bits of the \n\u003ccode\u003eint\u003c/code\u003e pixel representation contain the color or alpha samples."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.SampleModel",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "w"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createCompatibleSampleModel",
      "comment": "Creates a SampleModel with the specified width and height that has a data layout compatible with this ColorModel.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/SampleModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eSampleModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#createCompatibleSampleModel(int,int)\"\u003ecreateCompatibleSampleModel\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ew\u003c/code\u003e - the width (in pixels) of the region of the image data described",
          "\u003ccode\u003eh\u003c/code\u003e - the height (in pixels) of the region of the image data described"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ew\u003c/code\u003e or \n\u003ccode\u003eh\u003c/code\u003e is not greater than 0"
        ],
        "return": [
          "the newly created \n\u003ccode\u003eSampleModel\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.SampleModel",
            "type": "Class"
          },
          "field": {
            "name": "sm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCompatibleSampleModel",
      "comment": "Checks if the specified SampleModel is compatible with this ColorModel. If sm is null, this method returns false.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/SampleModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eSampleModel\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#isCompatibleSampleModel(java.awt.image.SampleModel)\"\u003eisCompatibleSampleModel\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esm\u003c/code\u003e - the specified \n\u003ccode\u003eSampleModel\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified \n\u003ccode\u003eSampleModel\u003c/code\u003e is compatible with this \n\u003ccode\u003eColorModel\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.awt.image.WritableRaster",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.awt.image.WritableRaster",
            "type": "Class"
          },
          "field": {
            "name": "raster"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAlphaRaster",
      "comment": "Returns a WritableRaster representing the alpha channel of an image, extracted from the input WritableRaster. This method assumes that WritableRaster objects associated with this ColorModel store the alpha band, if present, as the last band of image data. Returns null if there is no separate spatial alpha channel associated with this ColorModel. This method creates a new WritableRaster, but shares the data array.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#getAlphaRaster(java.awt.image.WritableRaster)\"\u003egetAlphaRaster\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eraster\u003c/code\u003e - a \n\u003ccode\u003eWritableRaster\u003c/code\u003e containing an image"
        ],
        "return": [
          "a \n\u003ccode\u003eWritableRaster\u003c/code\u003e that represents the alpha channel of the image contained in \n\u003ccode\u003eraster\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Tests if the specified Object is an instance of PackedColorModel and equals this PackedColorModel.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the \n\u003ccode\u003eObject\u003c/code\u003e to test for equality"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified \n\u003ccode\u003eObject\u003c/code\u003e is an instance of \n\u003ccode\u003ePackedColorModel\u003c/code\u003e and equals this \n\u003ccode\u003ePackedColorModel\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code for this PackedColorModel.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/ColorModel.html\" title\u003d\"class in java.awt.image\"\u003eColorModel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code for this PackedColorModel."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.color.ColorSpace",
            "type": "Class"
          },
          "field": {
            "name": "space"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bits"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "colorMaskArray"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "alphaMask"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isAlphaPremultiplied"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "trans"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "transferType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a PackedColorModel from a color mask array, which specifies which bits in an int pixel representation contain each of the color samples, and an alpha mask. Color components are in the specified ColorSpace. The length of colorMaskArray should be the number of components in the ColorSpace. All of the bits in each mask must be contiguous and fit in the specified number of least significant bits of an int pixel representation. If the alphaMask is 0, there is no alpha. If there is alpha, the boolean isAlphaPremultiplied specifies how to interpret color and alpha samples in pixel values. If the boolean is true, color samples are assumed to have been multiplied by the alpha sample. The transparency, trans, specifies what alpha values can be represented by this color model. The transfer type is the type of primitive array used to represent pixel values.",
      "tagMap": {
        "param": [
          "\u003ccode\u003espace\u003c/code\u003e - the specified \n\u003ccode\u003eColorSpace\u003c/code\u003e",
          "\u003ccode\u003ebits\u003c/code\u003e - the number of bits in the pixel values",
          "\u003ccode\u003ecolorMaskArray\u003c/code\u003e - array that specifies the masks representing the bits of the pixel values that represent the color components",
          "\u003ccode\u003ealphaMask\u003c/code\u003e - specifies the mask representing the bits of the pixel values that represent the alpha component",
          "\u003ccode\u003eisAlphaPremultiplied\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if color samples are premultiplied by the alpha sample; \n\u003ccode\u003efalse\u003c/code\u003e otherwise",
          "\u003ccode\u003etrans\u003c/code\u003e - specifies the alpha value that can be represented by this color model",
          "\u003ccode\u003etransferType\u003c/code\u003e - the type of array used to represent pixel values"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebits\u003c/code\u003e is less than 1 or greater than 32"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.awt.color.ColorSpace",
            "type": "Class"
          },
          "field": {
            "name": "space"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bits"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rmask"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "gmask"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bmask"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "amask"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isAlphaPremultiplied"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "trans"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "transferType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a PackedColorModel from the specified masks which indicate which bits in an int pixel representation contain the alpha, red, green and blue color samples. Color components are in the specified ColorSpace, which must be of type ColorSpace.TYPE_RGB. All of the bits in each mask must be contiguous and fit in the specified number of least significant bits of an int pixel representation. If amask is 0, there is no alpha. If there is alpha, the boolean isAlphaPremultiplied specifies how to interpret color and alpha samples in pixel values. If the boolean is true, color samples are assumed to have been multiplied by the alpha sample. The transparency, trans, specifies what alpha values can be represented by this color model. The transfer type is the type of primitive array used to represent pixel values.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/color/ColorSpace.html\" title\u003d\"class in java.awt.color\"\u003e\u003ccode\u003eColorSpace\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003espace\u003c/code\u003e - the specified \n\u003ccode\u003eColorSpace\u003c/code\u003e",
          "\u003ccode\u003ebits\u003c/code\u003e - the number of bits in the pixel values",
          "\u003ccode\u003ermask\u003c/code\u003e - specifies the mask representing the bits of the pixel values that represent the red color component",
          "\u003ccode\u003egmask\u003c/code\u003e - specifies the mask representing the bits of the pixel values that represent the green color component",
          "\u003ccode\u003ebmask\u003c/code\u003e - specifies the mask representing the bits of the pixel values that represent the blue color component",
          "\u003ccode\u003eamask\u003c/code\u003e - specifies the mask representing the bits of the pixel values that represent the alpha component",
          "\u003ccode\u003eisAlphaPremultiplied\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if color samples are premultiplied by the alpha sample; \n\u003ccode\u003efalse\u003c/code\u003e otherwise",
          "\u003ccode\u003etrans\u003c/code\u003e - specifies the alpha value that can be represented by this color model",
          "\u003ccode\u003etransferType\u003c/code\u003e - the type of array used to represent pixel values"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003espace\u003c/code\u003e is not a TYPE_RGB space"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.awt.image.PackedColorModel",
  "comment": "The \n\u003ccode\u003ePackedColorModel\u003c/code\u003e class is an abstract \n\u003ca href\u003d\"ColorModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eColorModel\u003c/code\u003e\u003c/a\u003e class that works with pixel values which represent color and alpha information as separate samples and which pack all samples for a single pixel into a single int, short, or byte quantity. This class can be used with an arbitrary \n\u003ca href\u003d\"../color/ColorSpace.html\" title\u003d\"class in java.awt.color\"\u003e\u003ccode\u003eColorSpace\u003c/code\u003e\u003c/a\u003e. The number of color samples in the pixel values must be the same as the number of color components in the \n\u003ccode\u003eColorSpace\u003c/code\u003e. There can be a single alpha sample. The array length is always 1 for those methods that use a primitive array pixel representation of type \n\u003ccode\u003etransferType\u003c/code\u003e. The transfer types supported are DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, and DataBuffer.TYPE_INT. Color and alpha samples are stored in the single element of the array in bits indicated by bit masks. Each bit mask must be contiguous and masks must not overlap. The same masks apply to the single int pixel representation used by other methods. The correspondence of masks and color/alpha samples is as follows: \n\u003cul\u003e \n \u003cli\u003e Masks are identified by indices running from 0 through \u003ca href\u003d\"ColorModel.html#getNumComponents()\"\u003e\u003ccode\u003egetNumComponents\u003c/code\u003e\u003c/a\u003e\u0026nbsp;-\u0026nbsp;1. \u003c/li\u003e\n \u003cli\u003e The first \u003ca href\u003d\"ColorModel.html#getNumColorComponents()\"\u003e\u003ccode\u003egetNumColorComponents\u003c/code\u003e\u003c/a\u003e indices refer to color samples. \u003c/li\u003e\n \u003cli\u003e If an alpha sample is present, it corresponds the last index. \u003c/li\u003e\n \u003cli\u003e The order of the color indices is specified by the \u003ccode\u003eColorSpace\u003c/code\u003e. Typically, this reflects the name of the color space type (for example, TYPE_RGB), index 0 corresponds to red, index 1 to green, and index 2 to blue. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e The translation from pixel values to color/alpha components for display or processing purposes is a one-to-one correspondence of samples to components. A \u003ccode\u003ePackedColorModel\u003c/code\u003e is typically used with image data that uses masks to define packed samples. For example, a \u003ccode\u003ePackedColorModel\u003c/code\u003e can be used in conjunction with a \u003ca href\u003d\"SinglePixelPackedSampleModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eSinglePixelPackedSampleModel\u003c/code\u003e\u003c/a\u003e to construct a \u003ca href\u003d\"BufferedImage.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eBufferedImage\u003c/code\u003e\u003c/a\u003e. Normally the masks used by the \u003ca href\u003d\"SampleModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eSampleModel\u003c/code\u003e\u003c/a\u003e and the \u003ccode\u003eColorModel\u003c/code\u003e would be the same. However, if they are different, the color interpretation of pixel data is done according to the masks of the \u003ccode\u003eColorModel\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e A single \u003ccode\u003eint\u003c/code\u003e pixel representation is valid for all objects of this class since it is always possible to represent pixel values used with this class in a single \u003ccode\u003eint\u003c/code\u003e. Therefore, methods that use this representation do not throw an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e due to an invalid pixel value. \u003c/p\u003e\n\u003cp\u003e A subclass of \u003ccode\u003ePackedColorModel\u003c/code\u003e is \u003ca href\u003d\"DirectColorModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eDirectColorModel\u003c/code\u003e\u003c/a\u003e, which is similar to an X11 TrueColor visual.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/DirectColorModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eDirectColorModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/SinglePixelPackedSampleModel.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eSinglePixelPackedSampleModel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/image/BufferedImage.html\" title\u003d\"class in java.awt.image\"\u003e\u003ccode\u003eBufferedImage\u003c/code\u003e\u003c/a\u003e"
    ]
  }
}