{
  "packageName": "java.beans",
  "simpleName": "PropertyChangeEvent",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.EventObject",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPropertyName",
      "comment": "Gets the programmatic name of the property that was changed.",
      "tagMap": {
        "return": [
          "The programmatic name of the property that was changed. May be null if multiple properties have changed."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNewValue",
      "comment": "Gets the new value for the property, expressed as an Object.",
      "tagMap": {
        "return": [
          "The new value for the property, expressed as an Object. May be null if multiple properties have changed."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOldValue",
      "comment": "Gets the old value for the property, expressed as an Object.",
      "tagMap": {
        "return": [
          "The old value for the property, expressed as an Object. May be null if multiple properties have changed."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "propagationId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPropagationId",
      "comment": "Sets the propagationId object for the event.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropagationId\u003c/code\u003e - The propagationId object for the event."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPropagationId",
      "comment": "The \"propagationId\" field is reserved for future use. In Beans 1.0 the sole requirement is that if a listener catches a PropertyChangeEvent and then fires a PropertyChangeEvent of its own, then it should make sure that it propagates the propagationId field from its incoming event to its outgoing event.",
      "tagMap": {
        "return": [
          "the propagationId object associated with a bound/constrained property update."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of the object.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/EventObject.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/EventObject.html\" title\u003d\"class in java.util\"\u003eEventObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the object"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "oldValue"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new PropertyChangeEvent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the bean that fired the event",
          "\u003ccode\u003epropertyName\u003c/code\u003e - the programmatic name of the property that was changed",
          "\u003ccode\u003eoldValue\u003c/code\u003e - the old value of the property",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the property"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esource\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.beans.PropertyChangeEvent",
  "comment": "A \"PropertyChange\" event gets delivered whenever a bean changes a \"bound\" or \"constrained\" property. A PropertyChangeEvent object is sent as an argument to the PropertyChangeListener and VetoableChangeListener methods. \n\u003cp\u003e Normally PropertyChangeEvents are accompanied by the name and the old and new value of the changed property. If the new value is a primitive type (such as int or boolean) it must be wrapped as the corresponding java.lang.* Object type (such as Integer or Boolean). \u003c/p\u003e\n\u003cp\u003e Null values may be provided for the old and the new values if their true values are not known. \u003c/p\u003e\n\u003cp\u003e An event source may send a null object as the name to indicate that an arbitrary set of if its properties have changed. In this case the old and new values should also be null.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.beans.PropertyChangeEvent\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}