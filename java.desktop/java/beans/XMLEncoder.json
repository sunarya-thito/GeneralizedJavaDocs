{
  "packageName": "java.beans",
  "simpleName": "XMLEncoder",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.beans.Encoder",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "owner"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setOwner",
      "comment": "Sets the owner of this encoder to owner.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/XMLEncoder.html#getOwner()\"\u003e\u003ccode\u003egetOwner()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eowner\u003c/code\u003e - The owner of this encoder."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOwner",
      "comment": "Gets the owner of this encoder.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/XMLEncoder.html#setOwner(java.lang.Object)\"\u003e\u003ccode\u003esetOwner(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The owner of this encoder."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "writeObject",
      "comment": "Write an XML representation of the specified object to the output.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/XMLDecoder.html#readObject()\"\u003e\u003ccode\u003eXMLDecoder.readObject()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/Encoder.html#writeObject(java.lang.Object)\"\u003ewriteObject\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/Encoder.html\" title\u003d\"class in java.beans\"\u003eEncoder\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - The object to be written to the stream."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.Statement",
            "type": "Class"
          },
          "field": {
            "name": "oldStm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "writeStatement",
      "comment": "Records the Statement so that the Encoder will produce the actual output when the stream is flushed. This method should only be invoked within the context of initializing a persistence delegate.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/PersistenceDelegate.html#initialize(java.lang.Class,java.lang.Object,java.lang.Object,java.beans.Encoder)\"\u003e\u003ccode\u003ePersistenceDelegate.initialize(java.lang.Class\u0026lt;?\u0026gt;, java.lang.Object, java.lang.Object, java.beans.Encoder)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/Encoder.html#writeStatement(java.beans.Statement)\"\u003ewriteStatement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/Encoder.html\" title\u003d\"class in java.beans\"\u003eEncoder\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eoldStm\u003c/code\u003e - The statement that will be written to the stream."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.Expression",
            "type": "Class"
          },
          "field": {
            "name": "oldExp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "writeExpression",
      "comment": "Records the Expression so that the Encoder will produce the actual output when the stream is flushed. This method should only be invoked within the context of initializing a persistence delegate or setting up an encoder to read from a resource bundle. For more information about using resource bundles with the XMLEncoder, see Creating Internationalized Applications,",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/PersistenceDelegate.html#initialize(java.lang.Class,java.lang.Object,java.lang.Object,java.beans.Encoder)\"\u003e\u003ccode\u003ePersistenceDelegate.initialize(java.lang.Class\u0026lt;?\u0026gt;, java.lang.Object, java.lang.Object, java.beans.Encoder)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/Encoder.html#writeExpression(java.beans.Expression)\"\u003ewriteExpression\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/Encoder.html\" title\u003d\"class in java.beans\"\u003eEncoder\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eoldExp\u003c/code\u003e - The expression that will be written to the stream."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "flush",
      "comment": "This method writes out the preamble associated with the XML encoding if it has not been written already and then writes out all of the values that been written to the stream since the last time flush was called. After flushing, all internal references to the values that were written to this stream are cleared.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "close",
      "comment": "This method calls flush, writes the closing postamble and then closes the output stream associated with this stream.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new XML encoder to write out JavaBeans to the stream out using an XML encoding.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/XMLDecoder.html#%3Cinit%3E(java.io.InputStream)\"\u003e\u003ccode\u003eXMLDecoder(InputStream)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - the stream to which the XML representation of the objects will be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eout\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "charset"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "declaration"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "indentation"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new XML encoder to write out JavaBeans to the stream out using the given charset starting from the given indentation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html#forName(java.lang.String)\"\u003e\u003ccode\u003eCharset.forName(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - the stream to which the XML representation of the objects will be written",
          "\u003ccode\u003echarset\u003c/code\u003e - the name of the requested charset; may be either a canonical name or an alias",
          "\u003ccode\u003edeclaration\u003c/code\u003e - whether the XML declaration should be generated; set this to \n\u003ccode\u003efalse\u003c/code\u003e when embedding the contents in another XML document",
          "\u003ccode\u003eindentation\u003c/code\u003e - the number of space characters to indent the entire XML document by"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eout\u003c/code\u003e or \n\u003ccode\u003echarset\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or if \n\u003ccode\u003eindentation\u003c/code\u003e is less than 0",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/IllegalCharsetNameException.html\" title\u003d\"class in java.nio.charset\"\u003eIllegalCharsetNameException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003echarset\u003c/code\u003e name is illegal",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/UnsupportedCharsetException.html\" title\u003d\"class in java.nio.charset\"\u003eUnsupportedCharsetException\u003c/a\u003e\u003c/code\u003e - if no support for the named charset is available in this instance of the Java virtual machine",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if loaded charset does not support encoding"
        ],
        "since": [
          "1.7"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.beans.XMLEncoder",
  "comment": "The \n\u003ccode\u003eXMLEncoder\u003c/code\u003e class is a complementary alternative to the \n\u003ccode\u003eObjectOutputStream\u003c/code\u003e and can used to generate a textual representation of a \n\u003cem\u003eJavaBean\u003c/em\u003e in the same way that the \n\u003ccode\u003eObjectOutputStream\u003c/code\u003e can be used to create binary representation of \n\u003ccode\u003eSerializable\u003c/code\u003e objects. For example, the following fragment can be used to create a textual representation the supplied \n\u003cem\u003eJavaBean\u003c/em\u003e and all its properties: \n\u003cpre\u003e       XMLEncoder e \u003d new XMLEncoder(\n                          new BufferedOutputStream(\n                              new FileOutputStream(\"Test.xml\")));\n       e.writeObject(new JButton(\"Hello, world\"));\n       e.close();\n \u003c/pre\u003e Despite the similarity of their APIs, the \n\u003ccode\u003eXMLEncoder\u003c/code\u003e class is exclusively designed for the purpose of archiving graphs of \n\u003cem\u003eJavaBean\u003c/em\u003es as textual representations of their public properties. Like Java source files, documents written this way have a natural immunity to changes in the implementations of the classes involved. The \n\u003ccode\u003eObjectOutputStream\u003c/code\u003e continues to be recommended for interprocess communication and general purpose serialization. \n\u003cp\u003e The \u003ccode\u003eXMLEncoder\u003c/code\u003e class provides a default denotation for \u003cem\u003eJavaBean\u003c/em\u003es in which they are represented as XML documents complying with version 1.0 of the XML specification and the UTF-8 character encoding of the Unicode/ISO 10646 character set. The XML documents produced by the \u003ccode\u003eXMLEncoder\u003c/code\u003e class are: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e \u003cem\u003ePortable and version resilient\u003c/em\u003e: they have no dependencies on the private implementation of any class and so, like Java source files, they may be exchanged between environments which may have different versions of some of the classes and between VMs from different vendors. \u003c/li\u003e\n \u003cli\u003e \u003cem\u003eStructurally compact\u003c/em\u003e: The \u003ccode\u003eXMLEncoder\u003c/code\u003e class uses a \u003cem\u003eredundancy elimination\u003c/em\u003e algorithm internally so that the default values of a Bean\u0027s properties are not written to the stream. \u003c/li\u003e\n \u003cli\u003e \u003cem\u003eFault tolerant\u003c/em\u003e: Non-structural errors in the file, caused either by damage to the file or by API changes made to classes in an archive remain localized so that a reader can report the error and continue to load the parts of the document which were not affected by the error. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Below is an example of an XML archive containing some user interface components from the \u003cem\u003eswing\u003c/em\u003e toolkit: \u003c/p\u003e\n\u003cpre\u003e \u0026lt;?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u0026gt;\n \u0026lt;java version\u003d\"1.0\" class\u003d\"java.beans.XMLDecoder\"\u0026gt;\n \u0026lt;object class\u003d\"javax.swing.JFrame\"\u0026gt;\n   \u0026lt;void property\u003d\"name\"\u0026gt;\n     \u0026lt;string\u0026gt;frame1\u0026lt;/string\u0026gt;\n   \u0026lt;/void\u0026gt;\n   \u0026lt;void property\u003d\"bounds\"\u0026gt;\n     \u0026lt;object class\u003d\"java.awt.Rectangle\"\u0026gt;\n       \u0026lt;int\u0026gt;0\u0026lt;/int\u0026gt;\n       \u0026lt;int\u0026gt;0\u0026lt;/int\u0026gt;\n       \u0026lt;int\u0026gt;200\u0026lt;/int\u0026gt;\n       \u0026lt;int\u0026gt;200\u0026lt;/int\u0026gt;\n     \u0026lt;/object\u0026gt;\n   \u0026lt;/void\u0026gt;\n   \u0026lt;void property\u003d\"contentPane\"\u0026gt;\n     \u0026lt;void method\u003d\"add\"\u0026gt;\n       \u0026lt;object class\u003d\"javax.swing.JButton\"\u0026gt;\n         \u0026lt;void property\u003d\"label\"\u0026gt;\n           \u0026lt;string\u0026gt;Hello\u0026lt;/string\u0026gt;\n         \u0026lt;/void\u0026gt;\n       \u0026lt;/object\u0026gt;\n     \u0026lt;/void\u0026gt;\n   \u0026lt;/void\u0026gt;\n   \u0026lt;void property\u003d\"visible\"\u0026gt;\n     \u0026lt;boolean\u0026gt;true\u0026lt;/boolean\u0026gt;\n   \u0026lt;/void\u0026gt;\n \u0026lt;/object\u0026gt;\n \u0026lt;/java\u0026gt;\n \u003c/pre\u003e The XML syntax uses the following conventions: \n\u003cul\u003e \n \u003cli\u003e Each element represents a method call. \u003c/li\u003e\n \u003cli\u003e The \"object\" tag denotes an \u003cem\u003eexpression\u003c/em\u003e whose value is to be used as the argument to the enclosing element. \u003c/li\u003e\n \u003cli\u003e The \"void\" tag denotes a \u003cem\u003estatement\u003c/em\u003e which will be executed, but whose result will not be used as an argument to the enclosing method. \u003c/li\u003e\n \u003cli\u003e Elements which contain elements use those elements as arguments, unless they have the tag: \"void\". \u003c/li\u003e\n \u003cli\u003e The name of the method is denoted by the \"method\" attribute. \u003c/li\u003e\n \u003cli\u003e XML\u0027s standard \"id\" and \"idref\" attributes are used to make references to previous expressions - so as to deal with circularities in the object graph. \u003c/li\u003e\n \u003cli\u003e The \"class\" attribute is used to specify the target of a static method or constructor explicitly; its value being the fully qualified name of the class. \u003c/li\u003e\n \u003cli\u003e Elements with the \"void\" tag are executed using the outer context as the target if no target is defined by a \"class\" attribute. \u003c/li\u003e\n \u003cli\u003e Java\u0027s String class is treated specially and is written \u0026lt;string\u0026gt;Hello, world\u0026lt;/string\u0026gt; where the characters of the string are converted to bytes using the UTF-8 character encoding. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Although all object graphs may be written using just these three tags, the following definitions are included so that common data structures can be expressed more concisely: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e The default method name is \"new\". \u003c/li\u003e\n \u003cli\u003e A reference to a java class is written in the form \u0026lt;class\u0026gt;javax.swing.JButton\u0026lt;/class\u0026gt;. \u003c/li\u003e\n \u003cli\u003e Instances of the wrapper classes for Java\u0027s primitive types are written using the name of the primitive type as the tag. For example, an instance of the \u003ccode\u003eInteger\u003c/code\u003e class could be written: \u0026lt;int\u0026gt;123\u0026lt;/int\u0026gt;. Note that the \u003ccode\u003eXMLEncoder\u003c/code\u003e class uses Java\u0027s reflection package in which the conversion between Java\u0027s primitive types and their associated \"wrapper classes\" is handled internally. The API for the \u003ccode\u003eXMLEncoder\u003c/code\u003e class itself deals only with \u003ccode\u003eObject\u003c/code\u003es. \u003c/li\u003e\n \u003cli\u003e In an element representing a nullary method whose name starts with \"get\", the \"method\" attribute is replaced with a \"property\" attribute whose value is given by removing the \"get\" prefix and decapitalizing the result. \u003c/li\u003e\n \u003cli\u003e In an element representing a monadic method whose name starts with \"set\", the \"method\" attribute is replaced with a \"property\" attribute whose value is given by removing the \"set\" prefix and decapitalizing the result. \u003c/li\u003e\n \u003cli\u003e In an element representing a method named \"get\" taking one integer argument, the \"method\" attribute is replaced with an \"index\" attribute whose value the value of the first argument. \u003c/li\u003e\n \u003cli\u003e In an element representing a method named \"set\" taking two arguments, the first of which is an integer, the \"method\" attribute is replaced with an \"index\" attribute whose value the value of the first argument. \u003c/li\u003e\n \u003cli\u003e A reference to an array is written using the \"array\" tag. The \"class\" and \"length\" attributes specify the sub-type of the array and its length respectively. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e For more information you might also want to check out \u003ca href\u003d\"http://www.oracle.com/technetwork/java/persistence4-140124.html\"\u003e Using XMLEncoder\u003c/a\u003e, an article in \u003cem\u003eThe Swing Connection.\u003c/em\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/XMLDecoder.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eXMLDecoder\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/ObjectOutputStream.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eObjectOutputStream\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}