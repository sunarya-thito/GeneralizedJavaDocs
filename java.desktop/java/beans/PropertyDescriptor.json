{
  "packageName": "java.beans",
  "simpleName": "PropertyDescriptor",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.beans.FeatureDescriptor",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPropertyType",
      "comment": "Returns the Java type info for the property. Note that the Class object may describe primitive Java types such as int. This type is returned by the read method or is used as the parameter type of the write method. Returns null if the type is an indexed property that does not support non-indexed access.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eClass\u003c/code\u003e object that represents the Java type info, or \n\u003ccode\u003enull\u003c/code\u003e if the type cannot be determined"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Method",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReadMethod",
      "comment": "Gets the method that should be used to read the property value.",
      "tagMap": {
        "return": [
          "The method that should be used to read the property value. May return null if the property can\u0027t be read."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "field": {
            "name": "readMethod"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setReadMethod",
      "comment": "Sets the method that should be used to read the property value.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ereadMethod\u003c/code\u003e - The new read method."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if the read method is invalid"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Method",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWriteMethod",
      "comment": "Gets the method that should be used to write the property value.",
      "tagMap": {
        "return": [
          "The method that should be used to write the property value. May return null if the property can\u0027t be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "field": {
            "name": "writeMethod"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setWriteMethod",
      "comment": "Sets the method that should be used to write the property value.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ewriteMethod\u003c/code\u003e - The new write method."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if the write method is invalid"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBound",
      "comment": "Updates to \"bound\" properties will cause a \"PropertyChange\" event to get fired when the property is changed.",
      "tagMap": {
        "return": [
          "True if this is a bound property."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "bound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBound",
      "comment": "Updates to \"bound\" properties will cause a \"PropertyChange\" event to get fired when the property is changed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebound\u003c/code\u003e - True if this is a bound property."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isConstrained",
      "comment": "Attempted updates to \"Constrained\" properties will cause a \"VetoableChange\" event to get fired when the property is changed.",
      "tagMap": {
        "return": [
          "True if this is a constrained property."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "constrained"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setConstrained",
      "comment": "Attempted updates to \"Constrained\" properties will cause a \"VetoableChange\" event to get fired when the property is changed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econstrained\u003c/code\u003e - True if this is a constrained property."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "propertyEditorClass"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPropertyEditorClass",
      "comment": "Normally PropertyEditors will be found using the PropertyEditorManager. However if for some reason you want to associate a particular PropertyEditor with a given property, then you can do it with this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyEditorClass\u003c/code\u003e - The Class for the desired PropertyEditor."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPropertyEditorClass",
      "comment": "Gets any explicit PropertyEditor Class that has been registered for this property.",
      "tagMap": {
        "return": [
          "Any explicit PropertyEditor Class that has been registered for this property. Normally this will return \"null\", indicating that no special editor has been registered, so the PropertyEditorManager should be used to locate a suitable PropertyEditor."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyEditor",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "bean"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createPropertyEditor",
      "comment": "Constructs an instance of a property editor using the current property editor class. If the property editor class has a public constructor that takes an Object argument then it will be invoked using the bean parameter as the argument. Otherwise, the default constructor will be invoked.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebean\u003c/code\u003e - the source object"
        ],
        "return": [
          "a property editor instance or null if a property editor has not been defined or cannot be created"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this PropertyDescriptor against the specified object. Returns true if the objects are the same. Two PropertyDescriptors are the same if the read, write, property types, property editor and flags are equivalent.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this object is the same as the obj argument; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code value for the object. See Object.hashCode() for a complete description.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "beanClass"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a PropertyDescriptor for a property that follows the standard Java convention by having getFoo and setFoo accessor methods. Thus if the argument name is \"fred\", it will assume that the writer method is \"setFred\" and the reader method is \"getFred\" (or \"isFred\" for a boolean property). Note that the property name should start with a lower case character, which will be capitalized in the method names.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - The programmatic name of the property.",
          "\u003ccode\u003ebeanClass\u003c/code\u003e - The Class object for the target bean. For example sun.beans.OurButton.class."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if an exception occurs during introspection."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "beanClass"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "readMethodName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "writeMethodName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "This constructor takes the name of a simple property, and method names for reading and writing the property.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - The programmatic name of the property.",
          "\u003ccode\u003ebeanClass\u003c/code\u003e - The Class object for the target bean. For example sun.beans.OurButton.class.",
          "\u003ccode\u003ereadMethodName\u003c/code\u003e - The name of the method used for reading the property value. May be null if the property is write-only.",
          "\u003ccode\u003ewriteMethodName\u003c/code\u003e - The name of the method used for writing the property value. May be null if the property is read-only."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if an exception occurs during introspection."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "field": {
            "name": "readMethod"
          }
        },
        {
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "field": {
            "name": "writeMethod"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "This constructor takes the name of a simple property, and Method objects for reading and writing the property.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - The programmatic name of the property.",
          "\u003ccode\u003ereadMethod\u003c/code\u003e - The method used for reading the property value. May be null if the property is write-only.",
          "\u003ccode\u003ewriteMethod\u003c/code\u003e - The method used for writing the property value. May be null if the property is read-only."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if an exception occurs during introspection."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.beans.PropertyDescriptor",
  "comment": "A PropertyDescriptor describes one property that a Java Bean exports via a pair of accessor methods.",
  "tagMap": {
    "since": [
      "1.1"
    ]
  }
}