{
  "packageName": "java.beans",
  "simpleName": "EventSetDescriptor",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.beans.FeatureDescriptor",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getListenerType",
      "comment": "Gets the Class object for the target interface.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The Class object for the target interface that will get invoked when the event is fired."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Method",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getListenerMethods",
      "comment": "Gets the methods of the target listener interface.",
      "annotations": [],
      "tagMap": {
        "return": [
          "An array of \n\u003ccode\u003eMethod\u003c/code\u003e objects for the target methods within the target listener interface that will get called when events are fired."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.MethodDescriptor",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getListenerMethodDescriptors",
      "comment": "Gets the MethodDescriptors of the target listener interface.",
      "annotations": [],
      "tagMap": {
        "return": [
          "An array of \n\u003ccode\u003eMethodDescriptor\u003c/code\u003e objects for the target methods within the target listener interface that will get called when events are fired."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Method",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAddListenerMethod",
      "comment": "Gets the method used to add event listeners.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The method used to register a listener at the event source."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Method",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRemoveListenerMethod",
      "comment": "Gets the method used to remove event listeners.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The method used to remove a listener at the event source."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Method",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGetListenerMethod",
      "comment": "Gets the method used to access the registered event listeners.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The method used to access the array of listeners at the event source or null if it doesn\u0027t exist."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "unicast",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUnicast",
      "comment": "Mark an event set as unicast (or not).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eunicast\u003c/code\u003e - True if the event set is unicast."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isUnicast",
      "comment": "Normally event sources are multicast. However there are some exceptions that are strictly unicast.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the event set is unicast. Defaults to \n\u003ccode\u003efalse\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "inDefaultEventSet",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInDefaultEventSet",
      "comment": "Marks an event set as being in the \"default\" set (or not). By default this is true.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einDefaultEventSet\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the event set is in the \"default\" set, \n\u003ccode\u003efalse\u003c/code\u003e if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isInDefaultEventSet",
      "comment": "Reports if an event set is in the \"default\" set.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the event set is in the \"default\" set. Defaults to \n\u003ccode\u003etrue\u003c/code\u003e."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "eventSetName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "listenerType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "listenerMethodName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an EventSetDescriptor assuming that you are following the most simple standard design pattern where a named event \"fred\" is (1) delivered as a call on the single method of interface FredListener, (2) has a single argument of type FredEvent, and (3) where the FredListener may be registered with a call on an addFredListener method of the source component and removed with a call on a removeFredListener method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceClass\u003c/code\u003e - The class firing the event.",
          "\u003ccode\u003eeventSetName\u003c/code\u003e - The programmatic name of the event. E.g. \"fred\". Note that this should normally start with a lower-case character.",
          "\u003ccode\u003elistenerType\u003c/code\u003e - The target interface that events will get delivered to.",
          "\u003ccode\u003elistenerMethodName\u003c/code\u003e - The method that will get called when the event gets delivered to its target listener interface."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if an exception occurs during introspection."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "eventSetName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "listenerType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "listenerMethodNames",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "addListenerMethodName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "removeListenerMethodName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an EventSetDescriptor from scratch using string names.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceClass\u003c/code\u003e - The class firing the event.",
          "\u003ccode\u003eeventSetName\u003c/code\u003e - The programmatic name of the event set. Note that this should normally start with a lower-case character.",
          "\u003ccode\u003elistenerType\u003c/code\u003e - The Class of the target interface that events will get delivered to.",
          "\u003ccode\u003elistenerMethodNames\u003c/code\u003e - The names of the methods that will get called when the event gets delivered to its target listener interface.",
          "\u003ccode\u003eaddListenerMethodName\u003c/code\u003e - The name of the method on the event source that can be used to register an event listener object.",
          "\u003ccode\u003eremoveListenerMethodName\u003c/code\u003e - The name of the method on the event source that can be used to de-register an event listener object."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if an exception occurs during introspection."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "eventSetName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "listenerType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "listenerMethodNames",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "addListenerMethodName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "removeListenerMethodName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "getListenerMethodName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "This constructor creates an EventSetDescriptor from scratch using string names.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceClass\u003c/code\u003e - The class firing the event.",
          "\u003ccode\u003eeventSetName\u003c/code\u003e - The programmatic name of the event set. Note that this should normally start with a lower-case character.",
          "\u003ccode\u003elistenerType\u003c/code\u003e - The Class of the target interface that events will get delivered to.",
          "\u003ccode\u003elistenerMethodNames\u003c/code\u003e - The names of the methods that will get called when the event gets delivered to its target listener interface.",
          "\u003ccode\u003eaddListenerMethodName\u003c/code\u003e - The name of the method on the event source that can be used to register an event listener object.",
          "\u003ccode\u003eremoveListenerMethodName\u003c/code\u003e - The name of the method on the event source that can be used to de-register an event listener object.",
          "\u003ccode\u003egetListenerMethodName\u003c/code\u003e - The method on the event source that can be used to access the array of event listener objects."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if an exception occurs during introspection."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "eventSetName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "listenerType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "listenerMethods",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "name": "addListenerMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "name": "removeListenerMethod",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an EventSetDescriptor from scratch using java.lang.reflect.Method and java.lang.Class objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eeventSetName\u003c/code\u003e - The programmatic name of the event set.",
          "\u003ccode\u003elistenerType\u003c/code\u003e - The Class for the listener interface.",
          "\u003ccode\u003elistenerMethods\u003c/code\u003e - An array of Method objects describing each of the event handling methods in the target listener.",
          "\u003ccode\u003eaddListenerMethod\u003c/code\u003e - The method on the event source that can be used to register an event listener object.",
          "\u003ccode\u003eremoveListenerMethod\u003c/code\u003e - The method on the event source that can be used to de-register an event listener object."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if an exception occurs during introspection."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "eventSetName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "listenerType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "listenerMethods",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "name": "addListenerMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "name": "removeListenerMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "name": "getListenerMethod",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "This constructor creates an EventSetDescriptor from scratch using java.lang.reflect.Method and java.lang.Class objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eeventSetName\u003c/code\u003e - The programmatic name of the event set.",
          "\u003ccode\u003elistenerType\u003c/code\u003e - The Class for the listener interface.",
          "\u003ccode\u003elistenerMethods\u003c/code\u003e - An array of Method objects describing each of the event handling methods in the target listener.",
          "\u003ccode\u003eaddListenerMethod\u003c/code\u003e - The method on the event source that can be used to register an event listener object.",
          "\u003ccode\u003eremoveListenerMethod\u003c/code\u003e - The method on the event source that can be used to de-register an event listener object.",
          "\u003ccode\u003egetListenerMethod\u003c/code\u003e - The method on the event source that can be used to access the array of event listener objects."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if an exception occurs during introspection."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "eventSetName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "listenerType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.beans.MethodDescriptor",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "listenerMethodDescriptors",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "name": "addListenerMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "name": "removeListenerMethod",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an EventSetDescriptor from scratch using java.lang.reflect.MethodDescriptor and java.lang.Class objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eeventSetName\u003c/code\u003e - The programmatic name of the event set.",
          "\u003ccode\u003elistenerType\u003c/code\u003e - The Class for the listener interface.",
          "\u003ccode\u003elistenerMethodDescriptors\u003c/code\u003e - An array of MethodDescriptor objects describing each of the event handling methods in the target listener.",
          "\u003ccode\u003eaddListenerMethod\u003c/code\u003e - The method on the event source that can be used to register an event listener object.",
          "\u003ccode\u003eremoveListenerMethod\u003c/code\u003e - The method on the event source that can be used to de-register an event listener object."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if an exception occurs during introspection."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.beans.EventSetDescriptor",
  "comment": "An EventSetDescriptor describes a group of events that a given Java bean fires. \n\u003cp\u003e The given group of events are all delivered as method calls on a single event listener interface, and an event listener object can be registered via a call on a registration method supplied by the event source.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.1"
    ]
  }
}