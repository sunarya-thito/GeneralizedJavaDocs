{
  "packageName": "java.beans",
  "simpleName": "Statement",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTarget",
      "comment": "Returns the target object of this statement. If this method returns null, the execute() method throws a NullPointerException.",
      "tagMap": {
        "return": [
          "the target object of this statement"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMethodName",
      "comment": "Returns the name of the method to invoke. If this method returns null, the execute() method throws a NullPointerException.",
      "tagMap": {
        "return": [
          "the name of the method"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getArguments",
      "comment": "Returns the arguments for the method to invoke. The number of arguments and their types must match the method being called. null can be used as a synonym of an empty array.",
      "tagMap": {
        "return": [
          "the array of arguments"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.Exception",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "execute",
      "comment": "The execute method finds a method whose name is the same as the methodName property, and invokes the method on the target. When the target\u0027s class defines many methods with the given name the implementation should choose the most specific method using the algorithm specified in the Java Language Specification (15.11). The dynamic class of the target and arguments are used in place of the compile-time type information and, like the Method class itself, conversion between primitive values and their associated wrapper classes is handled internally. The following method types are handled as special cases: Static methods may be called by using a class object as the target. The reserved method name \"new\" may be used to call a class\u0027s constructor as if all classes defined static \"new\" methods. Constructor invocations are typically considered Expressions rather than Statements as they return a value. The method names \"get\" and \"set\" defined in the List interface may also be applied to array instances, mapping to the static methods of the same name in the Array class.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Method.html\" title\u003d\"class in java.lang.reflect\"\u003e\u003ccode\u003eMethod\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the value of the \n\u003ccode\u003etarget\u003c/code\u003e or \n\u003ccode\u003emethodName\u003c/code\u003e property is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchMethodException.html\" title\u003d\"class in java.lang\"\u003eNoSuchMethodException\u003c/a\u003e\u003c/code\u003e - if a matching method is not found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and it denies the method invocation",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class in java.lang\"\u003eException\u003c/a\u003e\u003c/code\u003e - that is thrown by the invoked method"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Prints the value of this statement using a Java-style syntax.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the object."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "methodName"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "arguments"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new Statement object for the specified target object to invoke the method specified by the name and by the array of arguments. The target and the methodName values should not be null. Otherwise an attempt to execute this Expression will result in a NullPointerException. If the arguments value is null, an empty array is used as the value of the arguments property.",
      "annotations": [
        {
          "type": "ConstructorProperties",
          "values": [
            {
              "name": "value",
              "value": [
                "target",
                "methodName",
                "arguments"
              ]
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the target object of this statement",
          "\u003ccode\u003emethodName\u003c/code\u003e - the name of the method to invoke on the specified target",
          "\u003ccode\u003earguments\u003c/code\u003e - the array of arguments to invoke the specified method"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.beans.Statement",
  "comment": "A \n\u003ccode\u003eStatement\u003c/code\u003e object represents a primitive statement in which a single method is applied to a target and a set of arguments - as in \n\u003ccode\u003e\"a.setFoo(b)\"\u003c/code\u003e. Note that where this example uses names to denote the target and its argument, a statement object does not require a name space and is constructed with the values themselves. The statement object associates the named method with its environment as a simple set of values: the target and an array of argument values.",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}