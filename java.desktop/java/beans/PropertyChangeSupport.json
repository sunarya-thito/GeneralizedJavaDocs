{
  "packageName": "java.beans",
  "simpleName": "PropertyChangeSupport",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addPropertyChangeListener",
      "comment": "Add a PropertyChangeListener to the listener list. The listener is registered for all properties. The same listener object may be added more than once, and will be called as many times as it is added. If listener is null, no exception is thrown and no action is taken.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - The PropertyChangeListener to be added"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removePropertyChangeListener",
      "comment": "Remove a PropertyChangeListener from the listener list. This removes a PropertyChangeListener that was registered for all properties. If listener was added more than once to the same event source, it will be notified one less time after being removed. If listener is null, or was never added, no exception is thrown and no action is taken.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - The PropertyChangeListener to be removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPropertyChangeListeners",
      "comment": "Returns an array of all the listeners that were added to the PropertyChangeSupport object with addPropertyChangeListener(). If some listeners have been added with a named property, then the returned array will be a mixture of PropertyChangeListeners and PropertyChangeListenerProxys. If the calling method is interested in distinguishing the listeners then it must test each element to see if it\u0027s a PropertyChangeListenerProxy, perform the cast, and examine the parameter. \n PropertyChangeListener[] listeners \u003d bean.getPropertyChangeListeners();\n for (int i \u003d 0; i \u003c listeners.length; i++) {\n   if (listeners[i] instanceof PropertyChangeListenerProxy) {\n     PropertyChangeListenerProxy proxy \u003d\n                    (PropertyChangeListenerProxy)listeners[i];\n     if (proxy.getPropertyName().equals(\"foo\")) {\n       // proxy is a PropertyChangeListener which was associated\n       // with the property named \"foo\"\n     }\n   }\n }",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/PropertyChangeListenerProxy.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003ePropertyChangeListenerProxy\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "all of the \n\u003ccode\u003ePropertyChangeListeners\u003c/code\u003e added or an empty array if no listeners have been added"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addPropertyChangeListener",
      "comment": "Add a PropertyChangeListener for a specific property. The listener will be invoked only when a call on firePropertyChange names that specific property. The same listener object may be added more than once. For each property, the listener will be invoked the number of times it was added for that property. If propertyName or listener is null, no exception is thrown and no action is taken.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - The name of the property to listen on.",
          "\u003ccode\u003elistener\u003c/code\u003e - The PropertyChangeListener to be added"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "java.beans.PropertyChangeListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removePropertyChangeListener",
      "comment": "Remove a PropertyChangeListener for a specific property. If listener was added more than once to the same event source for the specified property, it will be notified one less time after being removed. If propertyName is null, no exception is thrown and no action is taken. If listener is null, or was never added for the specified property, no exception is thrown and no action is taken.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - The name of the property that was listened on.",
          "\u003ccode\u003elistener\u003c/code\u003e - The PropertyChangeListener to be removed"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.PropertyChangeListener",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPropertyChangeListeners",
      "comment": "Returns an array of all the listeners which have been associated with the named property.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - The name of the property being listened to"
        ],
        "return": [
          "all of the \n\u003ccode\u003ePropertyChangeListeners\u003c/code\u003e associated with the named property. If no such listeners have been added, or if \n\u003ccode\u003epropertyName\u003c/code\u003e is null, an empty array is returned."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "oldValue"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "firePropertyChange",
      "comment": "Reports a bound property update to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if old and new values are equal and non-null. This is merely a convenience wrapper around the more general firePropertyChange(PropertyChangeEvent) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the programmatic name of the property that was changed",
          "\u003ccode\u003eoldValue\u003c/code\u003e - the old value of the property",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "oldValue"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "firePropertyChange",
      "comment": "Reports an integer bound property update to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if old and new values are equal. This is merely a convenience wrapper around the more general firePropertyChange(String, Object, Object) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the programmatic name of the property that was changed",
          "\u003ccode\u003eoldValue\u003c/code\u003e - the old value of the property",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the property"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "oldValue"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "firePropertyChange",
      "comment": "Reports a boolean bound property update to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if old and new values are equal. This is merely a convenience wrapper around the more general firePropertyChange(String, Object, Object) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the programmatic name of the property that was changed",
          "\u003ccode\u003eoldValue\u003c/code\u003e - the old value of the property",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the property"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.beans.PropertyChangeEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "firePropertyChange",
      "comment": "Fires a property change event to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if the given event\u0027s old and new values are equal and non-null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - the \n\u003ccode\u003ePropertyChangeEvent\u003c/code\u003e to be fired"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "oldValue"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fireIndexedPropertyChange",
      "comment": "Reports a bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if old and new values are equal and non-null. This is merely a convenience wrapper around the more general firePropertyChange(PropertyChangeEvent) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the programmatic name of the property that was changed",
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the property element that was changed",
          "\u003ccode\u003eoldValue\u003c/code\u003e - the old value of the property",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the property"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "oldValue"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fireIndexedPropertyChange",
      "comment": "Reports an integer bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if old and new values are equal. This is merely a convenience wrapper around the more general fireIndexedPropertyChange(String, int, Object, Object) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the programmatic name of the property that was changed",
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the property element that was changed",
          "\u003ccode\u003eoldValue\u003c/code\u003e - the old value of the property",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the property"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "oldValue"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fireIndexedPropertyChange",
      "comment": "Reports a boolean bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if old and new values are equal. This is merely a convenience wrapper around the more general fireIndexedPropertyChange(String, int, Object, Object) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the programmatic name of the property that was changed",
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the property element that was changed",
          "\u003ccode\u003eoldValue\u003c/code\u003e - the old value of the property",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the property"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "propertyName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasListeners",
      "comment": "Check if there are any listeners for a specific property, including those registered on all properties. If propertyName is null, only check for listeners registered on all properties.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - the property name."
        ],
        "return": [
          "true if there are one or more listeners for the given property"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "sourceBean"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a PropertyChangeSupport object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceBean\u003c/code\u003e - The bean to be given as the source for any events."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.beans.PropertyChangeSupport",
  "comment": "This is a utility class that can be used by beans that support bound properties. It manages a list of listeners and dispatches \n\u003ca href\u003d\"PropertyChangeEvent.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003ePropertyChangeEvent\u003c/code\u003e\u003c/a\u003es to them. You can use an instance of this class as a member field of your bean and delegate these types of work to it. The \n\u003ca href\u003d\"PropertyChangeListener.html\" title\u003d\"interface in java.beans\"\u003e\u003ccode\u003ePropertyChangeListener\u003c/code\u003e\u003c/a\u003e can be registered for all properties or for a property specified by name. \n\u003cp\u003e Here is an example of \u003ccode\u003ePropertyChangeSupport\u003c/code\u003e usage that follows the rules and recommendations laid out in the JavaBeans specification: \u003c/p\u003e\n\u003cpre\u003e public class MyBean {\n     private final PropertyChangeSupport pcs \u003d new PropertyChangeSupport(this);\n\n     public void addPropertyChangeListener(PropertyChangeListener listener) {\n         this.pcs.addPropertyChangeListener(listener);\n     }\n\n     public void removePropertyChangeListener(PropertyChangeListener listener) {\n         this.pcs.removePropertyChangeListener(listener);\n     }\n\n     private String value;\n\n     public String getValue() {\n         return this.value;\n     }\n\n     public void setValue(String newValue) {\n         String oldValue \u003d this.value;\n         this.value \u003d newValue;\n         this.pcs.firePropertyChange(\"value\", oldValue, newValue);\n     }\n\n     [...]\n }\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003ePropertyChangeSupport\u003c/code\u003e instance is thread-safe. \u003c/p\u003e\n\u003cp\u003e This class is serializable. When it is serialized it will save (and restore) any listeners that are themselves serializable. Any non-serializable listeners will be skipped during serialization.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/VetoableChangeSupport.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eVetoableChangeSupport\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.beans.PropertyChangeSupport\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}