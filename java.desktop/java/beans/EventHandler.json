{
  "packageName": "java.beans",
  "simpleName": "EventHandler",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTarget",
      "comment": "Returns the object to which this event handler will send a message.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/EventHandler.html#%3Cinit%3E(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eEventHandler(Object, String, String, String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the target of this event handler"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAction",
      "comment": "Returns the name of the target\u0027s writable property that this event handler will set, or the name of the method that this event handler will invoke on the target.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/EventHandler.html#%3Cinit%3E(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eEventHandler(Object, String, String, String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the action of this event handler"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEventPropertyName",
      "comment": "Returns the property of the event that should be used in the action applied to the target.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/EventHandler.html#%3Cinit%3E(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eEventHandler(Object, String, String, String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the property of the event"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getListenerMethodName",
      "comment": "Returns the name of the method that will trigger the action. A return value of null signifies that all methods in the listener interface trigger the action.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/EventHandler.html#%3Cinit%3E(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eEventHandler(Object, String, String, String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the name of the method that will trigger the action"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "proxy",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "name": "method",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "arguments",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "invoke",
      "comment": "Extract the appropriate property value from the event and pass it to the action associated with this EventHandler.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/EventHandler.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eEventHandler\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/InvocationHandler.html#invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object%5B%5D)\"\u003einvoke\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/InvocationHandler.html\" title\u003d\"interface in java.lang.reflect\"\u003eInvocationHandler\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eproxy\u003c/code\u003e - the proxy object",
          "\u003ccode\u003emethod\u003c/code\u003e - the method in the listener interface",
          "\u003ccode\u003earguments\u003c/code\u003e - an array of objects containing the values of the arguments passed in the method invocation on the proxy instance, or \n\u003ccode\u003enull\u003c/code\u003e if interface method takes no arguments. Arguments of primitive types are wrapped in instances of the appropriate primitive wrapper class, such as \n\u003ccode\u003ejava.lang.Integer\u003c/code\u003e or \n\u003ccode\u003ejava.lang.Boolean\u003c/code\u003e."
        ],
        "return": [
          "the result of applying the action to the target"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "listenerInterface",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "target",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "create",
      "comment": "Creates an implementation of listenerInterface in which all of the methods in the listener interface apply the handler\u0027s action to the target. This method is implemented by calling the other, more general, implementation of the create method with both the eventPropertyName and the listenerMethodName taking the value null. Refer to the general version of create for a complete description of the action parameter. To create an ActionListener that shows a JDialog with dialog.show(), one can write: EventHandler.create(ActionListener.class, dialog, \"show\")",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type to create"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/EventHandler.html#create(java.lang.Class,java.lang.Object,java.lang.String,java.lang.String)\"\u003e\u003ccode\u003ecreate(Class, Object, String, String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Proxy.html#newProxyInstance(java.lang.ClassLoader,java.lang.Class%5B%5D,java.lang.reflect.InvocationHandler)\"\u003e\u003ccode\u003eProxy.newProxyInstance(java.lang.ClassLoader, java.lang.Class\u0026lt;?\u0026gt;[], java.lang.reflect.InvocationHandler)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistenerInterface\u003c/code\u003e - the listener interface to create a proxy for",
          "\u003ccode\u003etarget\u003c/code\u003e - the object that will perform the action",
          "\u003ccode\u003eaction\u003c/code\u003e - the name of a (possibly qualified) property or method on the target"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elistenerInterface\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etarget\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eaction\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if creating a Proxy for \n\u003ccode\u003elistenerInterface\u003c/code\u003e fails for any of the restrictions specified by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Proxy.html#newProxyInstance(java.lang.ClassLoader,java.lang.Class%5B%5D,java.lang.reflect.InvocationHandler)\"\u003e\u003ccode\u003eProxy.newProxyInstance(java.lang.ClassLoader, java.lang.Class\u0026lt;?\u0026gt;[], java.lang.reflect.InvocationHandler)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an object that implements \n\u003ccode\u003elistenerInterface\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "listenerInterface",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "target",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "eventPropertyName",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "create",
      "comment": "/** Creates an implementation of listenerInterface in which all of the methods pass the value of the event expression, eventPropertyName, to the final method in the statement, action, which is applied to the target. This method is implemented by calling the more general, implementation of the create method with the listenerMethodName taking the value null. Refer to the general version of create for a complete description of the action and eventPropertyName parameters. To create an ActionListener that sets the the text of a JLabel to the text value of the JTextField source of the incoming event, you can use the following code: EventHandler.create(ActionListener.class, label, \"text\", \"source.text\");\n This is equivalent to the following code: //Equivalent code using an inner class instead of EventHandler.\nnew ActionListener() {\n    public void actionPerformed(ActionEvent event) {\n        label.setText(((JTextField)(event.getSource())).getText());\n     }\n};",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type to create"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/EventHandler.html#create(java.lang.Class,java.lang.Object,java.lang.String,java.lang.String,java.lang.String)\"\u003e\u003ccode\u003ecreate(Class, Object, String, String, String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Proxy.html#newProxyInstance(java.lang.ClassLoader,java.lang.Class%5B%5D,java.lang.reflect.InvocationHandler)\"\u003e\u003ccode\u003eProxy.newProxyInstance(java.lang.ClassLoader, java.lang.Class\u0026lt;?\u0026gt;[], java.lang.reflect.InvocationHandler)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistenerInterface\u003c/code\u003e - the listener interface to create a proxy for",
          "\u003ccode\u003etarget\u003c/code\u003e - the object that will perform the action",
          "\u003ccode\u003eaction\u003c/code\u003e - the name of a (possibly qualified) property or method on the target",
          "\u003ccode\u003eeventPropertyName\u003c/code\u003e - the (possibly qualified) name of a readable property of the incoming event"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elistenerInterface\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etarget\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eaction\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if creating a Proxy for \n\u003ccode\u003elistenerInterface\u003c/code\u003e fails for any of the restrictions specified by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Proxy.html#newProxyInstance(java.lang.ClassLoader,java.lang.Class%5B%5D,java.lang.reflect.InvocationHandler)\"\u003e\u003ccode\u003eProxy.newProxyInstance(java.lang.ClassLoader, java.lang.Class\u0026lt;?\u0026gt;[], java.lang.reflect.InvocationHandler)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an object that implements \n\u003ccode\u003elistenerInterface\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "listenerInterface",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "target",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "eventPropertyName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "listenerMethodName",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "create",
      "comment": "Creates an implementation of listenerInterface in which the method named listenerMethodName passes the value of the event expression, eventPropertyName, to the final method in the statement, action, which is applied to the target. All of the other listener methods do nothing. The eventPropertyName string is used to extract a value from the incoming event object that is passed to the target method. The common case is the target method takes no arguments, in which case a value of null should be used for the eventPropertyName. Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the eventPropertyName string is a sequence of methods or properties where each method or property is applied to the value returned by the preceding method starting from the incoming event object. The syntax is: propertyName{.propertyName}* where propertyName matches a method or property. For example, to extract the point property from a MouseEvent, you could use either \"point\" or \"getPoint\" as the eventPropertyName. To extract the \"text\" property from a MouseEvent with a JLabel source use any of the following as eventPropertyName: \"source.text\", \"getSource.text\" \"getSource.getText\" or \"source.getText\". If a method can not be found, or an exception is generated as part of invoking a method a RuntimeException will be thrown at dispatch time. For example, if the incoming event object is null, and eventPropertyName is non-null and not empty, a RuntimeException will be thrown. The action argument is of the same format as the eventPropertyName argument where the last property name identifies either a method name or writable property. If the listenerMethodName is null all methods in the interface trigger the action to be executed on the target. For example, to create a MouseListener that sets the target object\u0027s origin property to the incoming MouseEvent\u0027s location (that\u0027s the value of mouseEvent.getPoint()) each time a mouse button is pressed, one would write: EventHandler.create(MouseListener.class, target, \"origin\", \"point\", \"mousePressed\");\n This is comparable to writing a MouseListener in which all of the methods except mousePressed are no-ops: //Equivalent code using an inner class instead of EventHandler.\nnew MouseAdapter() {\n    public void mousePressed(MouseEvent e) {\n        target.setOrigin(e.getPoint());\n    }\n};",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type to create"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/EventHandler.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eEventHandler\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Proxy.html#newProxyInstance(java.lang.ClassLoader,java.lang.Class%5B%5D,java.lang.reflect.InvocationHandler)\"\u003e\u003ccode\u003eProxy.newProxyInstance(java.lang.ClassLoader, java.lang.Class\u0026lt;?\u0026gt;[], java.lang.reflect.InvocationHandler)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistenerInterface\u003c/code\u003e - the listener interface to create a proxy for",
          "\u003ccode\u003etarget\u003c/code\u003e - the object that will perform the action",
          "\u003ccode\u003eaction\u003c/code\u003e - the name of a (possibly qualified) property or method on the target",
          "\u003ccode\u003eeventPropertyName\u003c/code\u003e - the (possibly qualified) name of a readable property of the incoming event",
          "\u003ccode\u003elistenerMethodName\u003c/code\u003e - the name of the method in the listener interface that should trigger the action"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elistenerInterface\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etarget\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eaction\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if creating a Proxy for \n\u003ccode\u003elistenerInterface\u003c/code\u003e fails for any of the restrictions specified by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Proxy.html#newProxyInstance(java.lang.ClassLoader,java.lang.Class%5B%5D,java.lang.reflect.InvocationHandler)\"\u003e\u003ccode\u003eProxy.newProxyInstance(java.lang.ClassLoader, java.lang.Class\u0026lt;?\u0026gt;[], java.lang.reflect.InvocationHandler)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an object that implements \n\u003ccode\u003elistenerInterface\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "target",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "eventPropertyName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "listenerMethodName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new EventHandler object; you generally use one of the create methods instead of invoking this constructor directly. Refer to the general version of create for a complete description of the eventPropertyName and listenerMethodName parameter.",
      "annotations": [
        {
          "type": {
            "name": "ConstructorProperties",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": [
                "target",
                "action",
                "eventPropertyName",
                "listenerMethodName"
              ]
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/EventHandler.html\" title\u003d\"class in java.beans\"\u003e\u003ccode\u003eEventHandler\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/EventHandler.html#create(java.lang.Class,java.lang.Object,java.lang.String,java.lang.String,java.lang.String)\"\u003e\u003ccode\u003ecreate(Class, Object, String, String, String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/EventHandler.html#getTarget()\"\u003e\u003ccode\u003egetTarget()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/EventHandler.html#getAction()\"\u003e\u003ccode\u003egetAction()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/EventHandler.html#getEventPropertyName()\"\u003e\u003ccode\u003egetEventPropertyName()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/EventHandler.html#getListenerMethodName()\"\u003e\u003ccode\u003egetListenerMethodName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the object that will perform the action",
          "\u003ccode\u003eaction\u003c/code\u003e - the name of a (possibly qualified) property or method on the target",
          "\u003ccode\u003eeventPropertyName\u003c/code\u003e - the (possibly qualified) name of a readable property of the incoming event",
          "\u003ccode\u003elistenerMethodName\u003c/code\u003e - the name of the method in the listener interface that should trigger the action"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etarget\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eaction\u003c/code\u003e is null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.beans.EventHandler",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Proxy.html\" title\u003d\"class in java.lang.reflect\"\u003e\u003ccode\u003eProxy\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/EventObject.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eEventObject\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}