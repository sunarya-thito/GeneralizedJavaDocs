{
  "packageName": "java.beans",
  "simpleName": "ConstructorProperties",
  "moduleName": "java.desktop",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.beans.ConstructorProperties",
  "comment": "\u003cp\u003eAn annotation on a constructor that shows how the parameters of that constructor correspond to the constructed object\u0027s getter methods. For example: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e   public class Point {\n       @ConstructorProperties({\"x\", \"y\"})\n       public Point(int x, int y) {\n           this.x \u003d x;\n           this.y \u003d y;\n       }\n\n       public int getX() {\n           return x;\n       }\n\n       public int getY() {\n           return y;\n       }\n\n       private final int x, y;\n   }\n\u003c/pre\u003e \n\u003c/blockquote\u003e The annotation shows that the first parameter of the constructor can be retrieved with the \n\u003ccode\u003egetX()\u003c/code\u003e method and the second with the \n\u003ccode\u003egetY()\u003c/code\u003e method. Since parameter names are not in general available at runtime, without the annotation there would be no way to know whether the parameters correspond to \n\u003ccode\u003egetX()\u003c/code\u003e and \n\u003ccode\u003egetY()\u003c/code\u003e or the other way around.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}