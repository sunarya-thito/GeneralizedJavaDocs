{
  "packageName": "java.beans",
  "simpleName": "Beans",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "name": "cls",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "beanName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "instantiate",
      "comment": "Instantiate a JavaBean.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecls\u003c/code\u003e - the class-loader from which we should create the bean. If this is null, then the system class-loader is used.",
          "\u003ccode\u003ebeanName\u003c/code\u003e - the name of the bean within the class-loader. For example \"sun.beanbox.foobah\""
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if the class of a serialized object could not be found.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ],
        "return": [
          "a JavaBean"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "name": "cls",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "beanName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.beans.beancontext.BeanContext",
            "type": "Class"
          },
          "name": "beanContext",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "instantiate",
      "comment": "Instantiate a JavaBean.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecls\u003c/code\u003e - the class-loader from which we should create the bean. If this is null, then the system class-loader is used.",
          "\u003ccode\u003ebeanName\u003c/code\u003e - the name of the bean within the class-loader. For example \"sun.beanbox.foobah\"",
          "\u003ccode\u003ebeanContext\u003c/code\u003e - The BeanContext in which to nest the new bean"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if the class of a serialized object could not be found.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ],
        "return": [
          "a JavaBean"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "name": "cls",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "beanName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.beans.beancontext.BeanContext",
            "type": "Class"
          },
          "name": "beanContext",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.beans.AppletInitializer",
            "type": "Class"
          },
          "name": "initializer",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "instantiate",
      "comment": "Instantiate a bean. The bean is created based on a name relative to a class-loader. This name should be a dot-separated name such as \"a.b.c\". In Beans 1.0 the given name can indicate either a serialized object or a class. Other mechanisms may be added in the future. In beans 1.0 we first try to treat the beanName as a serialized object name then as a class name. When using the beanName as a serialized object name we convert the given beanName to a resource pathname and add a trailing \".ser\" suffix. We then try to load a serialized object from that resource. For example, given a beanName of \"x.y\", Beans.instantiate would first try to read a serialized object from the resource \"x/y.ser\" and if that failed it would try to load the class \"x.y\" and create an instance of that class. If the bean is a subtype of java.applet.Applet, then it is given some special initialization. First, it is supplied with a default AppletStub and AppletContext. Second, if it was instantiated from a classname the applet\u0027s \"init\" method is called. (If the bean was deserialized this step is skipped.) Note that for beans which are applets, it is the caller\u0027s responsiblity to call \"start\" on the applet. For correct behaviour, this should be done after the applet has been added into a visible AWT container. Note that applets created via beans.instantiate run in a slightly different environment than applets running inside browsers. In particular, bean applets have no access to \"parameters\", so they may wish to provide property get/set methods to set parameter values. We advise bean-applet developers to test their bean-applets against both the JDK appletviewer (for a reference browser environment) and the BDK BeanBox (for a reference bean container).",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecls\u003c/code\u003e - the class-loader from which we should create the bean. If this is null, then the system class-loader is used.",
          "\u003ccode\u003ebeanName\u003c/code\u003e - the name of the bean within the class-loader. For example \"sun.beanbox.foobah\"",
          "\u003ccode\u003ebeanContext\u003c/code\u003e - The BeanContext in which to nest the new bean",
          "\u003ccode\u003einitializer\u003c/code\u003e - The AppletInitializer for the new bean"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if the class of a serialized object could not be found.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ],
        "return": [
          "a JavaBean"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "bean",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "targetType",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstanceOf",
      "comment": "From a given bean, obtain an object representing a specified type view of that source object. The result may be the same object or a different object. If the requested target view isn\u0027t available then the given bean is returned. This method is provided in Beans 1.0 as a hook to allow the addition of more flexible bean behaviour in the future.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebean\u003c/code\u003e - Object from which we want to obtain a view.",
          "\u003ccode\u003etargetType\u003c/code\u003e - The type of view we\u0027d like to get."
        ],
        "return": [
          "an object representing a specified type view of the source object"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "bean",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "targetType",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isInstanceOf",
      "comment": "Check if a bean can be viewed as a given target type. The result will be true if the Beans.getInstanceof method can be used on the given bean to obtain an object that represents the specified targetType type view.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebean\u003c/code\u003e - Bean from which we want to obtain a view.",
          "\u003ccode\u003etargetType\u003c/code\u003e - The type of view we\u0027d like to get."
        ],
        "return": [
          "\"true\" if the given bean supports the given targetType."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isDesignTime",
      "comment": "Test if we are in design-mode.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/DesignMode.html\" title\u003d\"interface in java.beans\"\u003e\u003ccode\u003eDesignMode\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "True if we are running in an application construction environment."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isGuiAvailable",
      "comment": "Determines whether beans can assume a GUI is available.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/Visibility.html\" title\u003d\"interface in java.beans\"\u003e\u003ccode\u003eVisibility\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "True if we are running in an environment where beans can assume that an interactive GUI is available, so they can pop up dialog boxes, etc. This will normally return true in a windowing environment, and will normally return false in a server environment or if an application is running as part of a batch job."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isDesignTime",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDesignTime",
      "comment": "Used to indicate whether of not we are running in an application builder environment. Note that this method is security checked and is not available to (for example) untrusted applets. More specifically, if there is a security manager, its checkPropertiesAccess method is called. This could result in a SecurityException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPropertiesAccess()\"\u003e\u003ccode\u003eSecurityManager.checkPropertiesAccess()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eisDesignTime\u003c/code\u003e - True if we\u0027re in an application builder tool."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPropertiesAccess\u003c/code\u003e method doesn\u0027t allow setting of system properties."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isGuiAvailable",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setGuiAvailable",
      "comment": "Used to indicate whether of not we are running in an environment where GUI interaction is available. Note that this method is security checked and is not available to (for example) untrusted applets. More specifically, if there is a security manager, its checkPropertiesAccess method is called. This could result in a SecurityException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPropertiesAccess()\"\u003e\u003ccode\u003eSecurityManager.checkPropertiesAccess()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eisGuiAvailable\u003c/code\u003e - True if GUI interaction is available."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPropertiesAccess\u003c/code\u003e method doesn\u0027t allow setting of system properties."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a Beans.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.beans.Beans",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.1"
    ]
  }
}