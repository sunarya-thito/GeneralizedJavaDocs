{
  "packageName": "java.beans",
  "simpleName": "Introspector",
  "moduleName": "java.desktop",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "USE_ALL_BEANINFO",
      "comment": "Flag to indicate to use of all beaninfo.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.beans.Introspector.USE_ALL_BEANINFO\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IGNORE_IMMEDIATE_BEANINFO",
      "comment": "Flag to indicate to ignore immediate beaninfo.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.beans.Introspector.IGNORE_IMMEDIATE_BEANINFO\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IGNORE_ALL_BEANINFO",
      "comment": "Flag to indicate to ignore all beaninfo.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.beans.Introspector.IGNORE_ALL_BEANINFO\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.BeanInfo",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "beanClass",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBeanInfo",
      "comment": "Introspect on a Java Bean and learn about all its properties, exposed methods, and events. If the BeanInfo class for a Java Bean has been previously Introspected then the BeanInfo class is retrieved from the BeanInfo cache.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/Introspector.html#flushCaches()\"\u003e\u003ccode\u003eflushCaches()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/Introspector.html#flushFromCaches(java.lang.Class)\"\u003e\u003ccode\u003eflushFromCaches(java.lang.Class\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebeanClass\u003c/code\u003e - The bean class to be analyzed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if an exception occurs during introspection."
        ],
        "return": [
          "A BeanInfo object describing the target bean."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.BeanInfo",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "beanClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "flags",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBeanInfo",
      "comment": "Introspect on a Java bean and learn about all its properties, exposed methods, and events, subject to some control flags. If the BeanInfo class for a Java Bean has been previously Introspected based on the same arguments then the BeanInfo class is retrieved from the BeanInfo cache.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebeanClass\u003c/code\u003e - The bean class to be analyzed.",
          "\u003ccode\u003eflags\u003c/code\u003e - Flags to control the introspection. If flags \u003d\u003d USE_ALL_BEANINFO then we use all of the BeanInfo classes we can discover. If flags \u003d\u003d IGNORE_IMMEDIATE_BEANINFO then we ignore any BeanInfo associated with the specified beanClass. If flags \u003d\u003d IGNORE_ALL_BEANINFO then we ignore all BeanInfo associated with the specified beanClass or any of its parent classes."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if an exception occurs during introspection."
        ],
        "return": [
          "A BeanInfo object describing the target bean."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.BeanInfo",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "beanClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "stopClass",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBeanInfo",
      "comment": "Introspect on a Java bean and learn all about its properties, exposed methods, below a given \"stop\" point. If the BeanInfo class for a Java Bean has been previously Introspected based on the same arguments, then the BeanInfo class is retrieved from the BeanInfo cache.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebeanClass\u003c/code\u003e - The bean class to be analyzed.",
          "\u003ccode\u003estopClass\u003c/code\u003e - The baseclass at which to stop the analysis. Any methods/properties/events in the stopClass or in its baseclasses will be ignored in the analysis."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if an exception occurs during introspection."
        ],
        "return": [
          "the BeanInfo for the bean"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.beans.BeanInfo",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.beans.IntrospectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "beanClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "stopClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "flags",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBeanInfo",
      "comment": "Introspect on a Java Bean and learn about all its properties, exposed methods and events, below a given stopClass point subject to some control flags. USE_ALL_BEANINFO Any BeanInfo that can be discovered will be used. IGNORE_IMMEDIATE_BEANINFO Any BeanInfo associated with the specified beanClass will be ignored. IGNORE_ALL_BEANINFO Any BeanInfo associated with the specified beanClass or any of its parent classes will be ignored. Any methods/properties/events in the stopClass or in its parent classes will be ignored in the analysis. If the BeanInfo class for a Java Bean has been previously introspected based on the same arguments then the BeanInfo class is retrieved from the BeanInfo cache.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebeanClass\u003c/code\u003e - the bean class to be analyzed",
          "\u003ccode\u003estopClass\u003c/code\u003e - the parent class at which to stop the analysis",
          "\u003ccode\u003eflags\u003c/code\u003e - flags to control the introspection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/beans/IntrospectionException.html\" title\u003d\"class in java.beans\"\u003eIntrospectionException\u003c/a\u003e\u003c/code\u003e - if an exception occurs during introspection"
        ],
        "return": [
          "a BeanInfo object describing the target bean"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "decapitalize",
      "comment": "Utility method to take a string and convert it to normal Java variable name capitalization. This normally means converting the first character from upper case to lower case, but in the (unusual) special case when there is more than one character and both the first and second characters are upper case, we leave it alone. Thus \"FooBah\" becomes \"fooBah\" and \"X\" becomes \"x\", but \"URL\" stays as \"URL\".",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The string to be decapitalized."
        ],
        "return": [
          "The decapitalized version of the string."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBeanInfoSearchPath",
      "comment": "Gets the list of package names that will be used for finding BeanInfo classes.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The array of package names that will be searched in order to find BeanInfo classes. The default value for this array is implementation-dependent; e.g. Sun implementation initially sets to {\"sun.beans.infos\"}."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setBeanInfoSearchPath",
      "comment": "Change the list of package names that will be used for finding BeanInfo classes. The behaviour of this method is undefined if parameter path is null. First, if there is a security manager, its checkPropertiesAccess method is called. This could result in a SecurityException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPropertiesAccess()\"\u003e\u003ccode\u003eSecurityManager.checkPropertiesAccess()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Array of package names."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPropertiesAccess\u003c/code\u003e method doesn\u0027t allow setting of system properties."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "flushCaches",
      "comment": "Flush all of the Introspector\u0027s internal caches. This method is not normally required. It is normally only needed by advanced tools that update existing \"Class\" objects in-place and need to make the Introspector re-analyze existing Class objects.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "clz",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "flushFromCaches",
      "comment": "Flush the Introspector\u0027s internal cached information for a given class. This method is not normally required. It is normally only needed by advanced tools that update existing \"Class\" objects in-place and need to make the Introspector re-analyze an existing Class object. Note that only the direct state associated with the target Class object is flushed. We do not flush state for other Class objects with the same name, nor do we flush state for any related Class objects (such as subclasses), even though their state may include information indirectly obtained from the target Class object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclz\u003c/code\u003e - Class object to be flushed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the Class object is null."
        ],
        "since": [
          "1.2"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.beans.Introspector",
  "comment": "The Introspector class provides a standard way for tools to learn about the properties, events, and methods supported by a target Java Bean. \n\u003cp\u003e For each of those three kinds of information, the Introspector will separately analyze the bean\u0027s class and superclasses looking for either explicit or implicit information and use that information to build a BeanInfo object that comprehensively describes the target bean. \u003c/p\u003e\n\u003cp\u003e For each class \"Foo\", explicit information may be available if there exists a corresponding \"FooBeanInfo\" class that provides a non-null value when queried for the information. We first look for the BeanInfo class by taking the full package-qualified name of the target bean class and appending \"BeanInfo\" to form a new class name. If this fails, then we take the final classname component of this name, and look for that class in each of the packages specified in the BeanInfo package search path. \u003c/p\u003e\n\u003cp\u003e Thus for a class such as \"sun.xyz.OurButton\" we would first look for a BeanInfo class called \"sun.xyz.OurButtonBeanInfo\" and if that failed we\u0027d look in each package in the BeanInfo search path for an OurButtonBeanInfo class. With the default search path, this would mean looking for \"sun.beans.infos.OurButtonBeanInfo\". \u003c/p\u003e\n\u003cp\u003e If a class provides explicit BeanInfo about itself then we add that to the BeanInfo information we obtained from analyzing any derived classes, but we regard the explicit information as being definitive for the current class and its base classes, and do not proceed any further up the superclass chain. \u003c/p\u003e\n\u003cp\u003e If we don\u0027t find explicit BeanInfo on a class, we use low-level reflection to study the methods of the class and apply standard design patterns to identify property accessors, event sources, or public methods. We then proceed to analyze the class\u0027s superclass and add in the information from it (and possibly on up the superclass chain). \u003c/p\u003e\n\u003cp\u003e For more information about introspection and design patterns, please consult the \u003ca href\u003d\"http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html\"\u003eJavaBeans specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.1"
    ]
  }
}