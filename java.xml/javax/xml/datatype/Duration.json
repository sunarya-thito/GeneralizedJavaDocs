{
  "packageName": "javax.xml.datatype",
  "simpleName": "Duration",
  "moduleName": "java.xml",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.xml.namespace.QName",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getXMLSchemaType",
      "comment": "Return the name of the XML Schema date/time type that this instance maps to. Type is computed based on fields that are set, i.e. isSet(DatatypeConstants.Field field) \u003d\u003d true. Required fields for XML Schema 1.0 Date/Time Datatypes. (timezone is optional for all date/time datatypes) Datatype year month day hour minute second DatatypeConstants.DURATION X X X X X X DatatypeConstants.DURATION_DAYTIME X X X X DatatypeConstants.DURATION_YEARMONTH X X",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - If the combination of set fields does not match one of the XML Schema date/time datatypes."
        ],
        "return": [
          "one of the following constants: \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/DatatypeConstants.html#DURATION\"\u003e\u003ccode\u003eDatatypeConstants.DURATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/DatatypeConstants.html#DURATION_DAYTIME\"\u003e\u003ccode\u003eDatatypeConstants.DURATION_DAYTIME\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/DatatypeConstants.html#DURATION_YEARMONTH\"\u003e\u003ccode\u003eDatatypeConstants.DURATION_YEARMONTH\u003c/code\u003e\u003c/a\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSign",
      "comment": "Returns the sign of this duration in -1,0, or 1.",
      "tagMap": {
        "return": [
          "-1 if this duration is negative, 0 if the duration is zero, and 1 if the duration is positive."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getYears",
      "comment": "Get the years value of this Duration as an int or 0 if not present. getYears() is a convenience method for getField(DatatypeConstants.YEARS). As the return value is an int, an incorrect value will be returned for Durations with years that go beyond the range of an int. Use getField(DatatypeConstants.YEARS) to avoid possible loss of precision.",
      "tagMap": {
        "return": [
          "If the years field is present, return its value as an \n\u003ccode\u003eint\u003c/code\u003e, else return \n\u003ccode\u003e0\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMonths",
      "comment": "Obtains the value of the MONTHS field as an integer value, or 0 if not present. This method works just like getYears() except that this method works on the MONTHS field.",
      "tagMap": {
        "return": [
          "Months of this \n\u003ccode\u003eDuration\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDays",
      "comment": "Obtains the value of the DAYS field as an integer value, or 0 if not present. This method works just like getYears() except that this method works on the DAYS field.",
      "tagMap": {
        "return": [
          "Days of this \n\u003ccode\u003eDuration\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHours",
      "comment": "Obtains the value of the HOURS field as an integer value, or 0 if not present. This method works just like getYears() except that this method works on the HOURS field.",
      "tagMap": {
        "return": [
          "Hours of this \n\u003ccode\u003eDuration\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinutes",
      "comment": "Obtains the value of the MINUTES field as an integer value, or 0 if not present. This method works just like getYears() except that this method works on the MINUTES field.",
      "tagMap": {
        "return": [
          "Minutes of this \n\u003ccode\u003eDuration\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSeconds",
      "comment": "Obtains the value of the SECONDS field as an integer value, or 0 if not present. This method works just like getYears() except that this method works on the SECONDS field.",
      "tagMap": {
        "return": [
          "seconds in the integer value. The fraction of seconds will be discarded (for example, if the actual value is 2.5, this method returns 2)"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Calendar",
            "type": "Class"
          },
          "field": {
            "name": "startInstant"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTimeInMillis",
      "comment": "Returns the length of the duration in milli-seconds. If the seconds field carries more digits than milli-second order, those will be simply discarded (or in other words, rounded to zero.) For example, for any Calendar value x,  new Duration(\"PT10.00099S\").getTimeInMills(x) \u003d\u003d 10000\n new Duration(\"-PT10.00099S\").getTimeInMills(x) \u003d\u003d -10000\n Note that this method uses the addTo(Calendar) method, which may work incorrectly with Duration objects with very large values in its fields. See the addTo(Calendar) method for details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estartInstant\u003c/code\u003e - The length of a month/year varies. The \n\u003ccode\u003estartInstant\u003c/code\u003e is used to disambiguate this variance. Specifically, this method returns the difference between \n\u003ccode\u003estartInstant\u003c/code\u003e and \n\u003ccode\u003estartInstant+duration\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estartInstant\u003c/code\u003e parameter is null."
        ],
        "return": [
          "milliseconds between \n\u003ccode\u003estartInstant\u003c/code\u003e and \n\u003ccode\u003estartInstant\u003c/code\u003e plus this \n\u003ccode\u003eDuration\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "startInstant"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTimeInMillis",
      "comment": "Returns the length of the duration in milli-seconds. If the seconds field carries more digits than milli-second order, those will be simply discarded (or in other words, rounded to zero.) For example, for any Date value x,  new Duration(\"PT10.00099S\").getTimeInMills(x) \u003d\u003d 10000\n new Duration(\"-PT10.00099S\").getTimeInMills(x) \u003d\u003d -10000\n Note that this method uses the addTo(Date) method, which may work incorrectly with Duration objects with very large values in its fields. See the addTo(Date) method for details.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/Duration.html#getTimeInMillis(java.util.Calendar)\"\u003e\u003ccode\u003egetTimeInMillis(Calendar)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estartInstant\u003c/code\u003e - The length of a month/year varies. The \n\u003ccode\u003estartInstant\u003c/code\u003e is used to disambiguate this variance. Specifically, this method returns the difference between \n\u003ccode\u003estartInstant\u003c/code\u003e and \n\u003ccode\u003estartInstant+duration\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the startInstant parameter is null."
        ],
        "return": [
          "milliseconds between \n\u003ccode\u003estartInstant\u003c/code\u003e and \n\u003ccode\u003estartInstant\u003c/code\u003e plus this \n\u003ccode\u003eDuration\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Number",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.datatype.DatatypeConstants$Field",
            "type": "Class"
          },
          "field": {
            "name": "field"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getField",
      "comment": "Gets the value of a field. Fields of a duration object may contain arbitrary large value. Therefore this method is designed to return a Number object. In case of YEARS, MONTHS, DAYS, HOURS, and MINUTES, the returned number will be a non-negative integer. In case of seconds, the returned number may be a non-negative decimal value.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - one of the six Field constants (YEARS,MONTHS,DAYS,HOURS, MINUTES, or SECONDS.)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003efield\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "If the specified field is present, this method returns a non-null non-negative \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNumber\u003c/code\u003e\u003c/a\u003e object that represents its value. If it is not present, return null. For YEARS, MONTHS, DAYS, HOURS, and MINUTES, this method returns a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html\" title\u003d\"class in java.math\"\u003e\u003ccode\u003eBigInteger\u003c/code\u003e\u003c/a\u003e object. For SECONDS, this method returns a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html\" title\u003d\"class in java.math\"\u003e\u003ccode\u003eBigDecimal\u003c/code\u003e\u003c/a\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.datatype.DatatypeConstants$Field",
            "type": "Class"
          },
          "field": {
            "name": "field"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isSet",
      "comment": "Checks if a field is set. A field of a duration object may or may not be present. This method can be used to test if a field is present.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - one of the six Field constants (YEARS,MONTHS,DAYS,HOURS, MINUTES, or SECONDS.)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the field parameter is null."
        ],
        "return": [
          "true if the field is present. false if not."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.datatype.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.datatype.Duration",
            "type": "Class"
          },
          "field": {
            "name": "rhs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "add",
      "comment": "Computes a new duration whose value is this+rhs. For example,  \"1 day\" + \"-3 days\" \u003d \"-2 days\"\n \"1 year\" + \"1 day\" \u003d \"1 year and 1 day\"\n \"-(1 hour,50 minutes)\" + \"-20 minutes\" \u003d \"-(1 hours,70 minutes)\"\n \"15 hours\" + \"-3 days\" \u003d \"-(2 days,9 hours)\"\n \"1 year\" + \"-1 day\" \u003d IllegalStateException\n Since there\u0027s no way to meaningfully subtract 1 day from 1 month, there are cases where the operation fails in IllegalStateException. Formally, the computation is defined as follows. Firstly, we can assume that two Durations to be added are both positive without losing generality (i.e., (-X)+Y\u003dY-X, X+(-Y)\u003dX-Y, (-X)+(-Y)\u003d-(X+Y)) Addition of two positive Durations are simply defined as field by field addition where missing fields are treated as 0. A field of the resulting Duration will be unset if and only if respective fields of two input Durations are unset. Note that lhs.add(rhs) will be always successful if lhs.signum()*rhs.signum()!\u003d-1 or both of them are normalized.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/Duration.html#subtract(javax.xml.datatype.Duration)\"\u003e\u003ccode\u003esubtract(Duration)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erhs\u003c/code\u003e - \n\u003ccode\u003eDuration\u003c/code\u003e to add to this \n\u003ccode\u003eDuration\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the rhs parameter is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - If two durations cannot be meaningfully added. For example, adding negative one day to one month causes this exception."
        ],
        "return": [
          "non-null valid Duration object."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Calendar",
            "type": "Class"
          },
          "field": {
            "name": "calendar"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "addTo",
      "comment": "Adds this duration to a Calendar object. Calls Calendar.add(int,int) in the order of YEARS, MONTHS, DAYS, HOURS, MINUTES, SECONDS, and MILLISECONDS if those fields are present. Because the Calendar class uses int to hold values, there are cases where this method won\u0027t work correctly (for example if values of fields exceed the range of int.) Also, since this duration class is a Gregorian duration, this method will not work correctly if the given Calendar object is based on some other calendar systems. Any fractional parts of this Duration object beyond milliseconds will be simply ignored. For example, if this duration is \"P1.23456S\", then 1 is added to SECONDS, 234 is added to MILLISECONDS, and the rest will be unused. Note that because Calendar.add(int, int) is using int, Duration with values beyond the range of int in its fields will cause overflow/underflow to the given Calendar. XMLGregorianCalendar.add(Duration) provides the same basic operation as this method while avoiding the overflow/underflow issues.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecalendar\u003c/code\u003e - A calendar object whose value will be modified."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the calendar parameter is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "date"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addTo",
      "comment": "Adds this duration to a Date object. The given date is first converted into a GregorianCalendar, then the duration is added exactly like the addTo(Calendar) method. The updated time instant is then converted back into a Date object and used to update the given Date object. This somewhat redundant computation is necessary to unambiguously determine the duration of months and years.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edate\u003c/code\u003e - A date object whose value will be modified."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the date parameter is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.datatype.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.datatype.Duration",
            "type": "Class"
          },
          "field": {
            "name": "rhs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subtract",
      "comment": "Computes a new duration whose value is this-rhs. For example:  \"1 day\" - \"-3 days\" \u003d \"4 days\"\n \"1 year\" - \"1 day\" \u003d IllegalStateException\n \"-(1 hour,50 minutes)\" - \"-20 minutes\" \u003d \"-(1hours,30 minutes)\"\n \"15 hours\" - \"-3 days\" \u003d \"3 days and 15 hours\"\n \"1 year\" - \"-1 day\" \u003d \"1 year and 1 day\"\n Since there\u0027s no way to meaningfully subtract 1 day from 1 month, there are cases where the operation fails in IllegalStateException. Formally the computation is defined as follows. First, we can assume that two Durations are both positive without losing generality. (i.e., (-X)-Y\u003d-(X+Y), X-(-Y)\u003dX+Y, (-X)-(-Y)\u003d-(X-Y)) Then two durations are subtracted field by field. If the sign of any non-zero field F is different from the sign of the most significant field, 1 (if F is negative) or -1 (otherwise) will be borrowed from the next bigger unit of F. This process is repeated until all the non-zero fields have the same sign. If a borrow occurs in the days field (in other words, if the computation needs to borrow 1 or -1 month to compensate days), then the computation fails by throwing an IllegalStateException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/Duration.html#add(javax.xml.datatype.Duration)\"\u003e\u003ccode\u003eadd(Duration)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erhs\u003c/code\u003e - \n\u003ccode\u003eDuration\u003c/code\u003e to subtract from this \n\u003ccode\u003eDuration\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - If two durations cannot be meaningfully subtracted. For example, subtracting one day from one month causes this exception.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the rhs parameter is null."
        ],
        "return": [
          "New \n\u003ccode\u003eDuration\u003c/code\u003e created from subtracting \n\u003ccode\u003erhs\u003c/code\u003e from this \n\u003ccode\u003eDuration\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.datatype.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "factor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "multiply",
      "comment": "Computes a new duration whose value is factor times longer than the value of this duration. This method is provided for the convenience. It is functionally equivalent to the following code:  multiply(new BigDecimal(String.valueOf(factor)))",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/Duration.html#multiply(java.math.BigDecimal)\"\u003e\u003ccode\u003emultiply(BigDecimal)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efactor\u003c/code\u003e - Factor times longer of new \n\u003ccode\u003eDuration\u003c/code\u003e to create."
        ],
        "return": [
          "New \n\u003ccode\u003eDuration\u003c/code\u003e that is \n\u003ccode\u003efactor\u003c/code\u003etimes longer than this \n\u003ccode\u003eDuration\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.datatype.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "factor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "multiply",
      "comment": "Computes a new duration whose value is factor times longer than the value of this duration. For example,  \"P1M\" (1 month) * \"12\" \u003d \"P12M\" (12 months)\n \"PT1M\" (1 min) * \"0.3\" \u003d \"PT18S\" (18 seconds)\n \"P1M\" (1 month) * \"1.5\" \u003d IllegalStateException\n Since the Duration class is immutable, this method doesn\u0027t change the value of this object. It simply computes a new Duration object and returns it. The operation will be performed field by field with the precision of BigDecimal. Since all the fields except seconds are restricted to hold integers, any fraction produced by the computation will be carried down toward the next lower unit. For example, if you multiply \"P1D\" (1 day) with \"0.5\", then it will be 0.5 day, which will be carried down to \"PT12H\" (12 hours). When fractions of month cannot be meaningfully carried down to days, or year to months, this will cause an IllegalStateException to be thrown. For example if you multiple one month by 0.5. To avoid IllegalStateException, use the normalizeWith(Calendar) method to remove the years and months fields.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efactor\u003c/code\u003e - to multiply by"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if operation produces fraction in the months field.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003efactor\u003c/code\u003e parameter is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "returns a non-null valid \n\u003ccode\u003eDuration\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.datatype.Duration",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "negate",
      "comment": "Returns a new Duration object whose value is -this. Since the Duration class is immutable, this method doesn\u0027t change the value of this object. It simply computes a new Duration object and returns it.",
      "tagMap": {
        "return": [
          "always return a non-null valid \n\u003ccode\u003eDuration\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.datatype.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Calendar",
            "type": "Class"
          },
          "field": {
            "name": "startTimeInstant"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "normalizeWith",
      "comment": "Converts the years and months fields into the days field by using a specific time instant as the reference point. For example, duration of one month normalizes to 31 days given the start time instance \"July 8th 2003, 17:40:32\". Formally, the computation is done as follows: the given Calendar object is cloned the years, months and days fields will be added to the Calendar object by using the Calendar.add(int,int) method the difference between the two Calendars in computed in milliseconds and converted to days, if a remainder occurs due to Daylight Savings Time, it is discarded the computed days, along with the hours, minutes and seconds fields of this duration object is used to construct a new Duration object. Note that since the Calendar class uses int to hold the value of year and month, this method may produce an unexpected result if this duration object holds a very large value in the years or months fields.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estartTimeInstant\u003c/code\u003e - \n\u003ccode\u003eCalendar\u003c/code\u003e reference point."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the startTimeInstant parameter is null."
        ],
        "return": [
          "\u003ccode\u003eDuration\u003c/code\u003e of years and months of this \n\u003ccode\u003eDuration\u003c/code\u003e as days."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.datatype.Duration",
            "type": "Class"
          },
          "field": {
            "name": "duration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "compare",
      "comment": "Partial order relation comparison with this Duration instance. Comparison result must be in accordance with W3C XML Schema 1.0 Part 2, Section 3.2.7.6.2, Order relation on duration. Return: DatatypeConstants.LESSER if this Duration is shorter than duration parameter DatatypeConstants.EQUAL if this Duration is equal to duration parameter DatatypeConstants.GREATER if this Duration is longer than duration parameter DatatypeConstants.INDETERMINATE if a conclusive partial order relation cannot be determined",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/Duration.html#isShorterThan(javax.xml.datatype.Duration)\"\u003e\u003ccode\u003eisShorterThan(Duration)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/Duration.html#isLongerThan(javax.xml.datatype.Duration)\"\u003e\u003ccode\u003eisLongerThan(Duration)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - to compare"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If the underlying implementation cannot reasonably process the request, e.g. W3C XML Schema allows for arbitrarily large/small/precise values, the request may be beyond the implementations capability.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eduration\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "the relationship between \n\u003ccode\u003ethis Duration\u003c/code\u003e and \n\u003ccode\u003eduration\u003c/code\u003e parameter as \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/DatatypeConstants.html#LESSER\"\u003e\u003ccode\u003eDatatypeConstants.LESSER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/DatatypeConstants.html#EQUAL\"\u003e\u003ccode\u003eDatatypeConstants.EQUAL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/DatatypeConstants.html#GREATER\"\u003e\u003ccode\u003eDatatypeConstants.GREATER\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/DatatypeConstants.html#INDETERMINATE\"\u003e\u003ccode\u003eDatatypeConstants.INDETERMINATE\u003c/code\u003e\u003c/a\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.datatype.Duration",
            "type": "Class"
          },
          "field": {
            "name": "duration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLongerThan",
      "comment": "Checks if this duration object is strictly longer than another Duration object. Duration X is \"longer\" than Y if and only if X \u003e Y as defined in the section 3.2.6.2 of the XML Schema 1.0 specification. For example, \"P1D\" (one day) \u003e \"PT12H\" (12 hours) and \"P2Y\" (two years) \u003e \"P23M\" (23 months).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/Duration.html#isShorterThan(javax.xml.datatype.Duration)\"\u003e\u003ccode\u003eisShorterThan(Duration)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/Duration.html#compare(javax.xml.datatype.Duration)\"\u003e\u003ccode\u003ecompare(Duration duration)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - \n\u003ccode\u003eDuration\u003c/code\u003e to test this \n\u003ccode\u003eDuration\u003c/code\u003e against."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If the underlying implementation cannot reasonably process the request, e.g. W3C XML Schema allows for arbitrarily large/small/precise values, the request may be beyond the implementations capability.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eduration\u003c/code\u003e is null."
        ],
        "return": [
          "true if the duration represented by this object is longer than the given duration. false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.datatype.Duration",
            "type": "Class"
          },
          "field": {
            "name": "duration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isShorterThan",
      "comment": "Checks if this duration object is strictly shorter than another Duration object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/Duration.html#isLongerThan(javax.xml.datatype.Duration)\"\u003e\u003ccode\u003eisLongerThan(Duration duration)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/Duration.html#compare(javax.xml.datatype.Duration)\"\u003e\u003ccode\u003ecompare(Duration duration)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - \n\u003ccode\u003eDuration\u003c/code\u003e to test this \n\u003ccode\u003eDuration\u003c/code\u003e against."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If the underlying implementation cannot reasonably process the request, e.g. W3C XML Schema allows for arbitrarily large/small/precise values, the request may be beyond the implementations capability.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eduration\u003c/code\u003e is null."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003eduration\u003c/code\u003e parameter is shorter than this \n\u003ccode\u003eDuration\u003c/code\u003e, else \n\u003ccode\u003efalse\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "duration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Checks if this duration object has the same duration as another Duration object. For example, \"P1D\" (1 day) is equal to \"PT24H\" (24 hours). Duration X is equal to Y if and only if time instant t+X and t+Y are the same for all the test time instants specified in the section 3.2.6.2 of the XML Schema 1.0 specification. Note that there are cases where two Durations are \"incomparable\" to each other, like one month and 30 days. For example,  !new Duration(\"P1M\").isShorterThan(new Duration(\"P30D\"))\n !new Duration(\"P1M\").isLongerThan(new Duration(\"P30D\"))\n !new Duration(\"P1M\").equals(new Duration(\"P30D\"))",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/Duration.html#compare(javax.xml.datatype.Duration)\"\u003e\u003ccode\u003ecompare(Duration duration)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - The object to compare this \n\u003ccode\u003eDuration\u003c/code\u003e against."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If the underlying implementation cannot reasonably process the request, e.g. W3C XML Schema allows for arbitrarily large/small/precise values, the request may be beyond the implementations capability."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this duration is the same length as \n\u003ccode\u003eduration\u003c/code\u003e. \n\u003ccode\u003efalse\u003c/code\u003e if \n\u003ccode\u003eduration\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, is not a \n\u003ccode\u003eDuration\u003c/code\u003e object, or its length is different from this duration."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "hashCode",
      "comment": "Returns a hash code consistent with the definition of the equals method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a String representation of this Duration Object. The result is formatted according to the XML Schema 1.0 spec and can be always parsed back later into the equivalent Duration Object by DatatypeFactory.newDuration(String lexicalRepresentation). Formally, the following holds for any Duration Object x:  new Duration(x.toString()).equals(x)",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A non-\n\u003ccode\u003enull\u003c/code\u003e valid \n\u003ccode\u003eString\u003c/code\u003e representation of this \n\u003ccode\u003eDuration\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Default no-arg constructor. Note: Always use the DatatypeFactory to construct an instance of Duration. The constructor on this class cannot be guaranteed to produce an object with a consistent state and may be removed in the future.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.xml.datatype.Duration",
  "comment": "\u003cp\u003eImmutable representation of a time span as defined in the W3C XML Schema 1.0 specification. \u003c/p\u003e\n\u003cp\u003eA Duration object represents a period of Gregorian time, which consists of six fields (years, months, days, hours, minutes, and seconds) plus a sign (+/-) field. \u003c/p\u003e\n\u003cp\u003eThe first five fields have non-negative (\u0026gt;\u003d0) integers or null (which represents that the field is not set), and the seconds field has a non-negative decimal or null. A negative sign indicates a negative duration. \u003c/p\u003e\n\u003cp\u003eThis class provides a number of methods that make it easy to use for the duration datatype of XML Schema 1.0 with the errata. \u003c/p\u003e\n\u003ch2\u003eOrder relationship\u003c/h2\u003e \n\u003cp\u003eDuration objects only have partial order, where two values A and B maybe either: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003eA\u0026lt;B (A is shorter than B) \u003c/li\u003e\n \u003cli\u003eA\u0026gt;B (A is longer than B) \u003c/li\u003e\n \u003cli\u003eA\u003d\u003dB (A and B are of the same duration) \u003c/li\u003e\n \u003cli\u003eA\u0026lt;\u0026gt;B (Comparison between A and B is indeterminate) \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eFor example, 30 days cannot be meaningfully compared to one month. The \u003ca href\u003d\"#compare(javax.xml.datatype.Duration)\"\u003e\u003ccode\u003ecompare(Duration duration)\u003c/code\u003e\u003c/a\u003e method implements this relationship. \u003c/p\u003e\n\u003cp\u003eSee the \u003ca href\u003d\"#isLongerThan(javax.xml.datatype.Duration)\"\u003e\u003ccode\u003eisLongerThan(Duration)\u003c/code\u003e\u003c/a\u003e method for details about the order relationship among \u003ccode\u003eDuration\u003c/code\u003e objects. \u003c/p\u003e\n\u003ch2\u003eOperations over Duration\u003c/h2\u003e \n\u003cp\u003eThis class provides a set of basic arithmetic operations, such as addition, subtraction and multiplication. Because durations don\u0027t have total order, an operation could fail for some combinations of operations. For example, you cannot subtract 15 days from 1 month. See the javadoc of those methods for detailed conditions where this could happen. \u003c/p\u003e\n\u003cp\u003eAlso, division of a duration by a number is not provided because the \u003ccode\u003eDuration\u003c/code\u003e class can only deal with finite precision decimal numbers. For example, one cannot represent 1 sec divided by 3. \u003c/p\u003e\n\u003cp\u003eHowever, you could substitute a division by 3 with multiplying by numbers such as 0.3 or 0.333. \u003c/p\u003e\n\u003ch2\u003eRange of allowed values\u003c/h2\u003e \n\u003cp\u003e Because some operations of \u003ccode\u003eDuration\u003c/code\u003e rely on \u003ca href\u003d\"../../../../java.base/java/util/Calendar.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eCalendar\u003c/code\u003e\u003c/a\u003e even though \u003ca href\u003d\"Duration.html\" title\u003d\"class in javax.xml.datatype\"\u003e\u003ccode\u003eDuration\u003c/code\u003e\u003c/a\u003e can hold very large or very small values, some of the methods may not work correctly on such \u003ccode\u003eDuration\u003c/code\u003es. The impacted methods document their dependency on \u003ca href\u003d\"../../../../java.base/java/util/Calendar.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eCalendar\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/datatype/XMLGregorianCalendar.html#add(javax.xml.datatype.Duration)\"\u003e\u003ccode\u003eXMLGregorianCalendar.add(Duration)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}