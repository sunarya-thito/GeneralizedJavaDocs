{
  "packageName": "javax.xml.catalog",
  "simpleName": "Catalog",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "matchSystem",
      "comment": "Attempts to find a matching entry in the catalog by systemId. The method searches through the system-type entries, including system, rewriteSystem, systemSuffix, delegateSystem, and group entries in the current catalog in order to find a match. Resolution follows the steps listed below: If a matching system entry exists, it is returned immediately. If more than one rewriteSystem entry matches, the matching entry with the longest normalized systemIdStartString value is returned. If more than one systemSuffix entry matches, the matching entry with the longest normalized systemIdSuffix value is returned. If more than one delegateSystem entry matches, the matching entry with the longest matching systemIdStartString value is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esystemId\u003c/code\u003e - the system identifier of the entity to be matched"
        ],
        "return": [
          "a URI string if a mapping is found, or null otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "matchPublic",
      "comment": "Attempts to find a matching entry in the catalog by publicId. The method searches through the public-type entries, including public, delegatePublic, and group entries in the current catalog in order to find a match. Refer to the description about Feature PREFER in the table Catalog Features in class CatalogFeatures. Public entries are only considered if the prefer is public and system entries are not found. Resolution follows the steps listed below: If a matching public entry is found, it is returned immediately. If more than one delegatePublic entry matches, the matching entry with the longest matching publicIdStartString value is returned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/catalog/CatalogFeatures.Feature.html\" title\u003d\"enum class in javax.xml.catalog\"\u003e\u003ccode\u003eCatalogFeatures.Feature\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epublicId\u003c/code\u003e - the public identifier of the entity to be matched"
        ],
        "return": [
          "a URI string if a mapping is found, or null otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "matchURI",
      "comment": "Attempts to find a matching entry in the catalog by the uri element. The method searches through the uri-type entries, including uri, rewriteURI, uriSuffix, delegateURI and group entries in the current catalog in order to find a match. Resolution follows the steps listed below: If a matching uri entry is found, it is returned immediately. If more than one rewriteURI entry matches, the matching entry with the longest normalized uriStartString value is returned. If more than one uriSuffix entry matches, the matching entry with the longest normalized uriSuffix value is returned. If more than one delegatePublic entry matches, the matching entry with the longest matching uriStartString value is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - the URI reference of the entity to be matched"
        ],
        "return": [
          "a URI string if a mapping is found, or null otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "javax.xml.catalog.Catalog",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "catalogs",
      "comment": "Returns a sequential Stream of alternative Catalogs specified using the nextCatalog entries in the current catalog, and as the input of catalog files excluding the current catalog (that is, the first in the input list) when the Catalog object is created by the CatalogManager. The order of Catalogs in the returned stream is the same as the order in which the corresponding nextCatalog entries appear in the current catalog. The alternative catalogs from the input file list are appended to the end of the stream in the order they are entered.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a sequential Stream of Catalogs"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.xml.catalog.Catalog",
  "comment": "The Catalog class represents an entity Catalog as defined by \n\u003ca href\u003d\"https://www.oasis-open.org/committees/download.php/14809/xml-catalogs.html\"\u003e XML Catalogs, OASIS Standard V1.1, 7 October 2005\u003c/a\u003e. \n\u003cp\u003e A catalog is an XML file that contains a root \u003ccode\u003ecatalog\u003c/code\u003e entry with a list of catalog entries. The entries can also be grouped with a \u003ccode\u003egroup\u003c/code\u003e entry. The catalog and group entries may specify \u003ccode\u003eprefer\u003c/code\u003e and \u003ccode\u003exml:base\u003c/code\u003e attributes that set preference of public or system type of entries and base URI to resolve relative URIs. \u003c/p\u003e\n\u003cp\u003e A catalog can be used in two situations: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eLocate the external resources with a public or system identifier; \u003c/li\u003e \n \u003cli\u003eLocate an alternate URI reference with a URI. \u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e For case 1, the standard defines 6 External Identifier Entries:\u003cbr\u003e \u003ccode\u003epublic, system, rewriteSystem, systemSuffix, delegatePublic, and delegateSystem\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e While for case 2, it defines 4 URI Entries:\u003cbr\u003e \u003ccode\u003euri, rewriteURI, uriSuffix and delegateURI\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e In addition to the above entry types, a catalog may define nextCatalog entries to add additional catalog entry files.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "9"
    ]
  }
}