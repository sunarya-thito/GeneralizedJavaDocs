{
  "packageName": "javax.xml.transform.stream",
  "simpleName": "StreamSource",
  "moduleName": "java.xml",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FEATURE",
      "comment": "If TransformerFactory.getFeature(java.lang.String) returns true when passed this value as an argument, the Transformer supports Source input of this type.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.xml.transform.stream.StreamSource.FEATURE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "inputStream"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInputStream",
      "comment": "Set the byte stream to be used as input. Normally, a stream should be used rather than a reader, so that the XML parser can resolve character encoding specified by the XML declaration. If this Source object is used to process a stylesheet, normally setSystemId should also be called, so that relative URL references can be resolved.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einputStream\u003c/code\u003e - A valid InputStream reference to an XML stream."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInputStream",
      "comment": "Get the byte stream that was set with setByteStream.",
      "tagMap": {
        "return": [
          "The byte stream that was set with setByteStream, or null if setByteStream or the ByteStream constructor was not called."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setReader",
      "comment": "Set the input to be a character reader. Normally, a stream should be used rather than a reader, so that the XML parser can resolve character encoding specified by the XML declaration. However, in many cases the encoding of the input stream is already resolved, as in the case of reading XML from a StringReader.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ereader\u003c/code\u003e - A valid Reader reference to an XML CharacterStream."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Reader",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReader",
      "comment": "Get the character stream that was set with setReader.",
      "tagMap": {
        "return": [
          "The character stream that was set with setReader, or null if setReader or the Reader constructor was not called."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "publicId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPublicId",
      "comment": "Set the public identifier for this Source. The public identifier is always optional: if the application writer includes one, it will be provided as part of the location information.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epublicId\u003c/code\u003e - The public identifier as a string."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPublicId",
      "comment": "Get the public identifier that was set with setPublicId.",
      "tagMap": {
        "return": [
          "The public identifier that was set with setPublicId, or null if setPublicId was not called."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "systemId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSystemId",
      "comment": "Set the system identifier for this Source. The system identifier is optional if there is a byte stream or a character stream, but it is still useful to provide one, since the application can use it to resolve relative URIs and can include it in error messages and warnings (the parser will attempt to open a connection to the URI only if there is no byte stream or character stream specified).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/Source.html#setSystemId(java.lang.String)\"\u003esetSystemId\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/Source.html\" title\u003d\"interface in javax.xml.transform\"\u003eSource\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esystemId\u003c/code\u003e - The system identifier as a URL string."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSystemId",
      "comment": "Get the system identifier that was set with setSystemId.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/Source.html#getSystemId()\"\u003egetSystemId\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/Source.html\" title\u003d\"interface in javax.xml.transform\"\u003eSource\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The system identifier that was set with setSystemId, or null if setSystemId was not called."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSystemId",
      "comment": "Set the system ID from a File reference.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - Must a non-null File reference."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEmpty",
      "comment": "Indicates whether the StreamSource object is empty. Empty is defined as follows: All of the input sources, including the public identifier, system identifier, byte stream, and character stream, are null. The public identifier and system identifier are null, and byte and character stream are either null or contain no byte or character. Note that this method will reset the byte stream if it is provided, or the character stream if the byte stream is not provided. In case of error while checking the byte or character stream, the method will return false to allow the XML processor to handle the error.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/Source.html#isEmpty()\"\u003eisEmpty\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/Source.html\" title\u003d\"interface in javax.xml.transform\"\u003eSource\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if the \n\u003ccode\u003eStreamSource\u003c/code\u003e object is empty, false otherwise"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Zero-argument default constructor. If this constructor is used, and no Stream source is set using setInputStream(java.io.InputStream inputStream) or setReader(java.io.Reader reader), then the Transformer will create an empty source InputStream using new InputStream().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/Transformer.html#transform(javax.xml.transform.Source,javax.xml.transform.Result)\"\u003e\u003ccode\u003eTransformer.transform(Source xmlSource, Result outputTarget)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "inputStream"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a StreamSource from a byte stream. Normally, a stream should be used rather than a reader, so the XML parser can resolve character encoding specified by the XML declaration. If this constructor is used to process a stylesheet, normally setSystemId should also be called, so that relative URI references can be resolved.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einputStream\u003c/code\u003e - A valid InputStream reference to an XML stream."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "inputStream"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "systemId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a StreamSource from a byte stream. Normally, a stream should be used rather than a reader, so that the XML parser can resolve character encoding specified by the XML declaration. This constructor allows the systemID to be set in addition to the input stream, which allows relative URIs to be processed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einputStream\u003c/code\u003e - A valid InputStream reference to an XML stream.",
          "\u003ccode\u003esystemId\u003c/code\u003e - Must be a String that conforms to the URI syntax."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a StreamSource from a character reader. Normally, a stream should be used rather than a reader, so that the XML parser can resolve character encoding specified by the XML declaration. However, in many cases the encoding of the input stream is already resolved, as in the case of reading XML from a StringReader.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ereader\u003c/code\u003e - A valid Reader reference to an XML character stream."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "systemId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a StreamSource from a character reader. Normally, a stream should be used rather than a reader, so that the XML parser may resolve character encoding specified by the XML declaration. However, in many cases the encoding of the input stream is already resolved, as in the case of reading XML from a StringReader.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ereader\u003c/code\u003e - A valid Reader reference to an XML character stream.",
          "\u003ccode\u003esystemId\u003c/code\u003e - Must be a String that conforms to the URI syntax."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "systemId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a StreamSource from a URL.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esystemId\u003c/code\u003e - Must be a String that conforms to the URI syntax."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a StreamSource from a File.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - Must a non-null File reference."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.xml.transform.stream.StreamSource",
  "comment": "\u003cp\u003eActs as an holder for a transformation Source in the form of a stream of XML markup.\u003c/p\u003e \n\u003cp\u003e\u003cem\u003eNote:\u003c/em\u003e Due to their internal use of either a \u003ca href\u003d\"../../../../../java.base/java/io/Reader.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eReader\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"../../../../../java.base/java/io/InputStream.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eInputStream\u003c/code\u003e\u003c/a\u003e instance, \u003ccode\u003eStreamSource\u003c/code\u003e instances may only be used once.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}