{
  "packageName": "javax.xml.transform.dom",
  "simpleName": "DOMResult",
  "moduleName": "java.xml",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FEATURE",
      "comment": "If TransformerFactory.getFeature(java.lang.String) returns true when passed this value as an argument, the Transformer supports Result output of this type.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.xml.transform.dom.DOMResult.FEATURE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "node"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNode",
      "comment": "Set the node that will contain the result DOM tree. In practice, the node should be a Document node, a DocumentFragment node, or a Element node. In other words, a node that accepts children. An IllegalStateException is thrown if nextSibling is not null and node is not a parent of nextSibling. An IllegalStateException is thrown if node is null and nextSibling is not null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enode\u003c/code\u003e - The node to which the transformation will be appended."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003enextSibling\u003c/code\u003e is not \n\u003ccode\u003enull\u003c/code\u003e and \n\u003ccode\u003enextSibling\u003c/code\u003e is not a child of \n\u003ccode\u003enode\u003c/code\u003e or \n\u003ccode\u003enode\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e and \n\u003ccode\u003enextSibling\u003c/code\u003e is not \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNode",
      "comment": "Get the node that will contain the result DOM tree. If no node was set via DOMResult(Node node), DOMResult(Node node, String systeId), DOMResult(Node node, Node nextSibling), DOMResult(Node node, Node nextSibling, String systemId) or setNode(Node node), then the node will be set by the transformation, and may be obtained from this method once the transformation is complete. Calling this method before the transformation will return null.",
      "tagMap": {
        "return": [
          "The node to which the transformation will be appended."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "nextSibling"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNextSibling",
      "comment": "Set the child node before which the result nodes will be inserted. Use nextSibling to specify the child node before which the result nodes should be inserted. If nextSibling is not a descendant of node, then an IllegalArgumentException is thrown. If node is null and nextSibling is not null, then an IllegalStateException is thrown. If nextSibling is null, then the behavior is the same as calling DOMResult(Node node), i.e. append the result nodes as the last child of the specified node.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enextSibling\u003c/code\u003e - The child node before which the result nodes will be inserted."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003enextSibling\u003c/code\u003e is not a descendant of \n\u003ccode\u003enode\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003enode\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e and \n\u003ccode\u003enextSibling\u003c/code\u003e is not \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNextSibling",
      "comment": "Get the child node before which the result nodes will be inserted. If no node was set via DOMResult(Node node, Node nextSibling), DOMResult(Node node, Node nextSibling, String systemId) or setNextSibling(Node nextSibling), then null will be returned.",
      "tagMap": {
        "return": [
          "The child node before which the result nodes will be inserted."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "systemId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSystemId",
      "comment": "Set the systemId that may be used in association with the node.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/Result.html#setSystemId(java.lang.String)\"\u003esetSystemId\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/Result.html\" title\u003d\"interface in javax.xml.transform\"\u003eResult\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003esystemId\u003c/code\u003e - The system identifier as a URI string."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSystemId",
      "comment": "Get the System Identifier. If no System ID was set via DOMResult(Node node, String systemId), DOMResult(Node node, Node nextSibling, String systemId) or setSystemId(String systemId), then null will be returned.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/Result.html#getSystemId()\"\u003egetSystemId\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/Result.html\" title\u003d\"interface in javax.xml.transform\"\u003eResult\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The system identifier."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Zero-argument default constructor. node, siblingNode and systemId will be set to null.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "node"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Use a DOM node to create a new output target. In practice, the node should be a Document node, a DocumentFragment node, or a Element node. In other words, a node that accepts children. siblingNode and systemId will be set to null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enode\u003c/code\u003e - The DOM node that will contain the result tree."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "node"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "systemId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Use a DOM node to create a new output target with the specified System ID. In practice, the node should be a Document node, a DocumentFragment node, or a Element node. In other words, a node that accepts children. siblingNode will be set to null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enode\u003c/code\u003e - The DOM node that will contain the result tree.",
          "\u003ccode\u003esystemId\u003c/code\u003e - The system identifier which may be used in association with this node."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "node"
          }
        },
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "nextSibling"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before. In practice, node and nextSibling should be a Document node, a DocumentFragment node, or a Element node. In other words, a node that accepts children. Use nextSibling to specify the child node where the result nodes should be inserted before. If nextSibling is not a sibling of node, then an IllegalArgumentException is thrown. If node is null and nextSibling is not null, then an IllegalArgumentException is thrown. If nextSibling is null, then the behavior is the same as calling DOMResult(Node node), i.e. append the result nodes as the last child of the specified node. systemId will be set to null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enode\u003c/code\u003e - The DOM node that will contain the result tree.",
          "\u003ccode\u003enextSibling\u003c/code\u003e - The child node where the result nodes should be inserted before."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003enextSibling\u003c/code\u003e is not a sibling of \n\u003ccode\u003enode\u003c/code\u003e or \n\u003ccode\u003enode\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e and \n\u003ccode\u003enextSibling\u003c/code\u003e is not \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "node"
          }
        },
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "nextSibling"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "systemId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before and the specified System ID. In practice, node and nextSibling should be a Document node, a DocumentFragment node, or a Element node. In other words, a node that accepts children. Use nextSibling to specify the child node where the result nodes should be inserted before. If nextSibling is not a sibling of node, then an IllegalArgumentException is thrown. If node is null and nextSibling is not null, then an IllegalArgumentException is thrown. If nextSibling is null, then the behavior is the same as calling DOMResult(Node node, String systemId), i.e. append the result nodes as the last child of the specified node and use the specified System ID.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enode\u003c/code\u003e - The DOM node that will contain the result tree.",
          "\u003ccode\u003enextSibling\u003c/code\u003e - The child node where the result nodes should be inserted before.",
          "\u003ccode\u003esystemId\u003c/code\u003e - The system identifier which may be used in association with this node."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003enextSibling\u003c/code\u003e is not a sibling of \n\u003ccode\u003enode\u003c/code\u003e or \n\u003ccode\u003enode\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e and \n\u003ccode\u003enextSibling\u003c/code\u003e is not \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.xml.transform.dom.DOMResult",
  "comment": "Acts as a holder for a transformation result tree in the form of a Document Object Model (DOM) tree. \n\u003cp\u003eIf no output DOM source is set, the transformation will create a Document node as the holder for the result of the transformation, which may be retrieved with \u003ca href\u003d\"#getNode()\"\u003e\u003ccode\u003egetNode()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}