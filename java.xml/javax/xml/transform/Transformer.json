{
  "packageName": "javax.xml.transform",
  "simpleName": "Transformer",
  "moduleName": "java.xml",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reset",
      "comment": "Reset this Transformer to its original configuration. Transformer is reset to the same state as when it was created with TransformerFactory.newTransformer(), TransformerFactory.newTransformer(Source source) or Templates.newTransformer(). reset() is designed to allow the reuse of existing Transformers thus saving resources associated with the creation of new Transformers. The reset Transformer is not guaranteed to have the same URIResolver or ErrorListener Objects, e.g. Object.equals(Object obj). It is guaranteed to have a functionally equal URIResolver and ErrorListener.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - When implementation does not override this method."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.transform.TransformerException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.xml.transform.Source",
            "type": "Class"
          },
          "field": {
            "name": "xmlSource"
          }
        },
        {
          "type": {
            "name": "javax.xml.transform.Result",
            "type": "Class"
          },
          "field": {
            "name": "outputTarget"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "transform",
      "comment": "Transform the XML Source to a Result. Specific transformation behavior is determined by the settings of the TransformerFactory in effect when the Transformer was instantiated and any modifications made to the Transformer instance. An empty Source is represented as an empty document as constructed by DocumentBuilder.newDocument(). The result of transforming an empty Source depends on the transformation behavior; it is not always an empty Result.",
      "tagMap": {
        "param": [
          "\u003ccode\u003exmlSource\u003c/code\u003e - The XML input to transform.",
          "\u003ccode\u003eoutputTarget\u003c/code\u003e - The \n\u003ccode\u003eResult\u003c/code\u003e of transforming the \n\u003ccode\u003exmlSource\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/TransformerException.html\" title\u003d\"class in javax.xml.transform\"\u003eTransformerException\u003c/a\u003e\u003c/code\u003e - If an unrecoverable error occurs during the course of the transformation."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setParameter",
      "comment": "Add a parameter for the transformation. Pass a qualified name as a two-part string, the namespace URI enclosed in curly braces ({}), followed by the local name. If the name has a null URL, the String only contain the local name. An application can safely check for a non-null URI by testing to see if the first character of the name is a \u0027{\u0027 character. For example, if a URI and local name were obtained from an element defined with \u003cxyz:foo xmlns:xyz\u003d\"http://xyz.foo.com/yada/baz.html\"/\u003e, then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\". Note that no prefix is used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the parameter, which may begin with a namespace URI in curly braces ({}).",
          "\u003ccode\u003evalue\u003c/code\u003e - The value object. This can be any valid Java object. It is up to the processor to provide the proper object coersion or to simply pass the object on for use in an extension."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If value is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getParameter",
      "comment": "Get a parameter that was explicitly set with setParameter. This method does not return a default parameter value, which cannot be determined until the node context is evaluated during the transformation process.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - of \n\u003ccode\u003eObject\u003c/code\u003e to get"
        ],
        "return": [
          "A parameter that has been set with setParameter."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "clearParameters",
      "comment": "Clear all parameters set with setParameter.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.transform.URIResolver",
            "type": "Class"
          },
          "field": {
            "name": "resolver"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setURIResolver",
      "comment": "Set an object that will be used to resolve URIs used in document(). If the resolver argument is null, the URIResolver value will be cleared and the transformer will no longer have a resolver.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eresolver\u003c/code\u003e - An object that implements the URIResolver interface, or null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.transform.URIResolver",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getURIResolver",
      "comment": "Get an object that will be used to resolve URIs used in document().",
      "tagMap": {
        "return": [
          "An object that implements the URIResolver interface, or null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Properties",
            "type": "Class"
          },
          "field": {
            "name": "oformat"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setOutputProperties",
      "comment": "Set the output properties for the transformation. These properties will override properties set in the Templates with xsl:output. If argument to this function is null, any properties previously set are removed, and the value will revert to the value defined in the templates object. Pass a qualified property key name as a two-part string, the namespace URI enclosed in curly braces ({}), followed by the local name. If the name has a null URL, the String only contain the local name. An application can safely check for a non-null URI by testing to see if the first character of the name is a \u0027{\u0027 character. For example, if a URI and local name were obtained from an element defined with \u003cxyz:foo xmlns:xyz\u003d\"http://xyz.foo.com/yada/baz.html\"/\u003e, then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\". Note that no prefix is used. An IllegalArgumentException is thrown if any of the argument keys are not recognized and are not namespace qualified.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/OutputKeys.html\" title\u003d\"class in javax.xml.transform\"\u003e\u003ccode\u003eOutputKeys\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Properties.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eProperties\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eoformat\u003c/code\u003e - A set of output properties that will be used to override any of the same properties in affect for the transformation."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - When keys are not recognized and are not namespace qualified."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Properties",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getOutputProperties",
      "comment": "Get a copy of the output properties for the transformation. The properties returned should contain properties set by the user, and properties set by the stylesheet, and these properties are \"defaulted\" by default properties specified by section 16 of the XSL Transformations (XSLT) W3C Recommendation. The properties that were specifically set by the user or the stylesheet should be in the base Properties list, while the XSLT default properties that were not specifically set should be the default Properties list. Thus, getOutputProperties().getProperty(String key) will obtain any property in that was set by setOutputProperty(java.lang.String, java.lang.String), setOutputProperties(java.util.Properties), in the stylesheet, or the default properties, while getOutputProperties().get(String key) will only retrieve properties that were explicitly set by setOutputProperty(java.lang.String, java.lang.String), setOutputProperties(java.util.Properties), or in the stylesheet. Note that mutation of the Properties object returned will not effect the properties that the transformer contains. If any of the argument keys are not recognized and are not namespace qualified, the property will be ignored and not returned. In other words the behaviour is not orthogonal with setOutputProperties.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/OutputKeys.html\" title\u003d\"class in javax.xml.transform\"\u003e\u003ccode\u003eOutputKeys\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Properties.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eProperties\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"http://www.w3.org/TR/xslt#output\"\u003e XSL Transformations (XSLT) Version 1.0\u003c/a\u003e"
        ],
        "return": [
          "A copy of the set of output properties in effect for the next transformation."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setOutputProperty",
      "comment": "Set an output property that will be in effect for the transformation. Pass a qualified property name as a two-part string, the namespace URI enclosed in curly braces ({}), followed by the local name. If the name has a null URL, the String only contain the local name. An application can safely check for a non-null URI by testing to see if the first character of the name is a \u0027{\u0027 character. For example, if a URI and local name were obtained from an element defined with \u003cxyz:foo xmlns:xyz\u003d\"http://xyz.foo.com/yada/baz.html\"/\u003e, then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\". Note that no prefix is used. The Properties object that was passed to setOutputProperties(java.util.Properties) won\u0027t be effected by calling this method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/OutputKeys.html\" title\u003d\"class in javax.xml.transform\"\u003e\u003ccode\u003eOutputKeys\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - A non-null String that specifies an output property name, which may be namespace qualified.",
          "\u003ccode\u003evalue\u003c/code\u003e - The non-null string value of the output property."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the property is not supported, and is not qualified with a namespace."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getOutputProperty",
      "comment": "Get an output property that is in effect for the transformer. If a property has been set using setOutputProperty(java.lang.String, java.lang.String), that value will be returned. Otherwise, if a property is explicitly specified in the stylesheet, that value will be returned. If the value of the property has been defaulted, that is, if no value has been set explicitly either with setOutputProperty(java.lang.String, java.lang.String) or in the stylesheet, the result may vary depending on implementation and input stylesheet.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/OutputKeys.html\" title\u003d\"class in javax.xml.transform\"\u003e\u003ccode\u003eOutputKeys\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - A non-null String that specifies an output property name, which may be namespace qualified."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the property is not supported."
        ],
        "return": [
          "The string value of the output property, or null if no property was found."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.xml.transform.ErrorListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setErrorListener",
      "comment": "Set the error event listener in effect for the transformation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - The new error listener."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if listener is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.transform.ErrorListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getErrorListener",
      "comment": "Get the error event handler in effect for the transformation. Implementations must provide a default error listener.",
      "tagMap": {
        "return": [
          "The current error handler, which should never be null."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Default constructor is protected on purpose.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.xml.transform.Transformer",
  "comment": "An instance of this abstract class can transform a source tree into a result tree. \n\u003cp\u003eAn instance of this class can be obtained with the \u003ca href\u003d\"TransformerFactory.html#newTransformer(javax.xml.transform.Source)\"\u003e\u003ccode\u003eTransformerFactory.newTransformer\u003c/code\u003e\u003c/a\u003e method. This instance may then be used to process XML from a variety of sources and write the transformation output to a variety of sinks.\u003c/p\u003e \n\u003cp\u003eAn object of this class may not be used in multiple threads running concurrently. Different Transformers may be used concurrently by different threads.\u003c/p\u003e \n\u003cp\u003eA \u003ccode\u003eTransformer\u003c/code\u003e may be used multiple times. Parameters and output properties are preserved across transformations.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}