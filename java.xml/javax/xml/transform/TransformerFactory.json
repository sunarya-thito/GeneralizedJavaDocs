{
  "packageName": "javax.xml.transform",
  "simpleName": "TransformerFactory",
  "moduleName": "java.xml",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.xml.transform.TransformerFactory",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newDefaultInstance",
      "comment": "Creates a new instance of the TransformerFactory builtin system-default implementation.",
      "tagMap": {
        "return": [
          "A new instance of the \n\u003ccode\u003eTransformerFactory\u003c/code\u003e builtin system-default implementation."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.transform.TransformerFactory",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.transform.TransformerFactoryConfigurationError",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newInstance",
      "comment": "Obtain a new instance of a TransformerFactory. This static method creates a new factory instance. This method uses the following ordered lookup procedure to determine the TransformerFactory implementation class to load: Use the javax.xml.transform.TransformerFactory system property. Use the configuration file \"jaxp.properties\". The file is in standard Properties format and typically located in the conf directory of the Java installation. It contains the fully qualified name of the implementation class with the key being the system property defined above. The jaxp.properties file is read only once by the JAXP implementation and its values are then cached for future use. If the file does not exist when the first attempt is made to read from it, no further attempts are made to check for its existence. It is not possible to change the value of any property in jaxp.properties after it has been read for the first time. Use the service-provider loading facility, defined by the ServiceLoader class, to attempt to locate and load an implementation of the service using the default loading mechanism: the service-provider loading facility will use the current thread\u0027s context class loader to attempt to load the service. If the context class loader is null, the system class loader will be used. Otherwise, the system-default implementation is returned. Once an application has obtained a reference to a TransformerFactory it can use the factory to configure and obtain transformer instances.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/TransformerFactoryConfigurationError.html\" title\u003d\"class in javax.xml.transform\"\u003eTransformerFactoryConfigurationError\u003c/a\u003e\u003c/code\u003e - Thrown in case of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ServiceConfigurationError.html\" title\u003d\"class in java.util\"\u003eservice configuration error\u003c/a\u003e or if the implementation is not available or cannot be instantiated."
        ],
        "return": [
          "new TransformerFactory instance, never null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.transform.TransformerFactory",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.transform.TransformerFactoryConfigurationError",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "factoryClassName"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "classLoader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newInstance",
      "comment": "Obtain a new instance of a TransformerFactory from factory class name. This function is useful when there are multiple providers in the classpath. It gives more control to the application as it can specify which provider should be loaded. Once an application has obtained a reference to a TransformerFactory it can use the factory to configure and obtain transformer instances. Tip for Trouble-shooting Setting the jaxp.debug system property will cause this method to print a lot of debug messages to System.err about what it is doing and where it is looking at. If you have problems try:  java -Djaxp.debug\u003d1 YourProgram ....",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/TransformerFactory.html#newInstance()\"\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efactoryClassName\u003c/code\u003e - fully qualified factory class name that provides implementation of \n\u003ccode\u003ejavax.xml.transform.TransformerFactory\u003c/code\u003e.",
          "\u003ccode\u003eclassLoader\u003c/code\u003e - \n\u003ccode\u003eClassLoader\u003c/code\u003e used to load the factory class. If \n\u003ccode\u003enull\u003c/code\u003e current \n\u003ccode\u003eThread\u003c/code\u003e\u0027s context classLoader is used to load the factory class."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/TransformerFactoryConfigurationError.html\" title\u003d\"class in javax.xml.transform\"\u003eTransformerFactoryConfigurationError\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efactoryClassName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or the factory class cannot be loaded, instantiated."
        ],
        "return": [
          "new TransformerFactory instance, never null."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.transform.Transformer",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.transform.TransformerConfigurationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.xml.transform.Source",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "newTransformer",
      "comment": "Process the Source into a Transformer Object. The Source is an XSLT document that conforms to XSL Transformations (XSLT) Version 1.0. Care must be taken not to use this Transformer in multiple Threads running concurrently. Different TransformerFactories can be used concurrently by different Threads.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"http://www.w3.org/TR/xslt\"\u003e XSL Transformations (XSLT) Version 1.0\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - \n\u003ccode\u003eSource \u003c/code\u003e of XSLT document used to create \n\u003ccode\u003eTransformer\u003c/code\u003e. Examples of XML \n\u003ccode\u003eSource\u003c/code\u003es include \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/dom/DOMSource.html\" title\u003d\"class in javax.xml.transform.dom\"\u003e\u003ccode\u003eDOMSource\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/sax/SAXSource.html\" title\u003d\"class in javax.xml.transform.sax\"\u003e\u003ccode\u003eSAXSource\u003c/code\u003e\u003c/a\u003e, and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/stream/StreamSource.html\" title\u003d\"class in javax.xml.transform.stream\"\u003e\u003ccode\u003eStreamSource\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/TransformerConfigurationException.html\" title\u003d\"class in javax.xml.transform\"\u003eTransformerConfigurationException\u003c/a\u003e\u003c/code\u003e - Thrown if there are errors when parsing the \n\u003ccode\u003eSource\u003c/code\u003e or it is not possible to create a \n\u003ccode\u003eTransformer\u003c/code\u003e instance."
        ],
        "return": [
          "A \n\u003ccode\u003eTransformer\u003c/code\u003e object that may be used to perform a transformation in a single \n\u003ccode\u003eThread\u003c/code\u003e, never \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.transform.Transformer",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.transform.TransformerConfigurationException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "newTransformer",
      "comment": "Create a new Transformer that performs a copy of the Source to the Result, i.e. the \"identity transform\".",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/TransformerConfigurationException.html\" title\u003d\"class in javax.xml.transform\"\u003eTransformerConfigurationException\u003c/a\u003e\u003c/code\u003e - When it is not possible to create a \n\u003ccode\u003eTransformer\u003c/code\u003e instance."
        ],
        "return": [
          "A Transformer object that may be used to perform a transformation in a single thread, never null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.transform.Templates",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.transform.TransformerConfigurationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.xml.transform.Source",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "newTemplates",
      "comment": "Process the Source into a Templates object, which is a a compiled representation of the source. This Templates object may then be used concurrently across multiple threads. Creating a Templates object allows the TransformerFactory to do detailed performance optimization of transformation instructions, without penalizing runtime transformation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - An object that holds a URL, input stream, etc."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/TransformerConfigurationException.html\" title\u003d\"class in javax.xml.transform\"\u003eTransformerConfigurationException\u003c/a\u003e\u003c/code\u003e - When parsing to construct the Templates object fails."
        ],
        "return": [
          "A Templates object capable of being used for transformation purposes, never \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.transform.Source",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.transform.TransformerConfigurationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.xml.transform.Source",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "media"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "title"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "charset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getAssociatedStylesheet",
      "comment": "Get the stylesheet specification(s) associated with the XML Source document via the xml-stylesheet processing instruction that match the given criteria. Note that it is possible to return several stylesheets, in which case they are applied as if they were a list of imports or cascades in a single stylesheet.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"http://www.w3.org/TR/xml-stylesheet/\"\u003e Associating Style Sheets with XML documents Version 1.0\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - The XML source document.",
          "\u003ccode\u003emedia\u003c/code\u003e - The media attribute to be matched. May be null, in which case the prefered templates will be used (i.e. alternate \u003d no).",
          "\u003ccode\u003etitle\u003c/code\u003e - The value of the title attribute to match. May be null.",
          "\u003ccode\u003echarset\u003c/code\u003e - The value of the charset attribute to match. May be null."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/TransformerConfigurationException.html\" title\u003d\"class in javax.xml.transform\"\u003eTransformerConfigurationException\u003c/a\u003e\u003c/code\u003e - An \n\u003ccode\u003eException\u003c/code\u003e is thrown if an error occurings during parsing of the \n\u003ccode\u003esource\u003c/code\u003e."
        ],
        "return": [
          "A \n\u003ccode\u003eSource\u003c/code\u003e \n\u003ccode\u003eObject\u003c/code\u003e suitable for passing to the \n\u003ccode\u003eTransformerFactory\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.transform.URIResolver",
            "type": "Class"
          },
          "field": {
            "name": "resolver"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setURIResolver",
      "comment": "Set an object that is used by default during the transformation to resolve URIs used in document(), xsl:import, or xsl:include.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eresolver\u003c/code\u003e - An object that implements the URIResolver interface, or null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.transform.URIResolver",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getURIResolver",
      "comment": "Get the object that is used by default during the transformation to resolve URIs used in document(), xsl:import, or xsl:include.",
      "tagMap": {
        "return": [
          "The URIResolver that was set with setURIResolver."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.transform.TransformerConfigurationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setFeature",
      "comment": "Set a feature for this TransformerFactory and Transformers or Templates created by this factory. Feature names are fully qualified URIs. Implementations may define their own features. An TransformerConfigurationException is thrown if this TransformerFactory or the Transformers or Templates it creates cannot support the feature. It is possible for an TransformerFactory to expose a feature value but be unable to change its state. All implementations are required to support the XMLConstants.FEATURE_SECURE_PROCESSING feature. When the feature is: true: the implementation will limit XML processing to conform to implementation limits and behave in a secure fashion as defined by the implementation. Examples include resolving user defined style sheets and functions. If XML processing is limited for security reasons, it will be reported via a call to the registered ErrorListener.fatalError(TransformerException exception). See setErrorListener(ErrorListener listener). false: the implementation will processing XML according to the XML specifications without regard to possible implementation limits.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Feature name.",
          "\u003ccode\u003evalue\u003c/code\u003e - Is feature state \n\u003ccode\u003etrue\u003c/code\u003e or \n\u003ccode\u003efalse\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/TransformerConfigurationException.html\" title\u003d\"class in javax.xml.transform\"\u003eTransformerConfigurationException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eTransformerFactory\u003c/code\u003e or the \n\u003ccode\u003eTransformer\u003c/code\u003es or \n\u003ccode\u003eTemplate\u003c/code\u003es it creates cannot support this feature.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003ename\u003c/code\u003e parameter is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getFeature",
      "comment": "Look up the value of a feature. Feature names are fully qualified URIs. Implementations may define their own features. false is returned if this TransformerFactory or the Transformers or Templates it creates cannot support the feature. It is possible for an TransformerFactory to expose a feature value but be unable to change its state.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - Feature name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003ename\u003c/code\u003e parameter is null."
        ],
        "return": [
          "The current state of the feature, \n\u003ccode\u003etrue\u003c/code\u003e or \n\u003ccode\u003efalse\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setAttribute",
      "comment": "Allows the user to set specific attributes on the underlying implementation. An attribute in this context is defined to be an option that the implementation provides. An IllegalArgumentException is thrown if the underlying implementation doesn\u0027t recognize the attribute. All implementations that implement JAXP 1.5 or newer are required to support the XMLConstants.ACCESS_EXTERNAL_DTD and XMLConstants.ACCESS_EXTERNAL_STYLESHEET properties. Access to external DTDs in the source file is restricted to the protocols specified by the XMLConstants.ACCESS_EXTERNAL_DTD property. If access is denied during transformation due to the restriction of this property, TransformerException will be thrown by Transformer.transform(Source, Result). Access to external DTDs in the stylesheet is restricted to the protocols specified by the XMLConstants.ACCESS_EXTERNAL_DTD property. If access is denied during the creation of a new transformer due to the restriction of this property, TransformerConfigurationException will be thrown by the newTransformer(Source) method. Access to external reference set by the stylesheet processing instruction, Import and Include element is restricted to the protocols specified by the XMLConstants.ACCESS_EXTERNAL_STYLESHEET property. If access is denied during the creation of a new transformer due to the restriction of this property, TransformerConfigurationException will be thrown by the newTransformer(Source) method. Access to external document through XSLT document function is restricted to the protocols specified by the property. If access is denied during the transformation due to the restriction of this property, TransformerException will be thrown by the Transformer.transform(Source, Result) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the attribute.",
          "\u003ccode\u003evalue\u003c/code\u003e - The value of the attribute."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - When implementation does not recognize the attribute."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getAttribute",
      "comment": "Allows the user to retrieve specific attributes on the underlying implementation. An IllegalArgumentException is thrown if the underlying implementation doesn\u0027t recognize the attribute.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the attribute."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - When implementation does not recognize the attribute."
        ],
        "return": [
          "value The value of the attribute."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.transform.ErrorListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setErrorListener",
      "comment": "Set the error event listener for the TransformerFactory, which is used for the processing of transformation instructions, and not for the transformation itself. An IllegalArgumentException is thrown if the ErrorListener listener is null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - The new error listener."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - When \n\u003ccode\u003elistener\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.transform.ErrorListener",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getErrorListener",
      "comment": "Get the error event handler for the TransformerFactory.",
      "tagMap": {
        "return": [
          "The current error handler, which should never be null."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Default constructor is protected on purpose.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.xml.transform.TransformerFactory",
  "comment": "\u003cp\u003eA TransformerFactory instance can be used to create \u003ca href\u003d\"Transformer.html\" title\u003d\"class in javax.xml.transform\"\u003e\u003ccode\u003eTransformer\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"Templates.html\" title\u003d\"interface in javax.xml.transform\"\u003e\u003ccode\u003eTemplates\u003c/code\u003e\u003c/a\u003e objects. \u003c/p\u003e\n\u003cp\u003eThe system property that determines which Factory implementation to create is named \u003ccode\u003e\"javax.xml.transform.TransformerFactory\"\u003c/code\u003e. This property names a concrete subclass of the \u003ccode\u003eTransformerFactory\u003c/code\u003e abstract class. If the property is not defined, a platform default is be used.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}