{
  "packageName": "javax.xml.stream",
  "simpleName": "XMLEventFactory",
  "moduleName": "java.xml",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.xml.stream.XMLEventFactory",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newDefaultFactory",
      "comment": "Creates a new instance of the XMLEventFactory builtin system-default implementation.",
      "tagMap": {
        "return": [
          "A new instance of the \n\u003ccode\u003eXMLEventFactory\u003c/code\u003e builtin system-default implementation."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.XMLEventFactory",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.stream.FactoryConfigurationError",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newInstance",
      "comment": "Creates a new instance of the factory in exactly the same manner as the newFactory() method.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/FactoryConfigurationError.html\" title\u003d\"class in javax.xml.stream\"\u003eFactoryConfigurationError\u003c/a\u003e\u003c/code\u003e - if an instance of this factory cannot be loaded"
        ],
        "return": [
          "an instance of the \n\u003ccode\u003eXMLEventFactory\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.XMLEventFactory",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.stream.FactoryConfigurationError",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newFactory",
      "comment": "Create a new instance of the factory. This static method creates a new factory instance. This method uses the following ordered lookup procedure to determine the XMLEventFactory implementation class to load: Use the javax.xml.stream.XMLEventFactory system property. Use the configuration file \"stax.properties\". The file is in standard Properties format and typically located in the conf directory of the Java installation. It contains the fully qualified name of the implementation class with the key being the system property defined above. The stax.properties file is read only once by the implementation and its values are then cached for future use. If the file does not exist when the first attempt is made to read from it, no further attempts are made to check for its existence. It is not possible to change the value of any property in stax.properties after it has been read for the first time. Use the jaxp configuration file \"jaxp.properties\". The file is in the same format as stax.properties and will only be read if stax.properties does not exist. Use the service-provider loading facility, defined by the ServiceLoader class, to attempt to locate and load an implementation of the service using the default loading mechanism: the service-provider loading facility will use the current thread\u0027s context class loader to attempt to load the service. If the context class loader is null, the system class loader will be used. Otherwise, the system-default implementation is returned. Once an application has obtained a reference to a XMLEventFactory it can use the factory to configure and obtain stream instances.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/FactoryConfigurationError.html\" title\u003d\"class in javax.xml.stream\"\u003eFactoryConfigurationError\u003c/a\u003e\u003c/code\u003e - in case of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ServiceConfigurationError.html\" title\u003d\"class in java.util\"\u003eservice configuration error\u003c/a\u003e or if the implementation is not available or cannot be instantiated."
        ],
        "return": [
          "an instance of the \n\u003ccode\u003eXMLEventFactory\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.XMLEventFactory",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.stream.FactoryConfigurationError",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "factoryId"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "classLoader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newInstance",
      "comment": "Create a new instance of the factory",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "1.7"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003efactoryId\u003c/code\u003e - Name of the factory to find, same as a property name",
          "\u003ccode\u003eclassLoader\u003c/code\u003e - classLoader to use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/FactoryConfigurationError.html\" title\u003d\"class in javax.xml.stream\"\u003eFactoryConfigurationError\u003c/a\u003e\u003c/code\u003e - if an instance of this factory cannot be loaded"
        ],
        "return": [
          "the factory implementation"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.XMLEventFactory",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.stream.FactoryConfigurationError",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "factoryId"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "classLoader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newFactory",
      "comment": "Create a new instance of the factory. If the classLoader argument is null, then the ContextClassLoader is used. This method uses the following ordered lookup procedure to determine the XMLEventFactory implementation class to load: Use the value of the system property identified by factoryId. Use the configuration file \"stax.properties\". The file is in standard Properties format and typically located in the conf directory of the Java installation. It contains the fully qualified name of the implementation class with the key being the system property defined above. The stax.properties file is read only once by the implementation and its values are then cached for future use. If the file does not exist when the first attempt is made to read from it, no further attempts are made to check for its existence. It is not possible to change the value of any property in stax.properties after it has been read for the first time. Use the jaxp configuration file \"jaxp.properties\". The file is in the same format as stax.properties and will only be read if stax.properties does not exist. If factoryId is \"javax.xml.stream.XMLEventFactory\", use the service-provider loading facility, defined by the ServiceLoader class, to attempt to locate and load an implementation of the service using the specified ClassLoader. If classLoader is null, the default loading mechanism will apply: That is, the service-provider loading facility will use the current thread\u0027s context class loader to attempt to load the service. If the context class loader is null, the system class loader will be used. Otherwise, throws a FactoryConfigurationError. Note that this is a new method that replaces the deprecated newInstance(String factoryId, ClassLoader classLoader) method. No changes in behavior are defined by this replacement method relative to the deprecated method.",
      "tagMap": {
        "apiNote": [
          "The parameter factoryId defined here is inconsistent with that of other JAXP factories where the first parameter is fully qualified factory class name that provides implementation of the factory."
        ],
        "param": [
          "\u003ccode\u003efactoryId\u003c/code\u003e - Name of the factory to find, same as a property name",
          "\u003ccode\u003eclassLoader\u003c/code\u003e - classLoader to use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/FactoryConfigurationError.html\" title\u003d\"class in javax.xml.stream\"\u003eFactoryConfigurationError\u003c/a\u003e\u003c/code\u003e - in case of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ServiceConfigurationError.html\" title\u003d\"class in java.util\"\u003eservice configuration error\u003c/a\u003e or if the implementation is not available or cannot be instantiated."
        ],
        "return": [
          "the factory implementation"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.stream.Location",
            "type": "Class"
          },
          "field": {
            "name": "location"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setLocation",
      "comment": "This method allows setting of the Location on each event that is created by this factory. The values are copied by value into the events created by this factory. To reset the location information set the location to null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the location to set on each event created"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.Attribute",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "namespaceURI"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "localName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createAttribute",
      "comment": "Create a new Attribute",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix of this attribute, may not be null",
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - the attribute value is set to this value, may not be null",
          "\u003ccode\u003elocalName\u003c/code\u003e - the local name of the XML name of the attribute, localName cannot be null",
          "\u003ccode\u003evalue\u003c/code\u003e - the attribute value to set, may not be null"
        ],
        "return": [
          "the Attribute with specified values"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.Attribute",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "localName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createAttribute",
      "comment": "Create a new Attribute",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocalName\u003c/code\u003e - the local name of the XML name of the attribute, localName cannot be null",
          "\u003ccode\u003evalue\u003c/code\u003e - the attribute value to set, may not be null"
        ],
        "return": [
          "the Attribute with specified values"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.Attribute",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.namespace.QName",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createAttribute",
      "comment": "Create a new Attribute",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the qualified name of the attribute, may not be null",
          "\u003ccode\u003evalue\u003c/code\u003e - the attribute value to set, may not be null"
        ],
        "return": [
          "the Attribute with specified values"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.Namespace",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "namespaceURI"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createNamespace",
      "comment": "Create a new default Namespace",
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - the default namespace uri"
        ],
        "return": [
          "the Namespace with the specified value"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.Namespace",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "namespaceUri"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createNamespace",
      "comment": "Create a new Namespace",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix of this namespace, may not be null",
          "\u003ccode\u003enamespaceUri\u003c/code\u003e - the attribute value is set to this value, may not be null"
        ],
        "return": [
          "the Namespace with the specified values"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.StartElement",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.namespace.QName",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.util.Iterator",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "javax.xml.stream.events.Attribute",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "attributes"
          }
        },
        {
          "type": {
            "name": "java.util.Iterator",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "javax.xml.stream.events.Namespace",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "namespaces"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createStartElement",
      "comment": "Create a new StartElement. Namespaces can be added to this StartElement by passing in an Iterator that walks over a set of Namespace interfaces. Attributes can be added to this StartElement by passing an iterator that walks over a set of Attribute interfaces.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the qualified name of the attribute, may not be null",
          "\u003ccode\u003eattributes\u003c/code\u003e - an optional unordered set of objects that implement Attribute to add to the new StartElement, may be null",
          "\u003ccode\u003enamespaces\u003c/code\u003e - an optional unordered set of objects that implement Namespace to add to the new StartElement, may be null"
        ],
        "return": [
          "an instance of the requested StartElement"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.StartElement",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "namespaceUri"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "localName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createStartElement",
      "comment": "Create a new StartElement. This defaults the NamespaceContext to an empty NamespaceContext. Querying this event for its namespaces or attributes will result in an empty iterator being returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceUri\u003c/code\u003e - the uri of the QName of the new StartElement",
          "\u003ccode\u003elocalName\u003c/code\u003e - the local name of the QName of the new StartElement",
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix of the QName of the new StartElement"
        ],
        "return": [
          "an instance of the requested StartElement"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.StartElement",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "namespaceUri"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "localName"
          }
        },
        {
          "type": {
            "name": "java.util.Iterator",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "javax.xml.stream.events.Attribute",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "attributes"
          }
        },
        {
          "type": {
            "name": "java.util.Iterator",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "javax.xml.stream.events.Namespace",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "namespaces"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createStartElement",
      "comment": "Create a new StartElement. Namespaces can be added to this StartElement by passing in an Iterator that walks over a set of Namespace interfaces. Attributes can be added to this StartElement by passing an iterator that walks over a set of Attribute interfaces.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceUri\u003c/code\u003e - the uri of the QName of the new StartElement",
          "\u003ccode\u003elocalName\u003c/code\u003e - the local name of the QName of the new StartElement",
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix of the QName of the new StartElement",
          "\u003ccode\u003eattributes\u003c/code\u003e - an unordered set of objects that implement Attribute to add to the new StartElement",
          "\u003ccode\u003enamespaces\u003c/code\u003e - an unordered set of objects that implement Namespace to add to the new StartElement"
        ],
        "return": [
          "an instance of the requested StartElement"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.StartElement",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "namespaceUri"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "localName"
          }
        },
        {
          "type": {
            "name": "java.util.Iterator",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "javax.xml.stream.events.Attribute",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "attributes"
          }
        },
        {
          "type": {
            "name": "java.util.Iterator",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "javax.xml.stream.events.Namespace",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "namespaces"
          }
        },
        {
          "type": {
            "name": "javax.xml.namespace.NamespaceContext",
            "type": "Class"
          },
          "field": {
            "name": "context"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createStartElement",
      "comment": "Create a new StartElement. Namespaces can be added to this StartElement by passing in an Iterator that walks over a set of Namespace interfaces. Attributes can be added to this StartElement by passing an iterator that walks over a set of Attribute interfaces.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceUri\u003c/code\u003e - the uri of the QName of the new StartElement",
          "\u003ccode\u003elocalName\u003c/code\u003e - the local name of the QName of the new StartElement",
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix of the QName of the new StartElement",
          "\u003ccode\u003eattributes\u003c/code\u003e - an unordered set of objects that implement Attribute to add to the new StartElement, may be null",
          "\u003ccode\u003enamespaces\u003c/code\u003e - an unordered set of objects that implement Namespace to add to the new StartElement, may be null",
          "\u003ccode\u003econtext\u003c/code\u003e - the namespace context of this element"
        ],
        "return": [
          "an instance of the requested StartElement"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.EndElement",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.namespace.QName",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.util.Iterator",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "javax.xml.stream.events.Namespace",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "namespaces"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createEndElement",
      "comment": "Create a new EndElement",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the qualified name of the EndElement",
          "\u003ccode\u003enamespaces\u003c/code\u003e - an optional unordered set of objects that implement Namespace that have gone out of scope, may be null"
        ],
        "return": [
          "an instance of the requested EndElement"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.EndElement",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "namespaceUri"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "localName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createEndElement",
      "comment": "Create a new EndElement",
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceUri\u003c/code\u003e - the uri of the QName of the new StartElement",
          "\u003ccode\u003elocalName\u003c/code\u003e - the local name of the QName of the new StartElement",
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix of the QName of the new StartElement"
        ],
        "return": [
          "an instance of the requested EndElement"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.EndElement",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "namespaceUri"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "localName"
          }
        },
        {
          "type": {
            "name": "java.util.Iterator",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "javax.xml.stream.events.Namespace",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "namespaces"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createEndElement",
      "comment": "Create a new EndElement",
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceUri\u003c/code\u003e - the uri of the QName of the new StartElement",
          "\u003ccode\u003elocalName\u003c/code\u003e - the local name of the QName of the new StartElement",
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix of the QName of the new StartElement",
          "\u003ccode\u003enamespaces\u003c/code\u003e - an unordered set of objects that implement Namespace that have gone out of scope, may be null"
        ],
        "return": [
          "an instance of the requested EndElement"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.Characters",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "content"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createCharacters",
      "comment": "Create a Characters event, this method does not check if the content is all whitespace. To create a space event use #createSpace(String)",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtent\u003c/code\u003e - the string to create"
        ],
        "return": [
          "a Characters event"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.Characters",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "content"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createCData",
      "comment": "Create a Characters event with the CData flag set to true",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtent\u003c/code\u003e - the string to create"
        ],
        "return": [
          "a Characters event"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.Characters",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "content"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createSpace",
      "comment": "Create a Characters event with the isSpace flag set to true",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtent\u003c/code\u003e - the content of the space to create"
        ],
        "return": [
          "a Characters event"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.Characters",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "content"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createIgnorableSpace",
      "comment": "Create an ignorable space",
      "tagMap": {
        "param": [
          "\u003ccode\u003econtent\u003c/code\u003e - the space to create"
        ],
        "return": [
          "a Characters event"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.StartDocument",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createStartDocument",
      "comment": "Creates a new instance of a StartDocument event",
      "tagMap": {
        "return": [
          "a StartDocument event"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.StartDocument",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "encoding"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "version"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "standalone"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createStartDocument",
      "comment": "Creates a new instance of a StartDocument event",
      "tagMap": {
        "param": [
          "\u003ccode\u003eencoding\u003c/code\u003e - the encoding style",
          "\u003ccode\u003eversion\u003c/code\u003e - the XML version",
          "\u003ccode\u003estandalone\u003c/code\u003e - the status of standalone may be set to \"true\" or \"false\""
        ],
        "return": [
          "a StartDocument event"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.StartDocument",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "encoding"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "version"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createStartDocument",
      "comment": "Creates a new instance of a StartDocument event",
      "tagMap": {
        "param": [
          "\u003ccode\u003eencoding\u003c/code\u003e - the encoding style",
          "\u003ccode\u003eversion\u003c/code\u003e - the XML version"
        ],
        "return": [
          "a StartDocument event"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.StartDocument",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "encoding"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createStartDocument",
      "comment": "Creates a new instance of a StartDocument event",
      "tagMap": {
        "param": [
          "\u003ccode\u003eencoding\u003c/code\u003e - the encoding style"
        ],
        "return": [
          "a StartDocument event"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.EndDocument",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createEndDocument",
      "comment": "Creates a new instance of an EndDocument event",
      "tagMap": {
        "return": [
          "an EndDocument event"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.EntityReference",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "javax.xml.stream.events.EntityDeclaration",
            "type": "Class"
          },
          "field": {
            "name": "declaration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createEntityReference",
      "comment": "Creates a new instance of a EntityReference event",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the reference",
          "\u003ccode\u003edeclaration\u003c/code\u003e - the declaration for the event"
        ],
        "return": [
          "an EntityReference event"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.Comment",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createComment",
      "comment": "Create a comment.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - The text of the comment"
        ],
        "return": [
          "a Comment event"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.ProcessingInstruction",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "data"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createProcessingInstruction",
      "comment": "Create a processing instruction",
      "tagMap": {
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - The target of the processing instruction",
          "\u003ccode\u003edata\u003c/code\u003e - The text of the processing instruction"
        ],
        "return": [
          "a ProcessingInstruction event"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.DTD",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "dtd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "createDTD",
      "comment": "Create a document type definition event This string contains the entire document type declaration that matches the doctypedecl in the XML 1.0 specification",
      "tagMap": {
        "param": [
          "\u003ccode\u003edtd\u003c/code\u003e - the text of the document type definition"
        ],
        "return": [
          "a DTD event"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Protected constructor to prevent instantiation. Use newFactory() instead.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.xml.stream.XMLEventFactory",
  "comment": "This interface defines a utility class for creating instances of XMLEvents",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/events/StartElement.html\" title\u003d\"interface in javax.xml.stream.events\"\u003e\u003ccode\u003eStartElement\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/events/EndElement.html\" title\u003d\"interface in javax.xml.stream.events\"\u003e\u003ccode\u003eEndElement\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/events/ProcessingInstruction.html\" title\u003d\"interface in javax.xml.stream.events\"\u003e\u003ccode\u003eProcessingInstruction\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/events/Comment.html\" title\u003d\"interface in javax.xml.stream.events\"\u003e\u003ccode\u003eComment\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/events/Characters.html\" title\u003d\"interface in javax.xml.stream.events\"\u003e\u003ccode\u003eCharacters\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/events/StartDocument.html\" title\u003d\"interface in javax.xml.stream.events\"\u003e\u003ccode\u003eStartDocument\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/events/EndDocument.html\" title\u003d\"interface in javax.xml.stream.events\"\u003e\u003ccode\u003eEndDocument\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/events/DTD.html\" title\u003d\"interface in javax.xml.stream.events\"\u003e\u003ccode\u003eDTD\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}