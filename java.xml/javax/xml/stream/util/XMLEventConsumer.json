{
  "packageName": "javax.xml.stream.util",
  "simpleName": "XMLEventConsumer",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.stream.XMLStreamException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.xml.stream.events.XMLEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "add",
      "comment": "This method adds an event to the consumer. Calling this method invalidates the event parameter. The client application should discard all references to this event upon calling add. The behavior of an application that continues to use such references is undefined.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - the event to add, may not be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/XMLStreamException.html\" title\u003d\"class in javax.xml.stream\"\u003eXMLStreamException\u003c/a\u003e\u003c/code\u003e - if there is an error in adding the event"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.xml.stream.util.XMLEventConsumer",
  "comment": "This interface defines an event consumer interface. The contract of the of a consumer is to accept the event. This interface can be used to mark an object as able to receive events. Add may be called several times in immediate succession so a consumer must be able to cache events it hasn\u0027t processed yet.",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}