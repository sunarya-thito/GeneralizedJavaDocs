{
  "packageName": "javax.xml.stream",
  "simpleName": "XMLStreamReader",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.xml.stream.XMLStreamConstants",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getProperty",
      "comment": "Get the value of a feature/property from the underlying implementation",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the property, may not be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if name is null"
        ],
        "return": [
          "The value of the property"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.stream.XMLStreamException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "next",
      "comment": "Get next parsing event - a processor may return all contiguous character data in a single chunk, or it may split it into several chunks. If the property javax.xml.stream.isCoalescing is set to true element content must be coalesced and only one CHARACTERS event must be returned for contiguous element content or CDATA Sections. By default entity references must be expanded and reported transparently to the application. An exception will be thrown if an entity reference cannot be expanded. If element content is empty (i.e. content is \"\") then no CHARACTERS event will be reported. Given the following XML: \u003cfoo\u003e\u003c!--description--\u003econtent text\u003c![CDATA[\u003cgreeting\u003eHello\u003e/greeting\u003e]]\u003eother content\u003e/foo\u003e The behavior of calling next() when being on foo will be: 1- the comment (COMMENT) 2- then the characters section (CHARACTERS) 3- then the CDATA section (another CHARACTERS) 4- then the next characters section (another CHARACTERS) 5- then the END_ELEMENT NOTE: empty element (such as \u003ctag/\u003e) will be reported with two separate events: START_ELEMENT, END_ELEMENT - This preserves parsing equivalency of empty element to \u003ctag\u003e\u003c/tag\u003e.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/events/XMLEvent.html\" title\u003d\"interface in javax.xml.stream.events\"\u003e\u003ccode\u003eXMLEvent\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if this is called when hasNext() returns false",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/XMLStreamException.html\" title\u003d\"class in javax.xml.stream\"\u003eXMLStreamException\u003c/a\u003e\u003c/code\u003e - if there is an error processing the underlying XML source"
        ],
        "return": [
          "the integer code corresponding to the current parse event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.stream.XMLStreamException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "namespaceURI"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "localName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "require",
      "comment": "Test if the current event is of the given type and if the namespace and name match the current namespace and name of the current event. If the namespaceURI is null it is not checked for equality, if the localName is null it is not checked for equality.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the event type",
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - the uri of the event, may be null",
          "\u003ccode\u003elocalName\u003c/code\u003e - the localName of the event, may be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/XMLStreamException.html\" title\u003d\"class in javax.xml.stream\"\u003eXMLStreamException\u003c/a\u003e\u003c/code\u003e - if the required values are not matched."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.stream.XMLStreamException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getElementText",
      "comment": "Reads the content of a text-only element, an exception is thrown if this is not a text-only element. Regardless of value of javax.xml.stream.isCoalescing this method always returns coalesced content. Precondition: the current event is START_ELEMENT. Postcondition: the current event is the corresponding END_ELEMENT. The method does the following (implementations are free to optimized but must do equivalent processing):  if(getEventType() !\u003d XMLStreamConstants.START_ELEMENT) {\n     throw new XMLStreamException(\n     \"parser must be on START_ELEMENT to read next text\", getLocation());\n }\n\n int eventType \u003d next();\n StringBuffer content \u003d new StringBuffer();\n while(eventType !\u003d XMLStreamConstants.END_ELEMENT) {\n     if(eventType \u003d\u003d XMLStreamConstants.CHARACTERS\n        || eventType \u003d\u003d XMLStreamConstants.CDATA\n        || eventType \u003d\u003d XMLStreamConstants.SPACE\n        || eventType \u003d\u003d XMLStreamConstants.ENTITY_REFERENCE) {\n           buf.append(getText());\n     } else if(eventType \u003d\u003d XMLStreamConstants.PROCESSING_INSTRUCTION\n               || eventType \u003d\u003d XMLStreamConstants.COMMENT) {\n         // skipping\n     } else if(eventType \u003d\u003d XMLStreamConstants.END_DOCUMENT) {\n         throw new XMLStreamException(\n         \"unexpected end of document when reading element text content\", this);\n     } else if(eventType \u003d\u003d XMLStreamConstants.START_ELEMENT) {\n         throw new XMLStreamException(\n         \"element text content may not contain START_ELEMENT\", getLocation());\n     } else {\n         throw new XMLStreamException(\n         \"Unexpected event type \"+eventType, getLocation());\n     }\n     eventType \u003d next();\n }\n return buf.toString();",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/XMLStreamException.html\" title\u003d\"class in javax.xml.stream\"\u003eXMLStreamException\u003c/a\u003e\u003c/code\u003e - if the current event is not a START_ELEMENT or if a non text element is encountered"
        ],
        "return": [
          "the content of a text-only element"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.stream.XMLStreamException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "nextTag",
      "comment": "Skips any white space (isWhiteSpace() returns true), COMMENT, or PROCESSING_INSTRUCTION, until a START_ELEMENT or END_ELEMENT is reached. If other than white space characters, COMMENT, PROCESSING_INSTRUCTION, START_ELEMENT, END_ELEMENT are encountered, an exception is thrown. This method should be used when processing element-only content seperated by white space. Precondition: none Postcondition: the current event is START_ELEMENT or END_ELEMENT and cursor may have moved over any whitespace event. Essentially it does the following (implementations are free to optimized but must do equivalent processing):  \n int eventType \u003d next();\n while((eventType \u003d\u003d XMLStreamConstants.CHARACTERS \u0026\u0026 isWhiteSpace()) // skip whitespace\n || (eventType \u003d\u003d XMLStreamConstants.CDATA \u0026\u0026 isWhiteSpace())\n // skip whitespace\n || eventType \u003d\u003d XMLStreamConstants.SPACE\n || eventType \u003d\u003d XMLStreamConstants.PROCESSING_INSTRUCTION\n || eventType \u003d\u003d XMLStreamConstants.COMMENT\n ) {\n     eventType \u003d next();\n }\n if (eventType !\u003d XMLStreamConstants.START_ELEMENT \u0026\u0026 eventType !\u003d XMLStreamConstants.END_ELEMENT) {\n     throw new String XMLStreamException(\"expected start or end tag\", getLocation());\n }\n return eventType;",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/XMLStreamException.html\" title\u003d\"class in javax.xml.stream\"\u003eXMLStreamException\u003c/a\u003e\u003c/code\u003e - if the current event is not white space, PROCESSING_INSTRUCTION, START_ELEMENT or END_ELEMENT",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if this is called when hasNext() returns false"
        ],
        "return": [
          "the event type of the element read (START_ELEMENT or END_ELEMENT)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.stream.XMLStreamException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasNext",
      "comment": "Returns true if there are more parsing events and false if there are no more events. This method will return false if the current state of the XMLStreamReader is END_DOCUMENT",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/XMLStreamException.html\" title\u003d\"class in javax.xml.stream\"\u003eXMLStreamException\u003c/a\u003e\u003c/code\u003e - if there is a fatal error detecting the next state"
        ],
        "return": [
          "true if there are more events, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.stream.XMLStreamException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "close",
      "comment": "Frees any resources associated with this Reader. This method does not close the underlying input source.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/XMLStreamException.html\" title\u003d\"class in javax.xml.stream\"\u003eXMLStreamException\u003c/a\u003e\u003c/code\u003e - if there are errors freeing associated resources"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNamespaceURI",
      "comment": "Return the uri for the given prefix. The uri returned depends on the current state of the processor. NOTE:The \u0027xml\u0027 prefix is bound as defined in Namespaces in XML specification to \"http://www.w3.org/XML/1998/namespace\". NOTE: The \u0027xmlns\u0027 prefix must be resolved to following namespace http://www.w3.org/2000/xmlns/",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - The prefix to lookup, may not be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the prefix is null"
        ],
        "return": [
          "the uri bound to the given prefix or null if it is not bound"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isStartElement",
      "comment": "Returns true if the cursor points to a start tag (otherwise false)",
      "tagMap": {
        "return": [
          "true if the cursor points to a start tag, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEndElement",
      "comment": "Returns true if the cursor points to an end tag (otherwise false)",
      "tagMap": {
        "return": [
          "true if the cursor points to an end tag, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isCharacters",
      "comment": "Returns true if the cursor points to a character data event",
      "tagMap": {
        "return": [
          "true if the cursor points to character data, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isWhiteSpace",
      "comment": "Returns true if the cursor points to a character data event that consists of all whitespace",
      "tagMap": {
        "return": [
          "true if the cursor points to all whitespace, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "namespaceURI"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "localName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeValue",
      "comment": "Returns the normalized attribute value of the attribute with the namespace and localName If the namespaceURI is null the namespace is not checked for equality",
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - the namespace of the attribute",
          "\u003ccode\u003elocalName\u003c/code\u003e - the local name of the attribute, cannot be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a START_ELEMENT or ATTRIBUTE"
        ],
        "return": [
          "returns the value of the attribute , returns null if not found"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeCount",
      "comment": "Returns the count of attributes on this START_ELEMENT, this method is only valid on a START_ELEMENT or ATTRIBUTE. This count excludes namespace definitions. Attribute indices are zero-based.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a START_ELEMENT or ATTRIBUTE"
        ],
        "return": [
          "returns the number of attributes"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.namespace.QName",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeName",
      "comment": "Returns the qname of the attribute at the provided index",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the position of the attribute"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a START_ELEMENT or ATTRIBUTE"
        ],
        "return": [
          "the QName of the attribute"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeNamespace",
      "comment": "Returns the namespace of the attribute at the provided index",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the position of the attribute"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a START_ELEMENT or ATTRIBUTE"
        ],
        "return": [
          "the namespace URI (can be null)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeLocalName",
      "comment": "Returns the localName of the attribute at the provided index",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the position of the attribute"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a START_ELEMENT or ATTRIBUTE"
        ],
        "return": [
          "the localName of the attribute"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributePrefix",
      "comment": "Returns the prefix of this attribute at the provided index",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the position of the attribute"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a START_ELEMENT or ATTRIBUTE"
        ],
        "return": [
          "the prefix of the attribute"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeType",
      "comment": "Returns the XML type of the attribute at the provided index",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the position of the attribute"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a START_ELEMENT or ATTRIBUTE"
        ],
        "return": [
          "the XML type of the attribute"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeValue",
      "comment": "Returns the value of the attribute at the index",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the position of the attribute"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a START_ELEMENT or ATTRIBUTE"
        ],
        "return": [
          "the attribute value"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isAttributeSpecified",
      "comment": "Returns a boolean which indicates if this attribute was created by default",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the position of the attribute"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a START_ELEMENT or ATTRIBUTE"
        ],
        "return": [
          "true if this is a default attribute"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNamespaceCount",
      "comment": "Returns the count of namespaces declared on this START_ELEMENT or END_ELEMENT, this method is only valid on a START_ELEMENT, END_ELEMENT or NAMESPACE. On an END_ELEMENT the count is of the namespaces that are about to go out of scope. This is the equivalent of the information reported by SAX callback for an end element event.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a START_ELEMENT, END_ELEMENT or NAMESPACE"
        ],
        "return": [
          "returns the number of namespace declarations on this specific element"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNamespacePrefix",
      "comment": "Returns the prefix for the namespace declared at the index. Returns null if this is the default namespace declaration",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the position of the namespace declaration"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a START_ELEMENT, END_ELEMENT or NAMESPACE"
        ],
        "return": [
          "returns the namespace prefix"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNamespaceURI",
      "comment": "Returns the uri for the namespace declared at the index.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the position of the namespace declaration"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a START_ELEMENT, END_ELEMENT or NAMESPACE"
        ],
        "return": [
          "returns the namespace uri"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.namespace.NamespaceContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNamespaceContext",
      "comment": "Returns a read only namespace context for the current position. The context is transient and only valid until a call to next() changes the state of the reader.",
      "tagMap": {
        "return": [
          "return a namespace context"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEventType",
      "comment": "Returns an integer code that indicates the type of the event the cursor is pointing to. The initial event type is XMLStreamConstants.START_DOCUMENT.",
      "tagMap": {
        "return": [
          "the type of the current event"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getText",
      "comment": "Returns the current value of the parse event as a string, this returns the string value of a CHARACTERS event, returns the value of a COMMENT, the replacement value for an ENTITY_REFERENCE, the string value of a CDATA section, the string value for a SPACE event, or the String value of the internal subset of the DTD. If an ENTITY_REFERENCE has been resolved, any character data will be reported as CHARACTERS events.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this state is not a valid text state."
        ],
        "return": [
          "the current text or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTextCharacters",
      "comment": "Returns an array which contains the characters from this event. This array should be treated as read-only and transient. I.e. the array will contain the text characters until the XMLStreamReader moves on to the next event. Attempts to hold onto the character array beyond that time or modify the contents of the array are breaches of the contract for this interface.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this state is not a valid text state."
        ],
        "return": [
          "the current text or an empty array"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.xml.stream.XMLStreamException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sourceStart"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "target"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "targetStart"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTextCharacters",
      "comment": "Gets the the text associated with a CHARACTERS, SPACE or CDATA event. Text starting a \"sourceStart\" is copied into \"target\" starting at \"targetStart\". Up to \"length\" characters are copied. The number of characters actually copied is returned. The \"sourceStart\" argument must be greater or equal to 0 and less than or equal to the number of characters associated with the event. Usually, one requests text starting at a \"sourceStart\" of 0. If the number of characters actually copied is less than the \"length\", then there is no more text. Otherwise, subsequent calls need to be made until all text has been retrieved. For example: \n int length \u003d 1024;\n char[] myBuffer \u003d new char[ length ];\n\n for ( int sourceStart \u003d 0 ; ; sourceStart +\u003d length )\n {\n    int nCopied \u003d stream.getTextCharacters( sourceStart, myBuffer, 0, length );\n\n   if (nCopied \u003c length)\n       break;\n }\n  XMLStreamException may be thrown if there are any XML errors in the underlying source. The \"targetStart\" argument must be greater than or equal to 0 and less than the length of \"target\", Length must be greater than 0 and \"targetStart + length\" must be less than or equal to length of \"target\".",
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceStart\u003c/code\u003e - the index of the first character in the source array to copy",
          "\u003ccode\u003etarget\u003c/code\u003e - the destination array",
          "\u003ccode\u003etargetStart\u003c/code\u003e - the start offset in the target array",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters to copy"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/XMLStreamException.html\" title\u003d\"class in javax.xml.stream\"\u003eXMLStreamException\u003c/a\u003e\u003c/code\u003e - if the underlying XML source is not well-formed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if targetStart \u0026lt; 0 or \u0026gt; than the length of target",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if length \u0026lt; 0 or targetStart + length \u0026gt; length of target",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this method is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - is if target is null"
        ],
        "return": [
          "the number of characters actually copied"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTextStart",
      "comment": "Returns the offset into the text character array where the first character (of this text event) is stored.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this state is not a valid text state."
        ],
        "return": [
          "the starting position of the text in the character array"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTextLength",
      "comment": "Returns the length of the sequence of characters for this Text event within the text character array.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this state is not a valid text state."
        ],
        "return": [
          "the length of the text"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEncoding",
      "comment": "Return input encoding if known or null if unknown.",
      "tagMap": {
        "return": [
          "the encoding of this instance or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasText",
      "comment": "Return a boolean indicating whether the current event has text. The following events have text: CHARACTERS,DTD ,ENTITY_REFERENCE, COMMENT, SPACE",
      "tagMap": {
        "return": [
          "true if the event has text, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.Location",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocation",
      "comment": "Return the current location of the processor. If the Location is unknown the processor should return an implementation of Location that returns -1 for the location and null for the publicId and systemId. The location information is only valid until next() is called.",
      "tagMap": {
        "return": [
          "the location of the cursor"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.namespace.QName",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getName",
      "comment": "Returns a QName for the current START_ELEMENT or END_ELEMENT event",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this is not a START_ELEMENT or END_ELEMENT"
        ],
        "return": [
          "the QName for the current START_ELEMENT or END_ELEMENT event"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocalName",
      "comment": "Returns the (local) name of the current event. For START_ELEMENT or END_ELEMENT returns the (local) name of the current element. For ENTITY_REFERENCE it returns entity name. The current event must be START_ELEMENT or END_ELEMENT, or ENTITY_REFERENCE",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this not a START_ELEMENT, END_ELEMENT or ENTITY_REFERENCE"
        ],
        "return": [
          "the localName"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasName",
      "comment": "returns a boolean indicating whether the current event has a name (is a START_ELEMENT or END_ELEMENT).",
      "tagMap": {
        "return": [
          "true if the event has a name, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNamespaceURI",
      "comment": "If the current event is a START_ELEMENT or END_ELEMENT this method returns the URI of the prefix or the default namespace. Returns null if the event does not have a prefix.",
      "tagMap": {
        "return": [
          "the URI bound to this elements prefix, the default namespace, or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPrefix",
      "comment": "Returns the prefix of the current event or null if the event does not have a prefix",
      "tagMap": {
        "return": [
          "the prefix or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getVersion",
      "comment": "Get the xml version declared on the xml declaration Returns null if none was declared",
      "tagMap": {
        "return": [
          "the XML version or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isStandalone",
      "comment": "Get the standalone declaration from the xml declaration",
      "tagMap": {
        "return": [
          "true if this is standalone, or false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "standaloneSet",
      "comment": "Checks if standalone was set in the document",
      "tagMap": {
        "return": [
          "true if standalone was set in the document, or false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCharacterEncodingScheme",
      "comment": "Returns the character encoding declared on the xml declaration Returns null if none was declared",
      "tagMap": {
        "return": [
          "the encoding declared in the document or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPITarget",
      "comment": "Get the target of a processing instruction",
      "tagMap": {
        "return": [
          "the target or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPIData",
      "comment": "Get the data section of a processing instruction",
      "tagMap": {
        "return": [
          "the data or null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.xml.stream.XMLStreamReader",
  "comment": "The XMLStreamReader interface allows forward, read-only access to XML. It is designed to be the lowest level and most efficient way to read XML data. \n\u003cp\u003e The XMLStreamReader is designed to iterate over XML using next() and hasNext(). The data can be accessed using methods such as getEventType(), getNamespaceURI(), getLocalName() and getText(); \u003c/p\u003e\n\u003cp\u003e An XMLStreamReader instance is created with an initial event type START_DOCUMENT. At any moment in time, it has a current event that the methods of the interface access and may load the next event through the \u003ca href\u003d\"#next()\"\u003e\u003ccode\u003enext()\u003c/code\u003e\u003c/a\u003e method. The current event type can be determined by \u003ca href\u003d\"#getEventType()\"\u003e\u003ccode\u003egetEventType()\u003c/code\u003e\u003c/a\u003e, and the next returned by the \u003ca href\u003d\"#next()\"\u003e\u003ccode\u003enext()\u003c/code\u003e\u003c/a\u003e method. \u003c/p\u003e\n\u003cp\u003e Parsing events are defined as the XML Declaration, a DTD, start tag, character data, white space, end tag, comment, or processing instruction. An attribute or namespace event may be encountered at the root level of a document as the result of a query operation. \u003c/p\u003e\n\u003cp\u003e For XML 1.0 compliance an XML processor must pass the identifiers of declared unparsed entities, notation declarations and their associated identifiers to the application. This information is provided through the property API on this interface. The following two properties allow access to this information: javax.xml.stream.notations and javax.xml.stream.entities. When the current event is a DTD the following call will return a list of Notations \u003ccode\u003eList l \u003d (List) getProperty(\"javax.xml.stream.notations\");\u003c/code\u003e The following call will return a list of entity declarations: \u003ccode\u003eList l \u003d (List) getProperty(\"javax.xml.stream.entities\");\u003c/code\u003e These properties can only be accessed during a DTD event and are defined to return null if the information is not available. \u003c/p\u003e\n\u003cp\u003e The following table describes which methods are valid in what state. If a method is called in an invalid state the method will throw a java.lang.IllegalStateException. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption\u003e\n  Valid methods for each state\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003eEvent Type\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eValid Methods\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e All States \u003c/th\u003e \n   \u003ctd\u003e getProperty(), hasNext(), require(), close(), getNamespaceURI(), isStartElement(), isEndElement(), isCharacters(), isWhiteSpace(), getNamespaceContext(), getEventType(),getLocation(), hasText(), hasName() \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e START_ELEMENT \u003c/th\u003e \n   \u003ctd\u003e next(), getName(), getLocalName(), hasName(), getPrefix(), getAttributeXXX(), isAttributeSpecified(), getNamespaceXXX(), getElementText(), nextTag() \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e ATTRIBUTE \u003c/th\u003e \n   \u003ctd\u003e next(), nextTag() getAttributeXXX(), isAttributeSpecified(), \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e NAMESPACE \u003c/th\u003e \n   \u003ctd\u003e next(), nextTag() getNamespaceXXX() \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e END_ELEMENT \u003c/th\u003e \n   \u003ctd\u003e next(), getName(), getLocalName(), hasName(), getPrefix(), getNamespaceXXX(), nextTag() \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e CHARACTERS \u003c/th\u003e \n   \u003ctd\u003e next(), getTextXXX(), nextTag() \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e CDATA \u003c/th\u003e \n   \u003ctd\u003e next(), getTextXXX(), nextTag() \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e COMMENT \u003c/th\u003e \n   \u003ctd\u003e next(), getTextXXX(), nextTag() \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e SPACE \u003c/th\u003e \n   \u003ctd\u003e next(), getTextXXX(), nextTag() \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e START_DOCUMENT \u003c/th\u003e \n   \u003ctd\u003e next(), getEncoding(), getVersion(), isStandalone(), standaloneSet(), getCharacterEncodingScheme(), nextTag()\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e END_DOCUMENT \u003c/th\u003e \n   \u003ctd\u003e close()\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e PROCESSING_INSTRUCTION \u003c/th\u003e \n   \u003ctd\u003e next(), getPITarget(), getPIData(), nextTag() \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e ENTITY_REFERENCE \u003c/th\u003e \n   \u003ctd\u003e next(), getLocalName(), getText(), nextTag() \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e DTD \u003c/th\u003e \n   \u003ctd\u003e next(), getText(), nextTag() \u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/events/XMLEvent.html\" title\u003d\"interface in javax.xml.stream.events\"\u003e\u003ccode\u003eXMLEvent\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/XMLInputFactory.html\" title\u003d\"class in javax.xml.stream\"\u003e\u003ccode\u003eXMLInputFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/XMLStreamWriter.html\" title\u003d\"interface in javax.xml.stream\"\u003e\u003ccode\u003eXMLStreamWriter\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}