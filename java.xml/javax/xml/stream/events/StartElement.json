{
  "packageName": "javax.xml.stream.events",
  "simpleName": "StartElement",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.xml.stream.events.XMLEvent",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.xml.namespace.QName",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getName",
      "comment": "Get the name of this event",
      "tagMap": {
        "return": [
          "the qualified name of this event"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "name": "javax.xml.stream.events.Attribute",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributes",
      "comment": "Returns an Iterator of non-namespace attributes declared on this START_ELEMENT. Returns an empty iterator if there are no attributes. The iterator must contain only implementations of the Attribute interface. Attributes are fundamentally unordered and may be reported in any order.",
      "tagMap": {
        "return": [
          "a readonly Iterator over Attribute interfaces, or an empty iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "name": "javax.xml.stream.events.Namespace",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNamespaces",
      "comment": "Returns an Iterator of namespaces declared on this element. This Iterator does not contain previously declared namespaces unless they appear on the current START_ELEMENT. Therefore this list may contain redeclared namespaces and duplicate namespace declarations. Use the getNamespaceContext() method to get the current context of namespace declarations. The iterator must contain only implementations of the Namespace interface. A Namespace is an Attribute. One can iterate over a list of namespaces as a list of attributes. However this method returns only the list of namespaces declared on this START_ELEMENT and does not include the attributes declared on this START_ELEMENT. Returns an empty iterator if there are no namespaces.",
      "tagMap": {
        "return": [
          "a readonly Iterator over Namespace interfaces, or an empty iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.stream.events.Attribute",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.xml.namespace.QName",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeByName",
      "comment": "Returns the attribute referred to by the qname.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the qname of the desired attribute"
        ],
        "return": [
          "the attribute corresponding to the name value or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.namespace.NamespaceContext",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNamespaceContext",
      "comment": "Gets a read-only namespace context. If no context is available this method will return an empty namespace context. The NamespaceContext contains information about all namespaces in scope for this StartElement.",
      "tagMap": {
        "return": [
          "the current namespace context"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNamespaceURI",
      "comment": "Gets the value that the prefix is bound to in the context of this element. Returns null if the prefix is not bound in this context",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix to lookup"
        ],
        "return": [
          "the uri bound to the prefix or null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.xml.stream.events.StartElement",
  "comment": "The StartElement interface provides access to information about start elements. A StartElement is reported for each Start Tag in the document.",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}