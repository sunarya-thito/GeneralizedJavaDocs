{
  "packageName": "javax.xml.parsers",
  "simpleName": "DocumentBuilder",
  "moduleName": "java.xml",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reset",
      "comment": "Reset this DocumentBuilder to its original configuration. DocumentBuilder is reset to the same state as when it was created with DocumentBuilderFactory.newDocumentBuilder(). reset() is designed to allow the reuse of existing DocumentBuilders thus saving resources associated with the creation of new DocumentBuilders. The reset DocumentBuilder is not guaranteed to have the same EntityResolver or ErrorHandler Objects, e.g. Object.equals(Object obj). It is guaranteed to have a functionally equal EntityResolver and ErrorHandler.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - When implementation does not override this method."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Document",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parse",
      "comment": "Parse the content of the given InputStream as an XML document and return a new DOM Document object. An IllegalArgumentException is thrown if the InputStream is null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/DocumentHandler.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eDocumentHandler\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eis\u003c/code\u003e - InputStream containing the content to be parsed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If any IO errors occur.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - If any parse errors occur.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - When \n\u003ccode\u003eis\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003eDocument\u003c/code\u003e result of parsing the \n\u003ccode\u003eInputStream\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Document",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parse",
      "comment": "Parse the content of the given InputStream as an XML document and return a new DOM Document object. An IllegalArgumentException is thrown if the InputStream is null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/DocumentHandler.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eDocumentHandler\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eis\u003c/code\u003e - InputStream containing the content to be parsed.",
          "\u003ccode\u003esystemId\u003c/code\u003e - Provide a base for resolving relative URIs."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If any IO errors occur.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - If any parse errors occur.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - When \n\u003ccode\u003eis\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A new DOM Document object."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Document",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parse",
      "comment": "Parse the content of the given URI as an XML document and return a new DOM Document object. An IllegalArgumentException is thrown if the URI is null null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/DocumentHandler.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eDocumentHandler\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - The location of the content to be parsed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If any IO errors occur.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - If any parse errors occur.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - When \n\u003ccode\u003euri\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A new DOM Document object."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Document",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parse",
      "comment": "Parse the content of the given file as an XML document and return a new DOM Document object. An IllegalArgumentException is thrown if the File is null null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/DocumentHandler.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eDocumentHandler\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - The file containing the XML to parse."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If any IO errors occur.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - If any parse errors occur.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - When \n\u003ccode\u003ef\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A new DOM Document object."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Document",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "parse",
      "comment": "Parse the content of the given input source as an XML document and return a new DOM Document object. An IllegalArgumentException is thrown if the InputSource is null null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/DocumentHandler.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eDocumentHandler\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eis\u003c/code\u003e - InputSource containing the content to be parsed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If any IO errors occur.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - If any parse errors occur.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - When \n\u003ccode\u003eis\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A new DOM Document object."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isNamespaceAware",
      "comment": "Indicates whether or not this parser is configured to understand namespaces.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this parser is configured to understand namespaces; false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isValidating",
      "comment": "Indicates whether or not this parser is configured to validate XML documents.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this parser is configured to validate XML documents; false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setEntityResolver",
      "comment": "Specify the EntityResolver to be used to resolve entities present in the XML document to be parsed. Setting this to null will result in the underlying implementation using it\u0027s own default implementation and behavior.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eer\u003c/code\u003e - The \n\u003ccode\u003eEntityResolver\u003c/code\u003e to be used to resolve entities present in the XML document to be parsed."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setErrorHandler",
      "comment": "Specify the ErrorHandler to be used by the parser. Setting this to null will result in the underlying implementation using it\u0027s own default implementation and behavior.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eeh\u003c/code\u003e - The \n\u003ccode\u003eErrorHandler\u003c/code\u003e to be used by the parser."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Document",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "newDocument",
      "comment": "Obtain a new instance of a DOM Document object to build a DOM tree with.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A new instance of a DOM Document object."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.DOMImplementation",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDOMImplementation",
      "comment": "Obtain an instance of a DOMImplementation object.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A new instance of a \n\u003ccode\u003eDOMImplementation\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.xml.validation.Schema",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSchema",
      "comment": "Get a reference to the the Schema being used by the XML processor. If no schema is being used, null is returned.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - When implementation does not override this method"
        ],
        "return": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/validation/Schema.html\" title\u003d\"class in javax.xml.validation\"\u003e\u003ccode\u003eSchema\u003c/code\u003e\u003c/a\u003e being used or \n\u003ccode\u003enull\u003c/code\u003e if none in use"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isXIncludeAware",
      "comment": "Get the XInclude processing mode for this parser.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/parsers/DocumentBuilderFactory.html#setXIncludeAware(boolean)\"\u003e\u003ccode\u003eDocumentBuilderFactory.setXIncludeAware(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - When implementation does not override this method"
        ],
        "return": [
          "the return value of the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/parsers/DocumentBuilderFactory.html#isXIncludeAware()\"\u003e\u003ccode\u003eDocumentBuilderFactory.isXIncludeAware()\u003c/code\u003e\u003c/a\u003e when this parser was created from factory."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Protected constructor",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.xml.parsers.DocumentBuilder",
  "comment": "Defines the API to obtain DOM Document instances from an XML document. Using this class, an application programmer can obtain a \n\u003ca href\u003d\"../../../org/w3c/dom/Document.html\" title\u003d\"interface in org.w3c.dom\"\u003e\u003ccode\u003eDocument\u003c/code\u003e\u003c/a\u003e from XML.\n\u003cp\u003e An instance of this class can be obtained from the \u003ca href\u003d\"DocumentBuilderFactory.html#newDocumentBuilder()\"\u003e\u003ccode\u003eDocumentBuilderFactory.newDocumentBuilder()\u003c/code\u003e\u003c/a\u003e method. Once an instance of this class is obtained, XML can be parsed from a variety of input sources. These input sources are InputStreams, Files, URLs, and SAX InputSources.\u003c/p\u003e\n\u003cp\u003e Note that this class reuses several classes from the SAX API. This does not require that the implementor of the underlying DOM implementation use a SAX parser to parse XML document into a \u003ccode\u003eDocument\u003c/code\u003e. It merely requires that the implementation communicate with the application using these existing APIs.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}