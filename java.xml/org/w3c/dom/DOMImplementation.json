{
  "packageName": "org.w3c.dom",
  "simpleName": "DOMImplementation",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasFeature",
      "comment": "Test if the DOM implementation implements a specific feature and version, as specified in DOM Features.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efeature\u003c/code\u003e - The name of the feature to test.",
          "\u003ccode\u003eversion\u003c/code\u003e - This is the version number of the feature to test."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the feature is implemented in the specified version, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.DocumentType",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createDocumentType",
      "comment": "Creates an empty DocumentType node. Entity declarations and notations are not made available. Entity reference expansions and default attribute additions do not occur..",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003equalifiedName\u003c/code\u003e - The qualified name of the document type to be created.",
          "\u003ccode\u003epublicId\u003c/code\u003e - The external subset public identifier.",
          "\u003ccode\u003esystemId\u003c/code\u003e - The external subset system identifier."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - INVALID_CHARACTER_ERR: Raised if the specified qualified name is not an XML name according to [\n\u003ca href\u003d\"http://www.w3.org/TR/2004/REC-xml-20040204\"\u003eXML 1.0\u003c/a\u003e]. \n\u003cbr\u003eNAMESPACE_ERR: Raised if the \n\u003ccode\u003equalifiedName\u003c/code\u003e is malformed. \n\u003cbr\u003eNOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \"XML\" and the language exposed through the Document does not support XML Namespaces (such as [\n\u003ca href\u003d\"http://www.w3.org/TR/1999/REC-html401-19991224/\"\u003eHTML 4.01\u003c/a\u003e])."
        ],
        "return": [
          "A new \n\u003ccode\u003eDocumentType\u003c/code\u003e node with \n\u003ccode\u003eNode.ownerDocument\u003c/code\u003e set to \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Document",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createDocument",
      "comment": "Creates a DOM Document object of the specified type with its document element. Note that based on the DocumentType given to create the document, the implementation may instantiate specialized Document objects that support additional features than the \"Core\", such as \"HTML\" [DOM Level 2 HTML] . On the other hand, setting the DocumentType after the document was created makes this very unlikely to happen. Alternatively, specialized Document creation methods, such as createHTMLDocument [DOM Level 2 HTML] , can be used to obtain specific types of Document objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - The namespace URI of the document element to create or \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003equalifiedName\u003c/code\u003e - The qualified name of the document element to be created or \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003edoctype\u003c/code\u003e - The type of document to be created or \n\u003ccode\u003enull\u003c/code\u003e. When \n\u003ccode\u003edoctype\u003c/code\u003e is not \n\u003ccode\u003enull\u003c/code\u003e, its \n\u003ccode\u003eNode.ownerDocument\u003c/code\u003e attribute is set to the document being created."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - INVALID_CHARACTER_ERR: Raised if the specified qualified name is not an XML name according to [\n\u003ca href\u003d\"http://www.w3.org/TR/2004/REC-xml-20040204\"\u003eXML 1.0\u003c/a\u003e]. \n\u003cbr\u003eNAMESPACE_ERR: Raised if the \n\u003ccode\u003equalifiedName\u003c/code\u003e is malformed, if the \n\u003ccode\u003equalifiedName\u003c/code\u003e has a prefix and the \n\u003ccode\u003enamespaceURI\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or if the \n\u003ccode\u003equalifiedName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e and the \n\u003ccode\u003enamespaceURI\u003c/code\u003e is different from \n\u003ccode\u003enull\u003c/code\u003e, or if the \n\u003ccode\u003equalifiedName\u003c/code\u003e has a prefix that is \"xml\" and the \n\u003ccode\u003enamespaceURI\u003c/code\u003e is different from \"\n\u003ca href\u003d\"http://www.w3.org/XML/1998/namespace\"\u003e http://www.w3.org/XML/1998/namespace\u003c/a\u003e\" [\n\u003ca href\u003d\"http://www.w3.org/TR/1999/REC-xml-names-19990114/\"\u003eXML Namespaces\u003c/a\u003e] , or if the DOM implementation does not support the \n\u003ccode\u003e\"XML\"\u003c/code\u003e feature but a non-null namespace URI was provided, since namespaces were defined by XML. \n\u003cbr\u003eWRONG_DOCUMENT_ERR: Raised if \n\u003ccode\u003edoctype\u003c/code\u003e has already been used with a different document or was created from a different implementation. \n\u003cbr\u003eNOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \"XML\" and the language exposed through the Document does not support XML Namespaces (such as [\n\u003ca href\u003d\"http://www.w3.org/TR/1999/REC-html401-19991224/\"\u003eHTML 4.01\u003c/a\u003e])."
        ],
        "return": [
          "A new \n\u003ccode\u003eDocument\u003c/code\u003e object with its document element. If the \n\u003ccode\u003eNamespaceURI\u003c/code\u003e, \n\u003ccode\u003equalifiedName\u003c/code\u003e, and \n\u003ccode\u003edoctype\u003c/code\u003e are \n\u003ccode\u003enull\u003c/code\u003e, the returned \n\u003ccode\u003eDocument\u003c/code\u003e is empty with no document element."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFeature",
      "comment": "This method returns a specialized object which implements the specialized APIs of the specified feature and version, as specified in DOM Features. The specialized object may also be obtained by using binding-specific casting methods but is not necessarily expected to, as discussed in . This method also allow the implementation to provide specialized objects which do not support the DOMImplementation interface.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efeature\u003c/code\u003e - The name of the feature requested. Note that any plus sign \"+\" prepended to the name of the feature will be ignored since it is not significant in the context of this method.",
          "\u003ccode\u003eversion\u003c/code\u003e - This is the version number of the feature to test."
        ],
        "return": [
          "Returns an object which implements the specialized APIs of the specified feature and version, if any, or \n\u003ccode\u003enull\u003c/code\u003e if there is no object which implements interfaces associated with that feature. If the \n\u003ccode\u003eDOMObject\u003c/code\u003e returned by this method implements the \n\u003ccode\u003eDOMImplementation\u003c/code\u003e interface, it must delegate to the primary core \n\u003ccode\u003eDOMImplementation\u003c/code\u003e and not return results inconsistent with the primary core \n\u003ccode\u003eDOMImplementation\u003c/code\u003e such as \n\u003ccode\u003ehasFeature\u003c/code\u003e, \n\u003ccode\u003egetFeature\u003c/code\u003e, etc."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.DOMImplementation",
  "comment": "The \n\u003ccode\u003eDOMImplementation\u003c/code\u003e interface provides a number of methods for performing operations that are independent of any particular instance of the document object model. \n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407\"\u003eDocument Object Model (DOM) Level 3 Core Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}