{
  "packageName": "org.w3c.dom.events",
  "simpleName": "UIEvent",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.w3c.dom.events.Event",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "org.w3c.dom.views.AbstractView",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getView",
      "comment": "The view attribute identifies the AbstractView from which the event was generated.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDetail",
      "comment": "Specifies some detail information about the Event, depending on the type of event.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "typeArg"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "canBubbleArg"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "cancelableArg"
          }
        },
        {
          "type": {
            "name": "org.w3c.dom.views.AbstractView",
            "type": "Class"
          },
          "field": {
            "name": "viewArg"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "detailArg"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "initUIEvent",
      "comment": "The initUIEvent method is used to initialize the value of a UIEvent created through the DocumentEvent interface. This method may only be called before the UIEvent has been dispatched via the dispatchEvent method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etypeArg\u003c/code\u003e - Specifies the event type.",
          "\u003ccode\u003ecanBubbleArg\u003c/code\u003e - Specifies whether or not the event can bubble.",
          "\u003ccode\u003ecancelableArg\u003c/code\u003e - Specifies whether or not the event\u0027s default action can be prevented.",
          "\u003ccode\u003eviewArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s \n\u003ccode\u003eAbstractView\u003c/code\u003e.",
          "\u003ccode\u003edetailArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s detail."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.events.UIEvent",
  "comment": "The \n\u003ccode\u003eUIEvent\u003c/code\u003e interface provides specific contextual information associated with User Interface events. \n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113\"\u003eDocument Object Model (DOM) Level 2 Events Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5, DOM Level 2"
    ]
  }
}