{
  "packageName": "org.w3c.dom.events",
  "simpleName": "Event",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CAPTURING_PHASE",
      "comment": "The current event phase is the capturing phase.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.events.Event.CAPTURING_PHASE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "AT_TARGET",
      "comment": "The event is currently being evaluated at the target EventTarget.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.events.Event.AT_TARGET\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "BUBBLING_PHASE",
      "comment": "The current event phase is the bubbling phase.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.events.Event.BUBBLING_PHASE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getType",
      "comment": "The name of the event (case-insensitive). The name must be an XML name.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.events.EventTarget",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTarget",
      "comment": "Used to indicate the EventTarget to which the event was originally dispatched.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.events.EventTarget",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCurrentTarget",
      "comment": "Used to indicate the EventTarget whose EventListeners are currently being processed. This is particularly useful during capturing and bubbling.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEventPhase",
      "comment": "Used to indicate which phase of event flow is currently being evaluated.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBubbles",
      "comment": "Used to indicate whether or not an event is a bubbling event. If the event can bubble the value is true, else the value is false.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCancelable",
      "comment": "Used to indicate whether or not an event can have its default action prevented. If the default action can be prevented the value is true, else the value is false.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTimeStamp",
      "comment": "Used to specify the time (in milliseconds relative to the epoch) at which the event was created. Due to the fact that some systems may not provide this information the value of timeStamp may be not available for all events. When not available, a value of 0 will be returned. Examples of epoch time are the time of the system start or 0:0:0 UTC 1st January 1970.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "stopPropagation",
      "comment": "The stopPropagation method is used prevent further propagation of an event during event flow. If this method is called by any EventListener the event will cease propagating through the tree. The event will complete dispatch to all listeners on the current EventTarget before event flow stops. This method may be used during any stage of event flow.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "preventDefault",
      "comment": "If an event is cancelable, the preventDefault method is used to signify that the event is to be canceled, meaning any default action normally taken by the implementation as a result of the event will not occur. If, during any stage of event flow, the preventDefault method is called the event is canceled. Any default action associated with the event will not occur. Calling this method for a non-cancelable event has no effect. Once preventDefault has been called it will remain in effect throughout the remainder of the event\u0027s propagation. This method may be used during any stage of event flow.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "initEvent",
      "comment": "The initEvent method is used to initialize the value of an Event created through the DocumentEvent interface. This method may only be called before the Event has been dispatched via the dispatchEvent method, though it may be called multiple times during that phase if necessary. If called multiple times the final invocation takes precedence. If called from a subclass of Event interface only the values specified in the initEvent method are modified, all other attributes are left unchanged.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eeventTypeArg\u003c/code\u003e - Specifies the event type. This type may be any event type currently defined in this specification or a new event type.. The string must be an XML name. Any new event type must not begin with any upper, lower, or mixed case version of the string \"DOM\". This prefix is reserved for future DOM event sets. It is also strongly recommended that third parties adding their own events use their own prefix to avoid confusion and lessen the probability of conflicts with other new events.",
          "\u003ccode\u003ecanBubbleArg\u003c/code\u003e - Specifies whether or not the event can bubble.",
          "\u003ccode\u003ecancelableArg\u003c/code\u003e - Specifies whether or not the event\u0027s default action can be prevented."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.events.Event",
  "comment": "The \n\u003ccode\u003eEvent\u003c/code\u003e interface is used to provide contextual information about an event to the handler processing the event. An object which implements the \n\u003ccode\u003eEvent\u003c/code\u003e interface is generally passed as the first parameter to an event handler. More specific context information is passed to event handlers by deriving additional interfaces from \n\u003ccode\u003eEvent\u003c/code\u003e which contain information directly relating to the type of event they accompany. These derived interfaces are also implemented by the object passed to the event listener. \n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113\"\u003eDocument Object Model (DOM) Level 2 Events Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5, DOM Level 2"
    ]
  }
}