{
  "packageName": "org.w3c.dom.events",
  "simpleName": "MutationEvent",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.w3c.dom.events.Event",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "MODIFICATION",
      "comment": "The Attr was modified in place.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.events.MutationEvent.MODIFICATION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ADDITION",
      "comment": "The Attr was just added.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.events.MutationEvent.ADDITION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "REMOVAL",
      "comment": "The Attr was just removed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.events.MutationEvent.REMOVAL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRelatedNode",
      "comment": "relatedNode is used to identify a secondary node related to a mutation event. For example, if a mutation event is dispatched to a node indicating that its parent has changed, the relatedNode is the changed parent. If an event is instead dispatched to a subtree indicating a node was changed within it, the relatedNode is the changed node. In the case of the DOMAttrModified event it indicates the Attr node which was modified, added, or removed.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPrevValue",
      "comment": "prevValue indicates the previous value of the Attr node in DOMAttrModified events, and of the CharacterData node in DOMCharacterDataModified events.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNewValue",
      "comment": "newValue indicates the new value of the Attr node in DOMAttrModified events, and of the CharacterData node in DOMCharacterDataModified events.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttrName",
      "comment": "attrName indicates the name of the changed Attr node in a DOMAttrModified event.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttrChange",
      "comment": "attrChange indicates the type of change which triggered the DOMAttrModified event. The values can be MODIFICATION , ADDITION, or REMOVAL.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "typeArg"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "canBubbleArg"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "cancelableArg"
          }
        },
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "relatedNodeArg"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prevValueArg"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "newValueArg"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attrNameArg"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "attrChangeArg"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "initMutationEvent",
      "comment": "The initMutationEvent method is used to initialize the value of a MutationEvent created through the DocumentEvent interface. This method may only be called before the MutationEvent has been dispatched via the dispatchEvent method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etypeArg\u003c/code\u003e - Specifies the event type.",
          "\u003ccode\u003ecanBubbleArg\u003c/code\u003e - Specifies whether or not the event can bubble.",
          "\u003ccode\u003ecancelableArg\u003c/code\u003e - Specifies whether or not the event\u0027s default action can be prevented.",
          "\u003ccode\u003erelatedNodeArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s related Node.",
          "\u003ccode\u003eprevValueArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s \n\u003ccode\u003eprevValue\u003c/code\u003e attribute. This value may be null.",
          "\u003ccode\u003enewValueArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s \n\u003ccode\u003enewValue\u003c/code\u003e attribute. This value may be null.",
          "\u003ccode\u003eattrNameArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s \n\u003ccode\u003eattrName\u003c/code\u003e attribute. This value may be null.",
          "\u003ccode\u003eattrChangeArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s \n\u003ccode\u003eattrChange\u003c/code\u003e attribute"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.events.MutationEvent",
  "comment": "The \n\u003ccode\u003eMutationEvent\u003c/code\u003e interface provides specific contextual information associated with Mutation events. \n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113\"\u003eDocument Object Model (DOM) Level 2 Events Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5, DOM Level 2"
    ]
  }
}