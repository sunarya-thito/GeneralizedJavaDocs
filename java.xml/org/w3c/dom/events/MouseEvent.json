{
  "packageName": "org.w3c.dom.events",
  "simpleName": "MouseEvent",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.w3c.dom.events.UIEvent",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getScreenX",
      "comment": "The horizontal coordinate at which the event occurred relative to the origin of the screen coordinate system.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getScreenY",
      "comment": "The vertical coordinate at which the event occurred relative to the origin of the screen coordinate system.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getClientX",
      "comment": "The horizontal coordinate at which the event occurred relative to the DOM implementation\u0027s client area.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getClientY",
      "comment": "The vertical coordinate at which the event occurred relative to the DOM implementation\u0027s client area.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCtrlKey",
      "comment": "Used to indicate whether the \u0027ctrl\u0027 key was depressed during the firing of the event.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getShiftKey",
      "comment": "Used to indicate whether the \u0027shift\u0027 key was depressed during the firing of the event.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAltKey",
      "comment": "Used to indicate whether the \u0027alt\u0027 key was depressed during the firing of the event. On some platforms this key may map to an alternative key name.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMetaKey",
      "comment": "Used to indicate whether the \u0027meta\u0027 key was depressed during the firing of the event. On some platforms this key may map to an alternative key name.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getButton",
      "comment": "During mouse events caused by the depression or release of a mouse button, button is used to indicate which mouse button changed state. The values for button range from zero to indicate the left button of the mouse, one to indicate the middle button if present, and two to indicate the right button. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.events.EventTarget",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRelatedTarget",
      "comment": "Used to identify a secondary EventTarget related to a UI event. Currently this attribute is used with the mouseover event to indicate the EventTarget which the pointing device exited and with the mouseout event to indicate the EventTarget which the pointing device entered.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "typeArg"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "canBubbleArg"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "cancelableArg"
          }
        },
        {
          "type": {
            "name": "org.w3c.dom.views.AbstractView",
            "type": "Class"
          },
          "field": {
            "name": "viewArg"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "detailArg"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "screenXArg"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "screenYArg"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "clientXArg"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "clientYArg"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "ctrlKeyArg"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "altKeyArg"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "shiftKeyArg"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "metaKeyArg"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "buttonArg"
          }
        },
        {
          "type": {
            "name": "org.w3c.dom.events.EventTarget",
            "type": "Class"
          },
          "field": {
            "name": "relatedTargetArg"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "initMouseEvent",
      "comment": "The initMouseEvent method is used to initialize the value of a MouseEvent created through the DocumentEvent interface. This method may only be called before the MouseEvent has been dispatched via the dispatchEvent method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etypeArg\u003c/code\u003e - Specifies the event type.",
          "\u003ccode\u003ecanBubbleArg\u003c/code\u003e - Specifies whether or not the event can bubble.",
          "\u003ccode\u003ecancelableArg\u003c/code\u003e - Specifies whether or not the event\u0027s default action can be prevented.",
          "\u003ccode\u003eviewArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s \n\u003ccode\u003eAbstractView\u003c/code\u003e.",
          "\u003ccode\u003edetailArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s mouse click count.",
          "\u003ccode\u003escreenXArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s screen x coordinate",
          "\u003ccode\u003escreenYArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s screen y coordinate",
          "\u003ccode\u003eclientXArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s client x coordinate",
          "\u003ccode\u003eclientYArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s client y coordinate",
          "\u003ccode\u003ectrlKeyArg\u003c/code\u003e - Specifies whether or not control key was depressed during the \n\u003ccode\u003eEvent\u003c/code\u003e.",
          "\u003ccode\u003ealtKeyArg\u003c/code\u003e - Specifies whether or not alt key was depressed during the \n\u003ccode\u003eEvent\u003c/code\u003e.",
          "\u003ccode\u003eshiftKeyArg\u003c/code\u003e - Specifies whether or not shift key was depressed during the \n\u003ccode\u003eEvent\u003c/code\u003e.",
          "\u003ccode\u003emetaKeyArg\u003c/code\u003e - Specifies whether or not meta key was depressed during the \n\u003ccode\u003eEvent\u003c/code\u003e.",
          "\u003ccode\u003ebuttonArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s mouse button.",
          "\u003ccode\u003erelatedTargetArg\u003c/code\u003e - Specifies the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s related \n\u003ccode\u003eEventTarget\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.events.MouseEvent",
  "comment": "The \n\u003ccode\u003eMouseEvent\u003c/code\u003e interface provides specific contextual information associated with Mouse events. \n\u003cp\u003eThe \u003ccode\u003edetail\u003c/code\u003e attribute inherited from \u003ccode\u003eUIEvent\u003c/code\u003e indicates the number of times a mouse button has been pressed and released over the same screen location during a user action. The attribute value is 1 when the user begins this action and increments by 1 for each full sequence of pressing and releasing. If the user moves the mouse between the mousedown and mouseup the value will be set to 0, indicating that no click is occurring. \u003c/p\u003e\n\u003cp\u003eIn the case of nested elements mouse events are always targeted at the most deeply nested element. Ancestors of the targeted element may use bubbling to obtain notification of mouse events which occur within its descendent elements. \u003c/p\u003e\n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113\"\u003eDocument Object Model (DOM) Level 2 Events Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5, DOM Level 2"
    ]
  }
}