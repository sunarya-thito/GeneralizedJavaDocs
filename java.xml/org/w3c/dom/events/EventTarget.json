{
  "packageName": "org.w3c.dom.events",
  "simpleName": "EventTarget",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "org.w3c.dom.events.EventListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "useCapture",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addEventListener",
      "comment": "This method allows the registration of event listeners on the event target. If an EventListener is added to an EventTarget while it is processing an event, it will not be triggered by the current actions but may be triggered during a later stage of event flow, such as the bubbling phase. If multiple identical EventListeners are registered on the same EventTarget with the same parameters the duplicate instances are discarded. They do not cause the EventListener to be called twice and since they are discarded they do not need to be removed with the removeEventListener method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - The event type for which the user is registering",
          "\u003ccode\u003elistener\u003c/code\u003e - The \n\u003ccode\u003elistener\u003c/code\u003e parameter takes an interface implemented by the user which contains the methods to be called when the event occurs.",
          "\u003ccode\u003euseCapture\u003c/code\u003e - If true, \n\u003ccode\u003euseCapture\u003c/code\u003e indicates that the user wishes to initiate capture. After initiating capture, all events of the specified type will be dispatched to the registered \n\u003ccode\u003eEventListener\u003c/code\u003e before being dispatched to any \n\u003ccode\u003eEventTargets\u003c/code\u003e beneath them in the tree. Events which are bubbling upward through the tree will not trigger an \n\u003ccode\u003eEventListener\u003c/code\u003e designated to use capture."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "org.w3c.dom.events.EventListener",
            "type": "Class"
          },
          "name": "listener",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "useCapture",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeEventListener",
      "comment": "This method allows the removal of event listeners from the event target. If an EventListener is removed from an EventTarget while it is processing an event, it will not be triggered by the current actions. EventListeners can never be invoked after being removed. Calling removeEventListener with arguments which do not identify any currently registered EventListener on the EventTarget has no effect.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - Specifies the event type of the \n\u003ccode\u003eEventListener\u003c/code\u003e being removed.",
          "\u003ccode\u003elistener\u003c/code\u003e - The \n\u003ccode\u003eEventListener\u003c/code\u003e parameter indicates the \n\u003ccode\u003eEventListener \u003c/code\u003e to be removed.",
          "\u003ccode\u003euseCapture\u003c/code\u003e - Specifies whether the \n\u003ccode\u003eEventListener\u003c/code\u003e being removed was registered as a capturing listener or not. If a listener was registered twice, one with capture and one without, each must be removed separately. Removal of a capturing listener does not affect a non-capturing version of the same listener, and vice versa."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.events.EventException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "org.w3c.dom.events.Event",
            "type": "Class"
          },
          "name": "evt",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dispatchEvent",
      "comment": "This method allows the dispatch of events into the implementations event model. Events dispatched in this manner will have the same capturing and bubbling behavior as events dispatched directly by the implementation. The target of the event is the EventTarget on which dispatchEvent is called.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eevt\u003c/code\u003e - Specifies the event type, behavior, and contextual information to be used in processing the event."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/events/EventException.html\" title\u003d\"class in org.w3c.dom.events\"\u003eEventException\u003c/a\u003e\u003c/code\u003e - UNSPECIFIED_EVENT_TYPE_ERR: Raised if the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s type was not specified by initializing the event before \n\u003ccode\u003edispatchEvent\u003c/code\u003e was called. Specification of the \n\u003ccode\u003eEvent\u003c/code\u003e\u0027s type as \n\u003ccode\u003enull\u003c/code\u003e or an empty string will also trigger this exception."
        ],
        "return": [
          "The return value of \n\u003ccode\u003edispatchEvent\u003c/code\u003e indicates whether any of the listeners which handled the event called \n\u003ccode\u003epreventDefault\u003c/code\u003e. If \n\u003ccode\u003epreventDefault\u003c/code\u003e was called the value is false, else the value is true."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.events.EventTarget",
  "comment": "The \n\u003ccode\u003eEventTarget\u003c/code\u003e interface is implemented by all \n\u003ccode\u003eNodes\u003c/code\u003e in an implementation which supports the DOM Event Model. Therefore, this interface can be obtained by using binding-specific casting methods on an instance of the \n\u003ccode\u003eNode\u003c/code\u003e interface. The interface allows registration and removal of \n\u003ccode\u003eEventListeners\u003c/code\u003e on an \n\u003ccode\u003eEventTarget\u003c/code\u003e and dispatch of events to that \n\u003ccode\u003eEventTarget\u003c/code\u003e. \n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113\"\u003eDocument Object Model (DOM) Level 2 Events Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5, DOM Level 2"
    ]
  }
}