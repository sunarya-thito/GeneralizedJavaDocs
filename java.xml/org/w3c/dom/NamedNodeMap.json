{
  "packageName": "org.w3c.dom",
  "simpleName": "NamedNodeMap",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNamedItem",
      "comment": "Retrieves a node specified by name.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The \n\u003ccode\u003enodeName\u003c/code\u003e of a node to retrieve."
        ],
        "return": [
          "A \n\u003ccode\u003eNode\u003c/code\u003e (of any type) with the specified \n\u003ccode\u003enodeName\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if it does not identify any node in this map."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "arg"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNamedItem",
      "comment": "Adds a node using its nodeName attribute. If a node with that name is already present in this map, it is replaced by the new one. Replacing a node by itself has no effect. As the nodeName attribute is used to derive the name which the node must be stored under, multiple nodes of certain types (those that have a \"special\" string value) cannot be stored as the names would clash. This is seen as preferable to allowing nodes to be aliased.",
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - A node to store in this map. The node will later be accessible using the value of its \n\u003ccode\u003enodeName\u003c/code\u003e attribute."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - WRONG_DOCUMENT_ERR: Raised if \n\u003ccode\u003earg\u003c/code\u003e was created from a different document than the one that created this map. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly. \n\u003cbr\u003eINUSE_ATTRIBUTE_ERR: Raised if \n\u003ccode\u003earg\u003c/code\u003e is an \n\u003ccode\u003eAttr\u003c/code\u003e that is already an attribute of another \n\u003ccode\u003eElement\u003c/code\u003e object. The DOM user must explicitly clone \n\u003ccode\u003eAttr\u003c/code\u003e nodes to re-use them in other elements. \n\u003cbr\u003eHIERARCHY_REQUEST_ERR: Raised if an attempt is made to add a node doesn\u0027t belong in this NamedNodeMap. Examples would include trying to insert something other than an Attr node into an Element\u0027s map of attributes, or a non-Entity node into the DocumentType\u0027s map of Entities."
        ],
        "return": [
          "If the new \n\u003ccode\u003eNode\u003c/code\u003e replaces an existing node the replaced \n\u003ccode\u003eNode\u003c/code\u003e is returned, otherwise \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeNamedItem",
      "comment": "Removes a node specified by name. When this map contains the attributes attached to an element, if the removed attribute is known to have a default value, an attribute immediately appears containing the default value as well as the corresponding namespace URI, local name, and prefix when applicable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The \n\u003ccode\u003enodeName\u003c/code\u003e of the node to remove."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NOT_FOUND_ERR: Raised if there is no node named \n\u003ccode\u003ename\u003c/code\u003e in this map. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly."
        ],
        "return": [
          "The node removed from this map if a node with such a name exists."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "item",
      "comment": "Returns the indexth item in the map. If index is greater than or equal to the number of nodes in this map, this returns null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - Index into this map."
        ],
        "return": [
          "The node at the \n\u003ccode\u003eindex\u003c/code\u003eth position in the map, or \n\u003ccode\u003enull\u003c/code\u003e if that is not a valid index."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLength",
      "comment": "The number of nodes in this map. The range of valid child node indices is 0 to length-1 inclusive.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "namespaceURI"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "localName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNamedItemNS",
      "comment": "Retrieves a node specified by local name and namespace URI. Per [XML Namespaces] , applications must use the value null as the namespaceURI parameter for methods if they wish to have no namespace.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - The namespace URI of the node to retrieve.",
          "\u003ccode\u003elocalName\u003c/code\u003e - The local name of the node to retrieve."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \"XML\" and the language exposed through the Document does not support XML Namespaces (such as [\n\u003ca href\u003d\"http://www.w3.org/TR/1999/REC-html401-19991224/\"\u003eHTML 4.01\u003c/a\u003e])."
        ],
        "return": [
          "A \n\u003ccode\u003eNode\u003c/code\u003e (of any type) with the specified local name and namespace URI, or \n\u003ccode\u003enull\u003c/code\u003e if they do not identify any node in this map."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "arg"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNamedItemNS",
      "comment": "Adds a node using its namespaceURI and localName. If a node with that namespace URI and that local name is already present in this map, it is replaced by the new one. Replacing a node by itself has no effect. Per [XML Namespaces] , applications must use the value null as the namespaceURI parameter for methods if they wish to have no namespace.",
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - A node to store in this map. The node will later be accessible using the value of its \n\u003ccode\u003enamespaceURI\u003c/code\u003e and \n\u003ccode\u003elocalName\u003c/code\u003e attributes."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - WRONG_DOCUMENT_ERR: Raised if \n\u003ccode\u003earg\u003c/code\u003e was created from a different document than the one that created this map. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly. \n\u003cbr\u003eINUSE_ATTRIBUTE_ERR: Raised if \n\u003ccode\u003earg\u003c/code\u003e is an \n\u003ccode\u003eAttr\u003c/code\u003e that is already an attribute of another \n\u003ccode\u003eElement\u003c/code\u003e object. The DOM user must explicitly clone \n\u003ccode\u003eAttr\u003c/code\u003e nodes to re-use them in other elements. \n\u003cbr\u003eHIERARCHY_REQUEST_ERR: Raised if an attempt is made to add a node doesn\u0027t belong in this NamedNodeMap. Examples would include trying to insert something other than an Attr node into an Element\u0027s map of attributes, or a non-Entity node into the DocumentType\u0027s map of Entities. \n\u003cbr\u003eNOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \"XML\" and the language exposed through the Document does not support XML Namespaces (such as [\n\u003ca href\u003d\"http://www.w3.org/TR/1999/REC-html401-19991224/\"\u003eHTML 4.01\u003c/a\u003e])."
        ],
        "return": [
          "If the new \n\u003ccode\u003eNode\u003c/code\u003e replaces an existing node the replaced \n\u003ccode\u003eNode\u003c/code\u003e is returned, otherwise \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "namespaceURI"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "localName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeNamedItemNS",
      "comment": "Removes a node specified by local name and namespace URI. A removed attribute may be known to have a default value when this map contains the attributes attached to an element, as returned by the attributes attribute of the Node interface. If so, an attribute immediately appears containing the default value as well as the corresponding namespace URI, local name, and prefix when applicable. Per [XML Namespaces] , applications must use the value null as the namespaceURI parameter for methods if they wish to have no namespace.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - The namespace URI of the node to remove.",
          "\u003ccode\u003elocalName\u003c/code\u003e - The local name of the node to remove."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NOT_FOUND_ERR: Raised if there is no node with the specified \n\u003ccode\u003enamespaceURI\u003c/code\u003e and \n\u003ccode\u003elocalName\u003c/code\u003e in this map. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly. \n\u003cbr\u003eNOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \"XML\" and the language exposed through the Document does not support XML Namespaces (such as [\n\u003ca href\u003d\"http://www.w3.org/TR/1999/REC-html401-19991224/\"\u003eHTML 4.01\u003c/a\u003e])."
        ],
        "return": [
          "The node removed from this map if a node with such a local name and namespace URI exists."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.NamedNodeMap",
  "comment": "Objects implementing the \n\u003ccode\u003eNamedNodeMap\u003c/code\u003e interface are used to represent collections of nodes that can be accessed by name. Note that \n\u003ccode\u003eNamedNodeMap\u003c/code\u003e does not inherit from \n\u003ccode\u003eNodeList\u003c/code\u003e; \n\u003ccode\u003eNamedNodeMaps\u003c/code\u003e are not maintained in any particular order. Objects contained in an object implementing \n\u003ccode\u003eNamedNodeMap\u003c/code\u003e may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a \n\u003ccode\u003eNamedNodeMap\u003c/code\u003e, and does not imply that the DOM specifies an order to these Nodes. \n\u003cp\u003e\u003ccode\u003eNamedNodeMap\u003c/code\u003e objects in the DOM are live. \u003c/p\u003e\n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407\"\u003eDocument Object Model (DOM) Level 3 Core Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}