{
  "packageName": "org.w3c.dom",
  "simpleName": "CDATASection",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.w3c.dom.Text",
    "type": "Class"
  },
  "members": [],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.CDATASection",
  "comment": "CDATA sections are used to escape blocks of text containing characters that would otherwise be regarded as markup. The only delimiter that is recognized in a CDATA section is the \"]]\u0026gt;\" string that ends the CDATA section. CDATA sections cannot be nested. Their primary purpose is for including material such as XML fragments, without needing to escape all the delimiters. \n\u003cp\u003eThe \u003ccode\u003eCharacterData.data\u003c/code\u003e attribute holds the text that is contained by the CDATA section. Note that this \u003cem\u003emay\u003c/em\u003e contain characters that need to be escaped outside of CDATA sections and that, depending on the character encoding (\"charset\") chosen for serialization, it may be impossible to write out some characters as part of a CDATA section. \u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eCDATASection\u003c/code\u003e interface inherits from the \u003ccode\u003eCharacterData\u003c/code\u003e interface through the \u003ccode\u003eText\u003c/code\u003e interface. Adjacent \u003ccode\u003eCDATASection\u003c/code\u003e nodes are not merged by use of the \u003ccode\u003enormalize\u003c/code\u003e method of the \u003ccode\u003eNode\u003c/code\u003e interface. \u003c/p\u003e\n\u003cp\u003e No lexical check is done on the content of a CDATA section and it is therefore possible to have the character sequence \u003ccode\u003e\"]]\u0026gt;\"\u003c/code\u003e in the content, which is illegal in a CDATA section per section 2.7 of [\u003ca href\u003d\"http://www.w3.org/TR/2004/REC-xml-20040204\"\u003eXML 1.0\u003c/a\u003e]. The presence of this character sequence must generate a fatal error during serialization or the cdata section must be splitted before the serialization (see also the parameter \u003ccode\u003e\"split-cdata-sections\"\u003c/code\u003e in the \u003ccode\u003eDOMConfiguration\u003c/code\u003e interface). \u003c/p\u003e\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e Because no markup is recognized within a \u003ccode\u003eCDATASection\u003c/code\u003e, character numeric references cannot be used as an escape mechanism when serializing. Therefore, action needs to be taken when serializing a \u003ccode\u003eCDATASection\u003c/code\u003e with a character encoding where some of the contained characters cannot be represented. Failure to do so would not produce well-formed XML. \u003c/p\u003e\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e One potential solution in the serialization process is to end the CDATA section before the character, output the character using a character reference or entity reference, and open a new CDATA section for any further characters in the text node. Note, however, that some code conversion libraries at the time of writing do not return an error or exception when a character is missing from the encoding, making the task of ensuring that data is not corrupted on serialization more difficult. \u003c/p\u003e\n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407\"\u003eDocument Object Model (DOM) Level 3 Core Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}