{
  "packageName": "org.w3c.dom",
  "simpleName": "Attr",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.w3c.dom.Node",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getName",
      "comment": "Returns the name of this attribute. If Node.localName is different from null, this attribute is a qualified name.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSpecified",
      "comment": "True if this attribute was explicitly given a value in the instance document, false otherwise. If the application changed the value of this attribute node (even if it ends up having the same value as the default value) then it is set to true. The implementation may handle attributes with default values from other schemas similarly but applications should use Document.normalizeDocument() to guarantee this information is up-to-date.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getValue",
      "comment": "On retrieval, the value of the attribute is returned as a string. Character and general entity references are replaced with their values. See also the method getAttribute on the Element interface. On setting, this creates a Text node with the unparsed contents of the string, i.e. any characters that an XML processor would recognize as markup are instead treated as literal text. See also the method Element.setAttribute(). Some specialized implementations, such as some [SVG 1.1] implementations, may do normalization automatically, even after mutation; in such case, the value on retrieval may differ from the value on setting.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setValue",
      "comment": "On retrieval, the value of the attribute is returned as a string. Character and general entity references are replaced with their values. See also the method getAttribute on the Element interface. On setting, this creates a Text node with the unparsed contents of the string, i.e. any characters that an XML processor would recognize as markup are instead treated as literal text. See also the method Element.setAttribute(). Some specialized implementations, such as some [SVG 1.1] implementations, may do normalization automatically, even after mutation; in such case, the value on retrieval may differ from the value on setting.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Element",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOwnerElement",
      "comment": "The Element node this attribute is attached to or null if this attribute is not in use.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.TypeInfo",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSchemaTypeInfo",
      "comment": "The type information associated with this attribute. While the type information contained in this attribute is guarantee to be correct after loading the document or invoking Document.normalizeDocument(), schemaTypeInfo may not be reliable if the node was moved.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isId",
      "comment": "Returns whether this attribute is known to be of type ID (i.e. to contain an identifier for its owner element) or not. When it is and its value is unique, the ownerElement of this attribute can be retrieved using the method Document.getElementById . The implementation could use several ways to determine if an attribute node is known to contain an identifier: If validation occurred using an XML Schema [XML Schema Part 1] while loading the document or while invoking Document.normalizeDocument(), the post-schema-validation infoset contributions (PSVI contributions) values are used to determine if this attribute is a schema-determined ID attribute using the schema-determined ID definition in [XPointer] . If validation occurred using a DTD while loading the document or while invoking Document.normalizeDocument(), the infoset [type definition] value is used to determine if this attribute is a DTD-determined ID attribute using the DTD-determined ID definition in [XPointer] . from the use of the methods Element.setIdAttribute(), Element.setIdAttributeNS(), or Element.setIdAttributeNode(), i.e. it is an user-determined ID attribute; Note: XPointer framework (see section 3.2 in [XPointer] ) consider the DOM user-determined ID attribute as being part of the XPointer externally-determined ID definition. using mechanisms that are outside the scope of this specification, it is then an externally-determined ID attribute. This includes using schema languages different from XML schema and DTD. If validation occurred while invoking Document.normalizeDocument(), all user-determined ID attributes are reset and all attribute nodes ID information are then reevaluated in accordance to the schema used. As a consequence, if the Attr.schemaTypeInfo attribute contains an ID type, isId will always return true.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.Attr",
  "comment": "The \n\u003ccode\u003eAttr\u003c/code\u003e interface represents an attribute in an \n\u003ccode\u003eElement\u003c/code\u003e object. Typically the allowable values for the attribute are defined in a schema associated with the document. \n\u003cp\u003e\u003ccode\u003eAttr\u003c/code\u003e objects inherit the \u003ccode\u003eNode\u003c/code\u003e interface, but since they are not actually child nodes of the element they describe, the DOM does not consider them part of the document tree. Thus, the \u003ccode\u003eNode\u003c/code\u003e attributes \u003ccode\u003eparentNode\u003c/code\u003e, \u003ccode\u003epreviousSibling\u003c/code\u003e, and \u003ccode\u003enextSibling\u003c/code\u003e have a \u003ccode\u003enull\u003c/code\u003e value for \u003ccode\u003eAttr\u003c/code\u003e objects. The DOM takes the view that attributes are properties of elements rather than having a separate identity from the elements they are associated with; this should make it more efficient to implement such features as default attributes associated with all elements of a given type. Furthermore, \u003ccode\u003eAttr\u003c/code\u003e nodes may not be immediate children of a \u003ccode\u003eDocumentFragment\u003c/code\u003e. However, they can be associated with \u003ccode\u003eElement\u003c/code\u003e nodes contained within a \u003ccode\u003eDocumentFragment\u003c/code\u003e. In short, users and implementors of the DOM need to be aware that \u003ccode\u003eAttr\u003c/code\u003e nodes have some things in common with other objects inheriting the \u003ccode\u003eNode\u003c/code\u003e interface, but they also are quite distinct. \u003c/p\u003e\n\u003cp\u003eThe attribute\u0027s effective value is determined as follows: if this attribute has been explicitly assigned any value, that value is the attribute\u0027s effective value; otherwise, if there is a declaration for this attribute, and that declaration includes a default value, then that default value is the attribute\u0027s effective value; otherwise, the attribute does not exist on this element in the structure model until it has been explicitly added. Note that the \u003ccode\u003eNode.nodeValue\u003c/code\u003e attribute on the \u003ccode\u003eAttr\u003c/code\u003e instance can also be used to retrieve the string version of the attribute\u0027s value(s). \u003c/p\u003e\n\u003cp\u003e If the attribute was not explicitly given a value in the instance document but has a default value provided by the schema associated with the document, an attribute node will be created with \u003ccode\u003especified\u003c/code\u003e set to \u003ccode\u003efalse\u003c/code\u003e. Removing attribute nodes for which a default value is defined in the schema generates a new attribute node with the default value and \u003ccode\u003especified\u003c/code\u003e set to \u003ccode\u003efalse\u003c/code\u003e. If validation occurred while invoking \u003ccode\u003eDocument.normalizeDocument()\u003c/code\u003e, attribute nodes with \u003ccode\u003especified\u003c/code\u003e equals to \u003ccode\u003efalse\u003c/code\u003e are recomputed according to the default attribute values provided by the schema. If no default value is associate with this attribute in the schema, the attribute node is discarded. \u003c/p\u003e\n\u003cp\u003eIn XML, where the value of an attribute can contain entity references, the child nodes of the \u003ccode\u003eAttr\u003c/code\u003e node may be either \u003ccode\u003eText\u003c/code\u003e or \u003ccode\u003eEntityReference\u003c/code\u003e nodes (when these are in use; see the description of \u003ccode\u003eEntityReference\u003c/code\u003e for discussion). \u003c/p\u003e\n\u003cp\u003eThe DOM Core represents all attribute values as simple strings, even if the DTD or schema associated with the document declares them of some specific type such as tokenized. \u003c/p\u003e\n\u003cp\u003eThe way attribute value normalization is performed by the DOM implementation depends on how much the implementation knows about the schema in use. Typically, the \u003ccode\u003evalue\u003c/code\u003e and \u003ccode\u003enodeValue\u003c/code\u003e attributes of an \u003ccode\u003eAttr\u003c/code\u003e node initially returns the normalized value given by the parser. It is also the case after \u003ccode\u003eDocument.normalizeDocument()\u003c/code\u003e is called (assuming the right options have been set). But this may not be the case after mutation, independently of whether the mutation is performed by setting the string value directly or by changing the \u003ccode\u003eAttr\u003c/code\u003e child nodes. In particular, this is true when \u003ca href\u003d\"http://www.w3.org/TR/2004/REC-xml-20040204#dt-charref\"\u003echaracter references\u003c/a\u003e are involved, given that they are not represented in the DOM and they impact attribute value normalization. On the other hand, if the implementation knows about the schema in use when the attribute value is changed, and it is of a different type than CDATA, it may normalize it again at that time. This is especially true of specialized DOM implementations, such as SVG DOM implementations, which store attribute values in an internal form different from a string. \u003c/p\u003e\n\u003cp\u003eThe following table gives some examples of the relations between the attribute value in the original document (parsed attribute), the value as exposed in the DOM, and the serialization of the value: \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption\u003e\n  Examples of the Original, Normalized and Serialized Values \n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003eExamples\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eParsed attribute value\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eInitial \u003ccode\u003eAttr.value\u003c/code\u003e\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eSerialized attribute value\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e Character reference\u003c/th\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e \u003cpre\u003e\"x\u0026amp;#178;\u003d5\"\u003c/pre\u003e \u003c/td\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e \u003cpre\u003e\"x²\u003d5\"\u003c/pre\u003e \u003c/td\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e \u003cpre\u003e\"x\u0026amp;#178;\u003d5\"\u003c/pre\u003e \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003eBuilt-in character entity\u003c/th\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e \u003cpre\u003e\"y\u0026amp;lt;6\"\u003c/pre\u003e \u003c/td\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e \u003cpre\u003e\"y\u0026lt;6\"\u003c/pre\u003e \u003c/td\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e \u003cpre\u003e\"y\u0026amp;lt;6\"\u003c/pre\u003e \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003eLiteral newline between\u003c/th\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e \u003cpre\u003e \"x\u003d5\u0026amp;#10;y\u003d6\"\u003c/pre\u003e \u003c/td\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e \u003cpre\u003e\"x\u003d5 y\u003d6\"\u003c/pre\u003e \u003c/td\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e \u003cpre\u003e\"x\u003d5\u0026amp;#10;y\u003d6\"\u003c/pre\u003e \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003eNormalized newline between\u003c/th\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e \u003cpre\u003e\"x\u003d5\n y\u003d6\"\u003c/pre\u003e \u003c/td\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e \u003cpre\u003e\"x\u003d5 y\u003d6\"\u003c/pre\u003e \u003c/td\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e \u003cpre\u003e\"x\u003d5 y\u003d6\"\u003c/pre\u003e \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003eEntity \u003ccode\u003ee\u003c/code\u003e with literal newline\u003c/th\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e \u003cpre\u003e \u0026lt;!ENTITY e \u0027...\u0026amp;#10;...\u0027\u0026gt; [...]\u0026gt; \"x\u003d5\u0026amp;e;y\u003d6\"\u003c/pre\u003e \u003c/td\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e\u003cem\u003eDependent on Implementation and Load Options\u003c/em\u003e\u003c/td\u003e \n   \u003ctd valign\u003d\"top\" rowspan\u003d\"1\" colspan\u003d\"1\"\u003e\u003cem\u003eDependent on Implementation and Load/Save Options\u003c/em\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407\"\u003eDocument Object Model (DOM) Level 3 Core Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}