{
  "packageName": "org.w3c.dom",
  "simpleName": "Node",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ELEMENT_NODE",
      "comment": "The node is an Element.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.ELEMENT_NODE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ATTRIBUTE_NODE",
      "comment": "The node is an Attr.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.ATTRIBUTE_NODE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "TEXT_NODE",
      "comment": "The node is a Text node.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.TEXT_NODE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CDATA_SECTION_NODE",
      "comment": "The node is a CDATASection.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.CDATA_SECTION_NODE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ENTITY_REFERENCE_NODE",
      "comment": "The node is an EntityReference.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.ENTITY_REFERENCE_NODE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ENTITY_NODE",
      "comment": "The node is an Entity.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.ENTITY_NODE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "PROCESSING_INSTRUCTION_NODE",
      "comment": "The node is a ProcessingInstruction.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "COMMENT_NODE",
      "comment": "The node is a Comment.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.COMMENT_NODE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DOCUMENT_NODE",
      "comment": "The node is a Document.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.DOCUMENT_NODE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DOCUMENT_TYPE_NODE",
      "comment": "The node is a DocumentType.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.DOCUMENT_TYPE_NODE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DOCUMENT_FRAGMENT_NODE",
      "comment": "The node is a DocumentFragment.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.DOCUMENT_FRAGMENT_NODE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "NOTATION_NODE",
      "comment": "The node is a Notation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.NOTATION_NODE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DOCUMENT_POSITION_DISCONNECTED",
      "comment": "The two nodes are disconnected. Order between disconnected nodes is always implementation-specific.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.DOCUMENT_POSITION_DISCONNECTED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DOCUMENT_POSITION_PRECEDING",
      "comment": "The second node precedes the reference node.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.DOCUMENT_POSITION_PRECEDING\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DOCUMENT_POSITION_FOLLOWING",
      "comment": "The node follows the reference node.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.DOCUMENT_POSITION_FOLLOWING\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DOCUMENT_POSITION_CONTAINS",
      "comment": "The node contains the reference node. A node which contains is always preceding, too.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.DOCUMENT_POSITION_CONTAINS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DOCUMENT_POSITION_CONTAINED_BY",
      "comment": "The node is contained by the reference node. A node which is contained is always following, too.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.DOCUMENT_POSITION_CONTAINED_BY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
      "comment": "The determination of preceding versus following is implementation-specific.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNodeName",
      "comment": "The name of this node, depending on its type; see the table above.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNodeValue",
      "comment": "The value of this node, depending on its type; see the table above. When it is defined to be null, setting it has no effect, including if the node is read-only.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - DOMSTRING_SIZE_ERR: Raised when it would return more characters than fit in a \n\u003ccode\u003eDOMString\u003c/code\u003e variable on the implementation platform."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nodeValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNodeValue",
      "comment": "The value of this node, depending on its type; see the table above. When it is defined to be null, setting it has no effect, including if the node is read-only.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly and if it is not defined to be \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNodeType",
      "comment": "A code representing the type of the underlying object, as defined above.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getParentNode",
      "comment": "The parent of this node. All nodes, except Attr, Document, DocumentFragment, Entity, and Notation may have a parent. However, if a node has just been created and not yet added to the tree, or if it has been removed from the tree, this is null.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.NodeList",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChildNodes",
      "comment": "A NodeList that contains all children of this node. If there are no children, this is a NodeList containing no nodes.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFirstChild",
      "comment": "The first child of this node. If there is no such node, this returns null.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLastChild",
      "comment": "The last child of this node. If there is no such node, this returns null.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPreviousSibling",
      "comment": "The node immediately preceding this node. If there is no such node, this returns null.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNextSibling",
      "comment": "The node immediately following this node. If there is no such node, this returns null.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.NamedNodeMap",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributes",
      "comment": "A NamedNodeMap containing the attributes of this node (if it is an Element) or null otherwise.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Document",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOwnerDocument",
      "comment": "The Document object associated with this node. This is also the Document object used to create new nodes. When this node is a Document or a DocumentType which is not used with any Document yet, this is null.",
      "tagMap": {
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "newChild"
          }
        },
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "refChild"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "insertBefore",
      "comment": "Inserts the node newChild before the existing child node refChild. If refChild is null, insert newChild at the end of the list of children. If newChild is a DocumentFragment object, all of its children are inserted, in the same order, before refChild. If the newChild is already in the tree, it is first removed. Note: Inserting a node before itself is implementation dependent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewChild\u003c/code\u003e - The node to insert.",
          "\u003ccode\u003erefChild\u003c/code\u003e - The reference node, i.e., the node before which the new node must be inserted."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not allow children of the type of the \n\u003ccode\u003enewChild\u003c/code\u003e node, or if the node to insert is one of this node\u0027s ancestors or this node itself, or if this node is of type \n\u003ccode\u003eDocument\u003c/code\u003e and the DOM application attempts to insert a second \n\u003ccode\u003eDocumentType\u003c/code\u003e or \n\u003ccode\u003eElement\u003c/code\u003e node. \n\u003cbr\u003eWRONG_DOCUMENT_ERR: Raised if \n\u003ccode\u003enewChild\u003c/code\u003e was created from a different document than the one that created this node. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly or if the parent of the node being inserted is readonly. \n\u003cbr\u003eNOT_FOUND_ERR: Raised if \n\u003ccode\u003erefChild\u003c/code\u003e is not a child of this node. \n\u003cbr\u003eNOT_SUPPORTED_ERR: if this node is of type \n\u003ccode\u003eDocument\u003c/code\u003e, this exception might be raised if the DOM implementation doesn\u0027t support the insertion of a \n\u003ccode\u003eDocumentType\u003c/code\u003e or \n\u003ccode\u003eElement\u003c/code\u003e node."
        ],
        "return": [
          "The node being inserted."
        ],
        "since": [
          "1.4, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "newChild"
          }
        },
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "oldChild"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "replaceChild",
      "comment": "Replaces the child node oldChild with newChild in the list of children, and returns the oldChild node. If newChild is a DocumentFragment object, oldChild is replaced by all of the DocumentFragment children, which are inserted in the same order. If the newChild is already in the tree, it is first removed. Note: Replacing a node with itself is implementation dependent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewChild\u003c/code\u003e - The new node to put in the child list.",
          "\u003ccode\u003eoldChild\u003c/code\u003e - The node being replaced in the list."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not allow children of the type of the \n\u003ccode\u003enewChild\u003c/code\u003e node, or if the node to put in is one of this node\u0027s ancestors or this node itself, or if this node is of type \n\u003ccode\u003eDocument\u003c/code\u003e and the result of the replacement operation would add a second \n\u003ccode\u003eDocumentType\u003c/code\u003e or \n\u003ccode\u003eElement\u003c/code\u003e on the \n\u003ccode\u003eDocument\u003c/code\u003e node. \n\u003cbr\u003eWRONG_DOCUMENT_ERR: Raised if \n\u003ccode\u003enewChild\u003c/code\u003e was created from a different document than the one that created this node. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this node or the parent of the new node is readonly. \n\u003cbr\u003eNOT_FOUND_ERR: Raised if \n\u003ccode\u003eoldChild\u003c/code\u003e is not a child of this node. \n\u003cbr\u003eNOT_SUPPORTED_ERR: if this node is of type \n\u003ccode\u003eDocument\u003c/code\u003e, this exception might be raised if the DOM implementation doesn\u0027t support the replacement of the \n\u003ccode\u003eDocumentType\u003c/code\u003e child or \n\u003ccode\u003eElement\u003c/code\u003e child."
        ],
        "return": [
          "The node replaced."
        ],
        "since": [
          "1.4, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "oldChild"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeChild",
      "comment": "Removes the child node indicated by oldChild from the list of children, and returns it.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoldChild\u003c/code\u003e - The node being removed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. \n\u003cbr\u003eNOT_FOUND_ERR: Raised if \n\u003ccode\u003eoldChild\u003c/code\u003e is not a child of this node. \n\u003cbr\u003eNOT_SUPPORTED_ERR: if this node is of type \n\u003ccode\u003eDocument\u003c/code\u003e, this exception might be raised if the DOM implementation doesn\u0027t support the removal of the \n\u003ccode\u003eDocumentType\u003c/code\u003e child or the \n\u003ccode\u003eElement\u003c/code\u003e child."
        ],
        "return": [
          "The node removed."
        ],
        "since": [
          "1.4, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "newChild"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "appendChild",
      "comment": "Adds the node newChild to the end of the list of children of this node. If the newChild is already in the tree, it is first removed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewChild\u003c/code\u003e - The node to add.If it is a \n\u003ccode\u003eDocumentFragment\u003c/code\u003e object, the entire contents of the document fragment are moved into the child list of this node"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not allow children of the type of the \n\u003ccode\u003enewChild\u003c/code\u003e node, or if the node to append is one of this node\u0027s ancestors or this node itself, or if this node is of type \n\u003ccode\u003eDocument\u003c/code\u003e and the DOM application attempts to append a second \n\u003ccode\u003eDocumentType\u003c/code\u003e or \n\u003ccode\u003eElement\u003c/code\u003e node. \n\u003cbr\u003eWRONG_DOCUMENT_ERR: Raised if \n\u003ccode\u003enewChild\u003c/code\u003e was created from a different document than the one that created this node. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly or if the previous parent of the node being inserted is readonly. \n\u003cbr\u003eNOT_SUPPORTED_ERR: if the \n\u003ccode\u003enewChild\u003c/code\u003e node is a child of the \n\u003ccode\u003eDocument\u003c/code\u003e node, this exception might be raised if the DOM implementation doesn\u0027t support the removal of the \n\u003ccode\u003eDocumentType\u003c/code\u003e child or \n\u003ccode\u003eElement\u003c/code\u003e child."
        ],
        "return": [
          "The node added."
        ],
        "since": [
          "1.4, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasChildNodes",
      "comment": "Returns whether this node has any children.",
      "tagMap": {
        "return": [
          "Returns \n\u003ccode\u003etrue\u003c/code\u003e if this node has any children, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "deep"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "cloneNode",
      "comment": "Returns a duplicate of this node, i.e., serves as a generic copy constructor for nodes. The duplicate node has no parent ( parentNode is null) and no user data. User data associated to the imported node is not carried over. However, if any UserDataHandlers has been specified along with the associated data these handlers will be called with the appropriate parameters before this method returns. Cloning an Element copies all attributes and their values, including those generated by the XML processor to represent defaulted attributes, but this method does not copy any children it contains unless it is a deep clone. This includes text contained in an the Element since the text is contained in a child Text node. Cloning an Attr directly, as opposed to be cloned as part of an Element cloning operation, returns a specified attribute (specified is true). Cloning an Attr always clones its children, since they represent its value, no matter whether this is a deep clone or not. Cloning an EntityReference automatically constructs its subtree if a corresponding Entity is available, no matter whether this is a deep clone or not. Cloning any other type of node simply returns a copy of this node. Note that cloning an immutable subtree results in a mutable copy, but the children of an EntityReference clone are readonly . In addition, clones of unspecified Attr nodes are specified. And, cloning Document, DocumentType, Entity, and Notation nodes is implementation dependent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edeep\u003c/code\u003e - If \n\u003ccode\u003etrue\u003c/code\u003e, recursively clone the subtree under the specified node; if \n\u003ccode\u003efalse\u003c/code\u003e, clone only the node itself (and its attributes, if it is an \n\u003ccode\u003eElement\u003c/code\u003e)."
        ],
        "return": [
          "The duplicate node."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "normalize",
      "comment": "Puts all Text nodes in the full depth of the sub-tree underneath this Node, including attribute nodes, into a \"normal\" form where only structure (e.g., elements, comments, processing instructions, CDATA sections, and entity references) separates Text nodes, i.e., there are neither adjacent Text nodes nor empty Text nodes. This can be used to ensure that the DOM view of a document is the same as if it were saved and re-loaded, and is useful when operations (such as XPointer [XPointer] lookups) that depend on a particular document tree structure are to be used. If the parameter \"normalize-characters\" of the DOMConfiguration object attached to the Node.ownerDocument is true, this method will also fully normalize the characters of the Text nodes. Note: In cases where the document contains CDATASections, the normalize operation alone may not be sufficient, since XPointers do not differentiate between Text nodes and CDATASection nodes.",
      "tagMap": {
        "since": [
          "1.4, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "feature"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "version"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSupported",
      "comment": "Tests whether the DOM implementation implements a specific feature and that feature is supported by this node, as specified in .",
      "tagMap": {
        "param": [
          "\u003ccode\u003efeature\u003c/code\u003e - The name of the feature to test.",
          "\u003ccode\u003eversion\u003c/code\u003e - This is the version number of the feature to test."
        ],
        "return": [
          "Returns \n\u003ccode\u003etrue\u003c/code\u003e if the specified feature is supported on this node, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNamespaceURI",
      "comment": "The namespace URI of this node, or null if it is unspecified (see ). This is not a computed value that is the result of a namespace lookup based on an examination of the namespace declarations in scope. It is merely the namespace URI given at creation time. For nodes of any type other than ELEMENT_NODE and ATTRIBUTE_NODE and nodes created with a DOM Level 1 method, such as Document.createElement(), this is always null. Note: Per the Namespaces in XML Specification [XML Namespaces] an attribute does not inherit its namespace from the element it is attached to. If an attribute is not explicitly given a namespace, it simply has no namespace.",
      "tagMap": {
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPrefix",
      "comment": "The namespace prefix of this node, or null if it is unspecified. When it is defined to be null, setting it has no effect, including if the node is read-only. Note that setting this attribute, when permitted, changes the nodeName attribute, which holds the qualified name, as well as the tagName and name attributes of the Element and Attr interfaces, when applicable. Setting the prefix to null makes it unspecified, setting it to an empty string is implementation dependent. Note also that changing the prefix of an attribute that is known to have a default value, does not make a new attribute with the default value and the original prefix appear, since the namespaceURI and localName do not change. For nodes of any type other than ELEMENT_NODE and ATTRIBUTE_NODE and nodes created with a DOM Level 1 method, such as createElement from the Document interface, this is always null.",
      "tagMap": {
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPrefix",
      "comment": "The namespace prefix of this node, or null if it is unspecified. When it is defined to be null, setting it has no effect, including if the node is read-only. Note that setting this attribute, when permitted, changes the nodeName attribute, which holds the qualified name, as well as the tagName and name attributes of the Element and Attr interfaces, when applicable. Setting the prefix to null makes it unspecified, setting it to an empty string is implementation dependent. Note also that changing the prefix of an attribute that is known to have a default value, does not make a new attribute with the default value and the original prefix appear, since the namespaceURI and localName do not change. For nodes of any type other than ELEMENT_NODE and ATTRIBUTE_NODE and nodes created with a DOM Level 1 method, such as createElement from the Document interface, this is always null.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - INVALID_CHARACTER_ERR: Raised if the specified prefix contains an illegal character according to the XML version in use specified in the \n\u003ccode\u003eDocument.xmlVersion\u003c/code\u003e attribute. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. \n\u003cbr\u003eNAMESPACE_ERR: Raised if the specified \n\u003ccode\u003eprefix\u003c/code\u003e is malformed per the Namespaces in XML specification, if the \n\u003ccode\u003enamespaceURI\u003c/code\u003e of this node is \n\u003ccode\u003enull\u003c/code\u003e, if the specified prefix is \"xml\" and the \n\u003ccode\u003enamespaceURI\u003c/code\u003e of this node is different from \"\n\u003ca href\u003d\"http://www.w3.org/XML/1998/namespace\"\u003e http://www.w3.org/XML/1998/namespace\u003c/a\u003e\", if this node is an attribute and the specified prefix is \"xmlns\" and the \n\u003ccode\u003enamespaceURI\u003c/code\u003e of this node is different from \"\n\u003ca href\u003d\"http://www.w3.org/2000/xmlns/\"\u003ehttp://www.w3.org/2000/xmlns/\u003c/a\u003e\", or if this node is an attribute and the \n\u003ccode\u003equalifiedName\u003c/code\u003e of this node is \"xmlns\" [\n\u003ca href\u003d\"http://www.w3.org/TR/1999/REC-xml-names-19990114/\"\u003eXML Namespaces\u003c/a\u003e] ."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocalName",
      "comment": "Returns the local part of the qualified name of this node. For nodes of any type other than ELEMENT_NODE and ATTRIBUTE_NODE and nodes created with a DOM Level 1 method, such as Document.createElement(), this is always null.",
      "tagMap": {
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasAttributes",
      "comment": "Returns whether this node (if it is an element) has any attributes.",
      "tagMap": {
        "return": [
          "Returns \n\u003ccode\u003etrue\u003c/code\u003e if this node has any attributes, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBaseURI",
      "comment": "The absolute base URI of this node or null if the implementation wasn\u0027t able to obtain an absolute URI. This value is computed as described in . However, when the Document supports the feature \"HTML\" [DOM Level 2 HTML] , the base URI is computed using first the value of the href attribute of the HTML BASE element if any, and the value of the documentURI attribute from the Document interface otherwise.",
      "tagMap": {
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "compareDocumentPosition",
      "comment": "Compares the reference node, i.e. the node on which this method is being called, with a node, i.e. the one passed as a parameter, with regard to their position in the document and according to the document order.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - The node to compare against the reference node."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NOT_SUPPORTED_ERR: when the compared nodes are from different DOM implementations that do not coordinate to return consistent implementation-specific results."
        ],
        "return": [
          "Returns how the node is positioned relatively to the reference node."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTextContent",
      "comment": "This attribute returns the text content of this node and its descendants. When it is defined to be null, setting it has no effect. On setting, any possible children this node may have are removed and, if it the new string is not empty or null, replaced by a single Text node containing the string this attribute is set to. On getting, no serialization is performed, the returned string does not contain any markup. No whitespace normalization is performed and the returned string does not contain the white spaces in element content (see the attribute Text.isElementContentWhitespace). Similarly, on setting, no parsing is performed either, the input string is taken as pure textual content. The string returned is made of the text content of this node depending on its type, as defined below: Node/Content table Node type Content ELEMENT_NODE, ATTRIBUTE_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE, DOCUMENT_FRAGMENT_NODE concatenation of the textContent attribute value of every child node, excluding COMMENT_NODE and PROCESSING_INSTRUCTION_NODE nodes. This is the empty string if the node has no children. TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE nodeValue DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE null",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - DOMSTRING_SIZE_ERR: Raised when it would return more characters than fit in a \n\u003ccode\u003eDOMString\u003c/code\u003e variable on the implementation platform."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "textContent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTextContent",
      "comment": "This attribute returns the text content of this node and its descendants. When it is defined to be null, setting it has no effect. On setting, any possible children this node may have are removed and, if it the new string is not empty or null, replaced by a single Text node containing the string this attribute is set to. On getting, no serialization is performed, the returned string does not contain any markup. No whitespace normalization is performed and the returned string does not contain the white spaces in element content (see the attribute Text.isElementContentWhitespace). Similarly, on setting, no parsing is performed either, the input string is taken as pure textual content. The string returned is made of the text content of this node depending on its type, as defined below: Node/Content table Node type Content ELEMENT_NODE, ATTRIBUTE_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE, DOCUMENT_FRAGMENT_NODE concatenation of the textContent attribute value of every child node, excluding COMMENT_NODE and PROCESSING_INSTRUCTION_NODE nodes. This is the empty string if the node has no children. TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE nodeValue DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE null",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSameNode",
      "comment": "Returns whether this node is the same node as the given one. This method provides a way to determine whether two Node references returned by the implementation reference the same object. When two Node references are references to the same object, even if through a proxy, the references may be used completely interchangeably, such that all attributes have the same values and calling the same DOM method on either reference always has exactly the same effect.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - The node to test against."
        ],
        "return": [
          "Returns \n\u003ccode\u003etrue\u003c/code\u003e if the nodes are the same, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "namespaceURI"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lookupPrefix",
      "comment": "Look up the prefix associated to the given namespace URI, starting from this node. The default namespace declarations are ignored by this method. See for details on the algorithm used by this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - The namespace URI to look for."
        ],
        "return": [
          "Returns an associated namespace prefix if found or \n\u003ccode\u003enull\u003c/code\u003e if none is found. If more than one prefix are associated to the namespace prefix, the returned namespace prefix is implementation dependent."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "namespaceURI"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isDefaultNamespace",
      "comment": "This method checks if the specified namespaceURI is the default namespace or not.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - The namespace URI to look for."
        ],
        "return": [
          "Returns \n\u003ccode\u003etrue\u003c/code\u003e if the specified \n\u003ccode\u003enamespaceURI\u003c/code\u003e is the default namespace, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lookupNamespaceURI",
      "comment": "Look up the namespace URI associated to the given prefix, starting from this node. See for details on the algorithm used by this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - The prefix to look for. If this parameter is \n\u003ccode\u003enull\u003c/code\u003e, the method will return the default namespace URI if any."
        ],
        "return": [
          "Returns the associated namespace URI or \n\u003ccode\u003enull\u003c/code\u003e if none is found."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "arg"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEqualNode",
      "comment": "Tests whether two nodes are equal. This method tests for equality of nodes, not sameness (i.e., whether the two nodes are references to the same object) which can be tested with Node.isSameNode(). All nodes that are the same will also be equal, though the reverse may not be true. Two nodes are equal if and only if the following conditions are satisfied: The two nodes are of the same type. The following string attributes are equal: nodeName, localName, namespaceURI, prefix, nodeValue . This is: they are both null, or they have the same length and are character for character identical. The attributes NamedNodeMaps are equal. This is: they are both null, or they have the same length and for each node that exists in one map there is a node that exists in the other map and is equal, although not necessarily at the same index. The childNodes NodeLists are equal. This is: they are both null, or they have the same length and contain equal nodes at the same index. Note that normalization can affect equality; to avoid this, nodes should be normalized before being compared. For two DocumentType nodes to be equal, the following conditions must also be satisfied: The following string attributes are equal: publicId, systemId, internalSubset. The entities NamedNodeMaps are equal. The notations NamedNodeMaps are equal. On the other hand, the following do not affect equality: the ownerDocument, baseURI, and parentNode attributes, the specified attribute for Attr nodes, the schemaTypeInfo attribute for Attr and Element nodes, the Text.isElementContentWhitespace attribute for Text nodes, as well as any user data or event listeners registered on the nodes. Note: As a general rule, anything not mentioned in the description above is not significant in consideration of equality checking. Note that future versions of this specification may take into account more attributes and implementations conform to this specification are expected to be updated accordingly.",
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - The node to compare equality with."
        ],
        "return": [
          "Returns \n\u003ccode\u003etrue\u003c/code\u003e if the nodes are equal, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "feature"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "version"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFeature",
      "comment": "This method returns a specialized object which implements the specialized APIs of the specified feature and version, as specified in . The specialized object may also be obtained by using binding-specific casting methods but is not necessarily expected to, as discussed in . This method also allow the implementation to provide specialized objects which do not support the Node interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efeature\u003c/code\u003e - The name of the feature requested. Note that any plus sign \"+\" prepended to the name of the feature will be ignored since it is not significant in the context of this method.",
          "\u003ccode\u003eversion\u003c/code\u003e - This is the version number of the feature to test."
        ],
        "return": [
          "Returns an object which implements the specialized APIs of the specified feature and version, if any, or \n\u003ccode\u003enull\u003c/code\u003e if there is no object which implements interfaces associated with that feature. If the \n\u003ccode\u003eDOMObject\u003c/code\u003e returned by this method implements the \n\u003ccode\u003eNode\u003c/code\u003e interface, it must delegate to the primary core \n\u003ccode\u003eNode\u003c/code\u003e and not return results inconsistent with the primary core \n\u003ccode\u003eNode\u003c/code\u003e such as attributes, childNodes, etc."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "data"
          }
        },
        {
          "type": {
            "name": "org.w3c.dom.UserDataHandler",
            "type": "Class"
          },
          "field": {
            "name": "handler"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setUserData",
      "comment": "Associate an object to a key on this node. The object can later be retrieved from this node by calling getUserData with the same key.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - The key to associate the object to.",
          "\u003ccode\u003edata\u003c/code\u003e - The object to associate to the given key, or \n\u003ccode\u003enull\u003c/code\u003e to remove any existing association to that key.",
          "\u003ccode\u003ehandler\u003c/code\u003e - The handler to associate to that key, or \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "Returns the \n\u003ccode\u003eDOMUserData\u003c/code\u003e previously associated to the given key on this node, or \n\u003ccode\u003enull\u003c/code\u003e if there was none."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getUserData",
      "comment": "Retrieves the object associated to a key on a this node. The object must first have been set to this node by calling setUserData with the same key.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - The key the object is associated to."
        ],
        "return": [
          "Returns the \n\u003ccode\u003eDOMUserData\u003c/code\u003e associated to the given key on this node, or \n\u003ccode\u003enull\u003c/code\u003e if there was none."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.Node",
  "comment": "The \n\u003ccode\u003eNode\u003c/code\u003e interface is the primary datatype for the entire Document Object Model. It represents a single node in the document tree. While all objects implementing the \n\u003ccode\u003eNode\u003c/code\u003e interface expose methods for dealing with children, not all objects implementing the \n\u003ccode\u003eNode\u003c/code\u003e interface may have children. For example, \n\u003ccode\u003eText\u003c/code\u003e nodes may not have children, and adding children to such nodes results in a \n\u003ccode\u003eDOMException\u003c/code\u003e being raised. \n\u003cp\u003eThe attributes \u003ccode\u003enodeName\u003c/code\u003e, \u003ccode\u003enodeValue\u003c/code\u003e and \u003ccode\u003eattributes\u003c/code\u003e are included as a mechanism to get at node information without casting down to the specific derived interface. In cases where there is no obvious mapping of these attributes for a specific \u003ccode\u003enodeType\u003c/code\u003e (e.g., \u003ccode\u003enodeValue\u003c/code\u003e for an \u003ccode\u003eElement\u003c/code\u003e or \u003ccode\u003eattributes\u003c/code\u003e for a \u003ccode\u003eComment\u003c/code\u003e ), this returns \u003ccode\u003enull\u003c/code\u003e. Note that the specialized interfaces may contain additional and more convenient mechanisms to get and set the relevant information. \u003c/p\u003e\n\u003cp\u003eThe values of \u003ccode\u003enodeName\u003c/code\u003e, \u003ccode\u003enodeValue\u003c/code\u003e, and \u003ccode\u003eattributes\u003c/code\u003e vary according to the node type as follows: \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  Interface table\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003eInterface\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003enodeName\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003enodeValue\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eattributes\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e \u003ccode\u003eAttr\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003esame as \u003ccode\u003eAttr.name\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003esame as \u003ccode\u003eAttr.value\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eCDATASection\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003e \u003ccode\u003e\"#cdata-section\"\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003esame as \u003ccode\u003eCharacterData.data\u003c/code\u003e, the content of the CDATA Section\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eComment\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003e \u003ccode\u003e\"#comment\"\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003esame as \u003ccode\u003eCharacterData.data\u003c/code\u003e, the content of the comment\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eDocument\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003e \u003ccode\u003e\"#document\"\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e \u003ccode\u003eDocumentFragment\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003e\u003ccode\u003e\"#document-fragment\"\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003e \u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eDocumentType\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003esame as \u003ccode\u003eDocumentType.name\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e \u003ccode\u003eElement\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003esame as \u003ccode\u003eElement.tagName\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003e \u003ccode\u003eNamedNodeMap\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eentity name\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003e \u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eEntityReference\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003ename of entity referenced\u003c/td\u003e \n   \u003ctd\u003e \u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eNotation\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003enotation name\u003c/td\u003e \n   \u003ctd\u003e \u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eProcessingInstruction\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003esame as \u003ccode\u003eProcessingInstruction.target\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003esame as \u003ccode\u003eProcessingInstruction.data\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003eText\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003e \u003ccode\u003e\"#text\"\u003c/code\u003e\u003c/td\u003e \n   \u003ctd\u003esame as \u003ccode\u003eCharacterData.data\u003c/code\u003e, the content of the text node\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407\"\u003eDocument Object Model (DOM) Level 3 Core Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {}
}