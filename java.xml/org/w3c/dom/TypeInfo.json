{
  "packageName": "org.w3c.dom",
  "simpleName": "TypeInfo",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DERIVATION_RESTRICTION",
      "comment": "If the document\u0027s schema is an XML Schema [XML Schema Part 1] , this constant represents the derivation by restriction if complex types are involved, or a restriction if simple types are involved. The reference type definition is derived by restriction from the other type definition if the other type definition is the same as the reference type definition, or if the other type definition can be reached recursively following the {base type definition} property from the reference type definition, and all the derivation methods involved are restriction.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.TypeInfo.DERIVATION_RESTRICTION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DERIVATION_EXTENSION",
      "comment": "If the document\u0027s schema is an XML Schema [XML Schema Part 1] , this constant represents the derivation by extension. The reference type definition is derived by extension from the other type definition if the other type definition can be reached recursively following the {base type definition} property from the reference type definition, and at least one of the derivation methods involved is an extension.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.TypeInfo.DERIVATION_EXTENSION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DERIVATION_UNION",
      "comment": "If the document\u0027s schema is an XML Schema [XML Schema Part 1] , this constant represents the union if simple types are involved. The reference type definition is derived by union from the other type definition if there exists two type definitions T1 and T2 such as the reference type definition is derived from T1 by DERIVATION_RESTRICTION or DERIVATION_EXTENSION, T2 is derived from the other type definition by DERIVATION_RESTRICTION, T1 has {variety} union, and one of the {member type definitions} is T2. Note that T1 could be the same as the reference type definition, and T2 could be the same as the other type definition.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.TypeInfo.DERIVATION_UNION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "DERIVATION_LIST",
      "comment": "If the document\u0027s schema is an XML Schema [XML Schema Part 1] , this constant represents the list. The reference type definition is derived by list from the other type definition if there exists two type definitions T1 and T2 such as the reference type definition is derived from T1 by DERIVATION_RESTRICTION or DERIVATION_EXTENSION, T2 is derived from the other type definition by DERIVATION_RESTRICTION, T1 has {variety} list, and T2 is the {item type definition}. Note that T1 could be the same as the reference type definition, and T2 could be the same as the other type definition.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.TypeInfo.DERIVATION_LIST\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTypeName",
      "comment": "The name of a type declared for the associated element or attribute, or null if unknown.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTypeNamespace",
      "comment": "The namespace of the type declared for the associated element or attribute or null if the element does not have declaration or if no namespace information is available.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "typeNamespaceArg"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "typeNameArg"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "derivationMethod"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isDerivedFrom",
      "comment": "This method returns if there is a derivation between the reference type definition, i.e. the TypeInfo on which the method is being called, and the other type definition, i.e. the one passed as parameters.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etypeNamespaceArg\u003c/code\u003e - the namespace of the other type definition.",
          "\u003ccode\u003etypeNameArg\u003c/code\u003e - the name of the other type definition.",
          "\u003ccode\u003ederivationMethod\u003c/code\u003e - the type of derivation and conditions applied between two types, as described in the list of constants provided in this interface."
        ],
        "return": [
          "If the document\u0027s schema is a DTD or no schema is associated with the document, this method will always return \n\u003ccode\u003efalse\u003c/code\u003e . If the document\u0027s schema is an XML Schema, the method will return \n\u003ccode\u003etrue\u003c/code\u003e if the reference type definition is derived from the other type definition according to the derivation parameter. If the value of the parameter is \n\u003ccode\u003e0\u003c/code\u003e (no bit is set to \n\u003ccode\u003e1\u003c/code\u003e for the \n\u003ccode\u003ederivationMethod\u003c/code\u003e parameter), the method will return \n\u003ccode\u003etrue\u003c/code\u003e if the other type definition can be reached by recursing any combination of {base type definition}, {item type definition}, or {member type definitions} from the reference type definition."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.TypeInfo",
  "comment": "The \n\u003ccode\u003eTypeInfo\u003c/code\u003e interface represents a type referenced from \n\u003ccode\u003eElement\u003c/code\u003e or \n\u003ccode\u003eAttr\u003c/code\u003e nodes, specified in the schemas associated with the document. The type is a pair of a namespace URI and name properties, and depends on the document\u0027s schema. \n\u003cp\u003e If the document\u0027s schema is an XML DTD [\u003ca href\u003d\"http://www.w3.org/TR/2004/REC-xml-20040204\"\u003eXML 1.0\u003c/a\u003e], the values are computed as follows: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e If this type is referenced from an \u003ccode\u003eAttr\u003c/code\u003e node, \u003ccode\u003etypeNamespace\u003c/code\u003e is \u003ccode\u003e\"http://www.w3.org/TR/REC-xml\"\u003c/code\u003e and \u003ccode\u003etypeName\u003c/code\u003e represents the \u003cb\u003e[attribute type]\u003c/b\u003e property in the [\u003ca href\u003d\"http://www.w3.org/TR/2004/REC-xml-infoset-20040204/\"\u003eXML Information Set\u003c/a\u003e] . If there is no declaration for the attribute, \u003ccode\u003etypeNamespace\u003c/code\u003e and \u003ccode\u003etypeName\u003c/code\u003e are \u003ccode\u003enull\u003c/code\u003e. \u003c/li\u003e \n \u003cli\u003e If this type is referenced from an \u003ccode\u003eElement\u003c/code\u003e node, \u003ccode\u003etypeNamespace\u003c/code\u003e and \u003ccode\u003etypeName\u003c/code\u003e are \u003ccode\u003enull\u003c/code\u003e. \u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e If the document\u0027s schema is an XML Schema [\u003ca href\u003d\"http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/\"\u003eXML Schema Part 1\u003c/a\u003e] , the values are computed as follows using the post-schema-validation infoset contributions (also called PSVI contributions): \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e If the \u003cb\u003e[validity]\u003c/b\u003e property exists AND is \u003cem\u003e\"invalid\"\u003c/em\u003e or \u003cem\u003e\"notKnown\"\u003c/em\u003e: the {target namespace} and {name} properties of the declared type if available, otherwise \u003ccode\u003enull\u003c/code\u003e. \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e At the time of writing, the XML Schema specification does not require exposing the declared type. Thus, DOM implementations might choose not to provide type information if validity is not valid. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e If the \u003cb\u003e[validity]\u003c/b\u003e property exists and is \u003cem\u003e\"valid\"\u003c/em\u003e: \n  \u003col\u003e \n   \u003cli\u003e If \u003cb\u003e[member type definition]\u003c/b\u003e exists: \n    \u003col\u003e \n     \u003cli\u003eIf {name} is not absent, then expose {name} and {target namespace} properties of the \u003cb\u003e[member type definition]\u003c/b\u003e property; \u003c/li\u003e \n     \u003cli\u003eOtherwise, expose the namespace and local name of the corresponding anonymous type name. \u003c/li\u003e \n    \u003c/ol\u003e \u003c/li\u003e \n   \u003cli\u003e If the \u003cb\u003e[type definition]\u003c/b\u003e property exists: \n    \u003col\u003e \n     \u003cli\u003eIf {name} is not absent, then expose {name} and {target namespace} properties of the \u003cb\u003e[type definition]\u003c/b\u003e property; \u003c/li\u003e \n     \u003cli\u003eOtherwise, expose the namespace and local name of the corresponding anonymous type name. \u003c/li\u003e \n    \u003c/ol\u003e \u003c/li\u003e \n   \u003cli\u003e If the \u003cb\u003e[member type definition anonymous]\u003c/b\u003e exists: \n    \u003col\u003e \n     \u003cli\u003eIf it is false, then expose \u003cb\u003e[member type definition name]\u003c/b\u003e and \u003cb\u003e[member type definition namespace]\u003c/b\u003e properties; \u003c/li\u003e \n     \u003cli\u003eOtherwise, expose the namespace and local name of the corresponding anonymous type name. \u003c/li\u003e \n    \u003c/ol\u003e \u003c/li\u003e \n   \u003cli\u003e If the \u003cb\u003e[type definition anonymous]\u003c/b\u003e exists: \n    \u003col\u003e \n     \u003cli\u003eIf it is false, then expose \u003cb\u003e[type definition name]\u003c/b\u003e and \u003cb\u003e[type definition namespace]\u003c/b\u003e properties; \u003c/li\u003e \n     \u003cli\u003eOtherwise, expose the namespace and local name of the corresponding anonymous type name. \u003c/li\u003e \n    \u003c/ol\u003e \u003c/li\u003e \n  \u003c/ol\u003e \u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e Other schema languages are outside the scope of the W3C and therefore should define how to represent their type systems using \u003ccode\u003eTypeInfo\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407\"\u003eDocument Object Model (DOM) Level 3 Core Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5, DOM Level 3"
    ]
  }
}