{
  "packageName": "org.w3c.dom.ls",
  "simpleName": "LSSerializerFilter",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.w3c.dom.traversal.NodeFilter",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWhatToShow",
      "comment": "Tells the LSSerializer what types of nodes to show to the filter. If a node is not shown to the filter using this attribute, it is automatically serialized. See NodeFilter for definition of the constants. The constants SHOW_DOCUMENT , SHOW_DOCUMENT_TYPE, SHOW_DOCUMENT_FRAGMENT , SHOW_NOTATION, and SHOW_ENTITY are meaningless here, such nodes will never be passed to a LSSerializerFilter. Unlike [DOM Level 2 Traversal and Range] , the SHOW_ATTRIBUTE constant indicates that the Attr nodes are shown and passed to the filter. The constants used here are defined in [DOM Level 2 Traversal and Range] .",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.ls.LSSerializerFilter",
  "comment": "\u003ccode\u003eLSSerializerFilter\u003c/code\u003es provide applications the ability to examine nodes as they are being serialized and decide what nodes should be serialized or not. The \n\u003ccode\u003eLSSerializerFilter\u003c/code\u003e interface is based on the \n\u003ccode\u003eNodeFilter\u003c/code\u003e interface defined in [\n\u003ca href\u003d\"http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113\"\u003eDOM Level 2 Traversal and Range\u003c/a\u003e] . \n\u003cp\u003e \u003ccode\u003eDocument\u003c/code\u003e, \u003ccode\u003eDocumentType\u003c/code\u003e, \u003ccode\u003eDocumentFragment\u003c/code\u003e, \u003ccode\u003eNotation\u003c/code\u003e, \u003ccode\u003eEntity\u003c/code\u003e , and children of \u003ccode\u003eAttr\u003c/code\u003e nodes are not passed to the filter. The child nodes of an \u003ccode\u003eEntityReference\u003c/code\u003e node are only passed to the filter if the \u003ccode\u003eEntityReference\u003c/code\u003e node is skipped by the method \u003ccode\u003eLSParserFilter.acceptNode()\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e When serializing an \u003ccode\u003eElement\u003c/code\u003e, the element is passed to the filter before any of its attributes are passed to the filter. Namespace declaration attributes, and default attributes (except in the case when \" discard-default-content\" is set to \u003ccode\u003efalse\u003c/code\u003e), are never passed to the filter. \u003c/p\u003e\n\u003cp\u003e The result of any attempt to modify a node passed to a \u003ccode\u003eLSSerializerFilter\u003c/code\u003e is implementation dependent. \u003c/p\u003e\n\u003cp\u003e DOM applications must not raise exceptions in a filter. The effect of throwing exceptions from a filter is DOM implementation dependent. \u003c/p\u003e\n\u003cp\u003e For efficiency, a node passed to the filter may not be the same as the one that is actually in the tree. And the actual node (node object identity) may be reused during the process of filtering and serializing a document. \u003c/p\u003e\n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407\"\u003eDocument Object Model (DOM) Level 3 Load and Save Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}