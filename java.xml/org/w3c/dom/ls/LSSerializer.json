{
  "packageName": "org.w3c.dom.ls",
  "simpleName": "LSSerializer",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "org.w3c.dom.DOMConfiguration",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDomConfig",
      "comment": "The DOMConfiguration object used by the LSSerializer when serializing a DOM node. In addition to the parameters recognized by the DOMConfiguration interface defined in [DOM Level 3 Core] , the DOMConfiguration objects for LSSerializer adds, or modifies, the following parameters: \"canonical-form\" true [optional] Writes the document according to the rules specified in [Canonical XML]. In addition to the behavior described in \"canonical-form\" [DOM Level 3 Core] , setting this parameter to true will set the parameters \"format-pretty-print\", \"discard-default-content\", and \"xml-declaration \", to false. Setting one of those parameters to true will set this parameter to false. Serializing an XML 1.1 document when \"canonical-form\" is true will generate a fatal error. false [required] (default) Do not canonicalize the output. \"discard-default-content\" true [required] (default) Use the Attr.specified attribute to decide what attributes should be discarded. Note that some implementations might use whatever information available to the implementation (i.e. XML schema, DTD, the Attr.specified attribute, and so on) to determine what attributes and content to discard if this parameter is set to true. false [required]Keep all attributes and all content. \"format-pretty-print\" true [optional] Formatting the output by adding whitespace to produce a pretty-printed, indented, human-readable form. The exact form of the transformations is not specified by this specification. Pretty-printing changes the content of the document and may affect the validity of the document, validating implementations should preserve validity. false [required] (default) Don\u0027t pretty-print the result. \"ignore-unknown-character-denormalizations\" true [required] (default) If, while verifying full normalization when [XML 1.1] is supported, a character is encountered for which the normalization properties cannot be determined, then raise a \"unknown-character-denormalization\" warning (instead of raising an error, if this parameter is not set) and ignore any possible denormalizations caused by these characters. false [optional] Report a fatal error if a character is encountered for which the processor cannot determine the normalization properties. \"normalize-characters\" This parameter is equivalent to the one defined by DOMConfiguration in [DOM Level 3 Core] . Unlike in the Core, the default value for this parameter is true. While DOM implementations are not required to support fully normalizing the characters in the document according to appendix E of [XML 1.1], this parameter must be activated by default if supported. \"xml-declaration\" true [required] (default) If a Document, Element, or Entity node is serialized, the XML declaration, or text declaration, should be included. The version (Document.xmlVersion if the document is a Level 3 document and the version is non-null, otherwise use the value \"1.0\"), and the output encoding (see LSSerializer.write for details on how to find the output encoding) are specified in the serialized XML declaration. false [required] Do not serialize the XML and text declarations. Report a \"xml-declaration-needed\" warning if this will cause problems (i.e. the serialized data is of an XML version other than [XML 1.0], or an encoding would be needed to be able to re-parse the serialized data).",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNewLine",
      "comment": "The end-of-line sequence of characters to be used in the XML being written out. Any string is supported, but XML treats only a certain set of characters sequence as end-of-line (See section 2.11, \"End-of-Line Handling\" in [XML 1.0], if the serialized content is XML 1.0 or section 2.11, \"End-of-Line Handling\" in [XML 1.1], if the serialized content is XML 1.1). Using other character sequences than the recommended ones can result in a document that is either not serializable or not well-formed). On retrieval, the default value of this attribute is the implementation specific default end-of-line sequence. DOM implementations should choose the default to match the usual convention for text files in the environment being used. Implementations must choose a default sequence that matches one of those allowed by XML 1.0 or XML 1.1, depending on the serialized content. Setting this attribute to null will reset its value to the default value.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNewLine",
      "comment": "The end-of-line sequence of characters to be used in the XML being written out. Any string is supported, but XML treats only a certain set of characters sequence as end-of-line (See section 2.11, \"End-of-Line Handling\" in [XML 1.0], if the serialized content is XML 1.0 or section 2.11, \"End-of-Line Handling\" in [XML 1.1], if the serialized content is XML 1.1). Using other character sequences than the recommended ones can result in a document that is either not serializable or not well-formed). On retrieval, the default value of this attribute is the implementation specific default end-of-line sequence. DOM implementations should choose the default to match the usual convention for text files in the environment being used. Implementations must choose a default sequence that matches one of those allowed by XML 1.0 or XML 1.1, depending on the serialized content. Setting this attribute to null will reset its value to the default value.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.ls.LSSerializerFilter",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFilter",
      "comment": "When the application provides a filter, the serializer will call out to the filter before serializing each Node. The filter implementation can choose to remove the node from the stream or to terminate the serialization early. The filter is invoked after the operations requested by the DOMConfiguration parameters have been applied. For example, CDATA sections won\u0027t be passed to the filter if \"cdata-sections\" is set to false.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFilter",
      "comment": "When the application provides a filter, the serializer will call out to the filter before serializing each Node. The filter implementation can choose to remove the node from the stream or to terminate the serialization early. The filter is invoked after the operations requested by the DOMConfiguration parameters have been applied. For example, CDATA sections won\u0027t be passed to the filter if \"cdata-sections\" is set to false.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "write",
      "comment": "Serialize the specified node as described above in the general description of the LSSerializer interface. The output is written to the supplied LSOutput. When writing to a LSOutput, the encoding is found by looking at the encoding information that is reachable through the LSOutput and the item to be written (or its owner document) in this order: LSOutput.encoding, Document.inputEncoding, Document.xmlEncoding. If no encoding is reachable through the above properties, a default encoding of \"UTF-8\" will be used. If the specified encoding is not supported an \"unsupported-encoding\" fatal error is raised. If no output is specified in the LSOutput, a \"no-output-specified\" fatal error is raised. The implementation is responsible of associating the appropriate media type with the serialized data. When writing to a HTTP URI, a HTTP PUT is performed. When writing to other types of URIs, the mechanism for writing the data to the URI is implementation dependent.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enodeArg\u003c/code\u003e - The node to serialize.",
          "\u003ccode\u003edestination\u003c/code\u003e - The destination for the serialized DOM."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/ls/LSException.html\" title\u003d\"class in org.w3c.dom.ls\"\u003eLSException\u003c/a\u003e\u003c/code\u003e - SERIALIZE_ERR: Raised if the \n\u003ccode\u003eLSSerializer\u003c/code\u003e was unable to serialize the node. DOM applications should attach a \n\u003ccode\u003eDOMErrorHandler\u003c/code\u003e using the parameter \"\n\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-error-handler\"\u003eerror-handler\u003c/a\u003e\" if they wish to get details on the error."
        ],
        "return": [
          "Returns \n\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003enode\u003c/code\u003e was successfully serialized. Return \n\u003ccode\u003efalse\u003c/code\u003e in case the normal processing stopped but the implementation kept serializing the document; the result of the serialization being implementation dependent then."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeToURI",
      "comment": "A convenience method that acts as if LSSerializer.write was called with a LSOutput with no encoding specified and LSOutput.systemId set to the uri argument.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enodeArg\u003c/code\u003e - The node to serialize.",
          "\u003ccode\u003euri\u003c/code\u003e - The URI to write to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/ls/LSException.html\" title\u003d\"class in org.w3c.dom.ls\"\u003eLSException\u003c/a\u003e\u003c/code\u003e - SERIALIZE_ERR: Raised if the \n\u003ccode\u003eLSSerializer\u003c/code\u003e was unable to serialize the node. DOM applications should attach a \n\u003ccode\u003eDOMErrorHandler\u003c/code\u003e using the parameter \"\n\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-error-handler\"\u003eerror-handler\u003c/a\u003e\" if they wish to get details on the error."
        ],
        "return": [
          "Returns \n\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003enode\u003c/code\u003e was successfully serialized. Return \n\u003ccode\u003efalse\u003c/code\u003e in case the normal processing stopped but the implementation kept serializing the document; the result of the serialization being implementation dependent then."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeToString",
      "comment": "Serialize the specified node as described above in the general description of the LSSerializer interface. The output is written to a DOMString that is returned to the caller. The encoding used is the encoding of the DOMString type, i.e. UTF-16. Note that no Byte Order Mark is generated in a DOMString object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enodeArg\u003c/code\u003e - The node to serialize."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - DOMSTRING_SIZE_ERR: Raised if the resulting string is too long to fit in a \n\u003ccode\u003eDOMString\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/ls/LSException.html\" title\u003d\"class in org.w3c.dom.ls\"\u003eLSException\u003c/a\u003e\u003c/code\u003e - SERIALIZE_ERR: Raised if the \n\u003ccode\u003eLSSerializer\u003c/code\u003e was unable to serialize the node. DOM applications should attach a \n\u003ccode\u003eDOMErrorHandler\u003c/code\u003e using the parameter \"\n\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-error-handler\"\u003eerror-handler\u003c/a\u003e\" if they wish to get details on the error."
        ],
        "return": [
          "Returns the serialized data."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.ls.LSSerializer",
  "comment": "A \n\u003ccode\u003eLSSerializer\u003c/code\u003e provides an API for serializing (writing) a DOM document out into XML. The XML data is written to a string or an output stream. Any changes or fixups made during the serialization affect only the serialized data. The \n\u003ccode\u003eDocument\u003c/code\u003e object and its children are never altered by the serialization operation. \n\u003cp\u003e During serialization of XML data, namespace fixup is done as defined in [\u003ca href\u003d\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407\"\u003eDOM Level 3 Core\u003c/a\u003e] , Appendix B. [\u003ca href\u003d\"http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113\"\u003eDOM Level 2 Core\u003c/a\u003e] allows empty strings as a real namespace URI. If the \u003ccode\u003enamespaceURI\u003c/code\u003e of a \u003ccode\u003eNode\u003c/code\u003e is empty string, the serialization will treat them as \u003ccode\u003enull\u003c/code\u003e, ignoring the prefix if any. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eLSSerializer\u003c/code\u003e accepts any node type for serialization. For nodes of type \u003ccode\u003eDocument\u003c/code\u003e or \u003ccode\u003eEntity\u003c/code\u003e, well-formed XML will be created when possible (well-formedness is guaranteed if the document or entity comes from a parse operation and is unchanged since it was created). The serialized output for these node types is either as a XML document or an External XML Entity, respectively, and is acceptable input for an XML parser. For all other types of nodes the serialized form is implementation dependent. \u003c/p\u003e\n\u003cp\u003eWithin a \u003ccode\u003eDocument\u003c/code\u003e, \u003ccode\u003eDocumentFragment\u003c/code\u003e, or \u003ccode\u003eEntity\u003c/code\u003e being serialized, \u003ccode\u003eNodes\u003c/code\u003e are processed as follows \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e \u003ccode\u003eDocument\u003c/code\u003e nodes are written, including the XML declaration (unless the parameter \"xml-declaration\" is set to \u003ccode\u003efalse\u003c/code\u003e) and a DTD subset, if one exists in the DOM. Writing a \u003ccode\u003eDocument\u003c/code\u003e node serializes the entire document. \u003c/li\u003e \n \u003cli\u003e \u003ccode\u003eEntity\u003c/code\u003e nodes, when written directly by \u003ccode\u003eLSSerializer.write\u003c/code\u003e, outputs the entity expansion but no namespace fixup is done. The resulting output will be valid as an external entity. \u003c/li\u003e \n \u003cli\u003e If the parameter \"\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-entities\"\u003eentities\u003c/a\u003e\" is set to \u003ccode\u003etrue\u003c/code\u003e, \u003ccode\u003eEntityReference\u003c/code\u003e nodes are serialized as an entity reference of the form \" \u003ccode\u003e\u0026amp;entityName;\u003c/code\u003e\" in the output. Child nodes (the expansion) of the entity reference are ignored. If the parameter \"\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-entities\"\u003eentities\u003c/a\u003e\" is set to \u003ccode\u003efalse\u003c/code\u003e, only the children of the entity reference are serialized. \u003ccode\u003eEntityReference\u003c/code\u003e nodes with no children (no corresponding \u003ccode\u003eEntity\u003c/code\u003e node or the corresponding \u003ccode\u003eEntity\u003c/code\u003e nodes have no children) are always serialized. \u003c/li\u003e \n \u003cli\u003e \u003ccode\u003eCDATAsections\u003c/code\u003e containing content characters that cannot be represented in the specified output encoding are handled according to the \"\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-split-cdata-sections\"\u003esplit-cdata-sections\u003c/a\u003e\" parameter. If the parameter is set to \u003ccode\u003etrue\u003c/code\u003e, \u003ccode\u003eCDATAsections\u003c/code\u003e are split, and the unrepresentable characters are serialized as numeric character references in ordinary content. The exact position and number of splits is not specified. If the parameter is set to \u003ccode\u003efalse\u003c/code\u003e, unrepresentable characters in a \u003ccode\u003eCDATAsection\u003c/code\u003e are reported as \u003ccode\u003e\"wf-invalid-character\"\u003c/code\u003e errors if the parameter \"\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-well-formed\"\u003ewell-formed\u003c/a\u003e\" is set to \u003ccode\u003etrue\u003c/code\u003e. The error is not recoverable - there is no mechanism for supplying alternative characters and continuing with the serialization. \u003c/li\u003e \n \u003cli\u003e \u003ccode\u003eDocumentFragment\u003c/code\u003e nodes are serialized by serializing the children of the document fragment in the order they appear in the document fragment. \u003c/li\u003e \n \u003cli\u003e All other node types (Element, Text, etc.) are serialized to their corresponding XML source form. \u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e The serialization of a \u003ccode\u003eNode\u003c/code\u003e does not always generate a well-formed XML document, i.e. a \u003ccode\u003eLSParser\u003c/code\u003e might throw fatal errors when parsing the resulting serialization. \u003c/p\u003e\n\u003cp\u003e Within the character data of a document (outside of markup), any characters that cannot be represented directly are replaced with character references. Occurrences of \u0027\u0026lt;\u0027 and \u0027\u0026amp;\u0027 are replaced by the predefined entities \u0026amp;lt; and \u0026amp;amp;. The other predefined entities (\u0026amp;gt;, \u0026amp;apos;, and \u0026amp;quot;) might not be used, except where needed (e.g. using \u0026amp;gt; in cases such as \u0027]]\u0026gt;\u0027). Any characters that cannot be represented directly in the output character encoding are serialized as numeric character references (and since character encoding standards commonly use hexadecimal representations of characters, using the hexadecimal representation when serializing character references is encouraged). \u003c/p\u003e\n\u003cp\u003e To allow attribute values to contain both single and double quotes, the apostrophe or single-quote character (\u0027) may be represented as \"\u0026amp;apos;\", and the double-quote character (\") as \"\u0026amp;quot;\". New line characters and other characters that cannot be represented directly in attribute values in the output character encoding are serialized as a numeric character reference. \u003c/p\u003e\n\u003cp\u003e Within markup, but outside of attributes, any occurrence of a character that cannot be represented in the output character encoding is reported as a \u003ccode\u003eDOMError\u003c/code\u003e fatal error. An example would be serializing the element \u0026lt;LaCañada/\u0026gt; with \u003ccode\u003eencoding\u003d\"us-ascii\"\u003c/code\u003e. This will result with a generation of a \u003ccode\u003eDOMError\u003c/code\u003e \"wf-invalid-character-in-node-name\" (as proposed in \"\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-well-formed\"\u003ewell-formed\u003c/a\u003e\"). \u003c/p\u003e\n\u003cp\u003e When requested by setting the parameter \"\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-normalize-characters\"\u003enormalize-characters\u003c/a\u003e\" on \u003ccode\u003eLSSerializer\u003c/code\u003e to true, character normalization is performed according to the definition of \u003ca href\u003d\"http://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm\"\u003efully normalized\u003c/a\u003e characters included in appendix E of [\u003ca href\u003d\"http://www.w3.org/TR/2004/REC-xml11-20040204/\"\u003eXML 1.1\u003c/a\u003e] on all data to be serialized, both markup and character data. The character normalization process affects only the data as it is being written; it does not alter the DOM\u0027s view of the document after serialization has completed. \u003c/p\u003e\n\u003cp\u003e Implementations are required to support the encodings \"UTF-8\", \"UTF-16\", \"UTF-16BE\", and \"UTF-16LE\" to guarantee that data is serializable in all encodings that are required to be supported by all XML parsers. When the encoding is UTF-8, whether or not a byte order mark is serialized, or if the output is big-endian or little-endian, is implementation dependent. When the encoding is UTF-16, whether or not the output is big-endian or little-endian is implementation dependent, but a Byte Order Mark must be generated for non-character outputs, such as \u003ccode\u003eLSOutput.byteStream\u003c/code\u003e or \u003ccode\u003eLSOutput.systemId\u003c/code\u003e. If the Byte Order Mark is not generated, a \"byte-order-mark-needed\" warning is reported. When the encoding is UTF-16LE or UTF-16BE, the output is big-endian (UTF-16BE) or little-endian (UTF-16LE) and the Byte Order Mark is not be generated. In all cases, the encoding declaration, if generated, will correspond to the encoding used during the serialization (e.g. \u003ccode\u003eencoding\u003d\"UTF-16\"\u003c/code\u003e will appear if UTF-16 was requested). \u003c/p\u003e\n\u003cp\u003e Namespaces are fixed up during serialization, the serialization process will verify that namespace declarations, namespace prefixes and the namespace URI associated with elements and attributes are consistent. If inconsistencies are found, the serialized form of the document will be altered to remove them. The method used for doing the namespace fixup while serializing a document is the algorithm defined in Appendix B.1, \"Namespace normalization\", of [\u003ca href\u003d\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407\"\u003eDOM Level 3 Core\u003c/a\u003e] . \u003c/p\u003e\n\u003cp\u003e While serializing a document, the parameter \"discard-default-content\" controls whether or not non-specified data is serialized. \u003c/p\u003e\n\u003cp\u003e While serializing, errors and warnings are reported to the application through the error handler (\u003ccode\u003eLSSerializer.domConfig\u003c/code\u003e\u0027s \"\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-error-handler\"\u003eerror-handler\u003c/a\u003e\" parameter). This specification does in no way try to define all possible errors and warnings that can occur while serializing a DOM node, but some common error and warning cases are defined. The types ( \u003ccode\u003eDOMError.type\u003c/code\u003e) of errors and warnings defined by this specification are: \u003c/p\u003e\n\u003cdl\u003e \n \u003cdt\u003e\n  \u003ccode\u003e\"no-output-specified\" [fatal]\u003c/code\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   Raised when writing to a \n  \u003ccode\u003eLSOutput\u003c/code\u003e if no output is specified in the \n  \u003ccode\u003eLSOutput\u003c/code\u003e. \n \u003c/dd\u003e \n \u003cdt\u003e \n  \u003ccode\u003e\"unbound-prefix-in-entity-reference\" [fatal]\u003c/code\u003e \n \u003c/dt\u003e \n \u003cdd\u003e\n   Raised if the configuration parameter \"\n  \u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-namespaces\"\u003enamespaces\u003c/a\u003e\" is set to \n  \u003ccode\u003etrue\u003c/code\u003e and an entity whose replacement text contains unbound namespace prefixes is referenced in a location where there are no bindings for the namespace prefixes. \n \u003c/dd\u003e \n \u003cdt\u003e \n  \u003ccode\u003e\"unsupported-encoding\" [fatal]\u003c/code\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   Raised if an unsupported encoding is encountered. \n \u003c/dd\u003e \n\u003c/dl\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e In addition to raising the defined errors and warnings, implementations are expected to raise implementation specific errors and warnings for any other error and warning cases such as IO errors (file not found, permission denied,...) and so on. \u003c/p\u003e\n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407\"\u003e Document Object Model (DOM) Level 3 Load and Save Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}