{
  "packageName": "org.w3c.dom.ls",
  "simpleName": "LSParser",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ACTION_APPEND_AS_CHILDREN",
      "comment": "Append the result of the parse operation as children of the context node. For this action to work, the context node must be an Element or a DocumentFragment.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.ls.LSParser.ACTION_APPEND_AS_CHILDREN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ACTION_REPLACE_CHILDREN",
      "comment": "Replace all the children of the context node with the result of the parse operation. For this action to work, the context node must be an Element, a Document, or a DocumentFragment.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.ls.LSParser.ACTION_REPLACE_CHILDREN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ACTION_INSERT_BEFORE",
      "comment": "Insert the result of the parse operation as the immediately preceding sibling of the context node. For this action to work the context node\u0027s parent must be an Element or a DocumentFragment.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.ls.LSParser.ACTION_INSERT_BEFORE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ACTION_INSERT_AFTER",
      "comment": "Insert the result of the parse operation as the immediately following sibling of the context node. For this action to work the context node\u0027s parent must be an Element or a DocumentFragment.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.ls.LSParser.ACTION_INSERT_AFTER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ACTION_REPLACE",
      "comment": "Replace the context node with the result of the parse operation. For this action to work, the context node must have a parent, and the parent must be an Element or a DocumentFragment.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.ls.LSParser.ACTION_REPLACE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.DOMConfiguration",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDomConfig",
      "comment": "The DOMConfiguration object used when parsing an input source. This DOMConfiguration is specific to the parse operation. No parameter values from this DOMConfiguration object are passed automatically to the DOMConfiguration object on the Document that is created, or used, by the parse operation. The DOM application is responsible for passing any needed parameter values from this DOMConfiguration object to the DOMConfiguration object referenced by the Document object. In addition to the parameters recognized in on the DOMConfiguration interface defined in [DOM Level 3 Core] , the DOMConfiguration objects for LSParser add or modify the following parameters: \"charset-overrides-xml-encoding\" true [optional] (default) If a higher level protocol such as HTTP [IETF RFC 2616] provides an indication of the character encoding of the input stream being processed, that will override any encoding specified in the XML declaration or the Text declaration (see also section 4.3.3, \"Character Encoding in Entities\", in [XML 1.0]). Explicitly setting an encoding in the LSInput overrides any encoding from the protocol. false [required] The parser ignores any character set encoding information from higher-level protocols. \"disallow-doctype\" true [optional] Throw a fatal \"doctype-not-allowed\" error if a doctype node is found while parsing the document. This is useful when dealing with things like SOAP envelopes where doctype nodes are not allowed. false [required] (default) Allow doctype nodes in the document. \"ignore-unknown-character-denormalizations\" true [required] (default) If, while verifying full normalization when [XML 1.1] is supported, a processor encounters characters for which it cannot determine the normalization properties, then the processor will ignore any possible denormalizations caused by these characters. This parameter is ignored for [XML 1.0]. false [optional] Report an fatal \"unknown-character-denormalization\" error if a character is encountered for which the processor cannot determine the normalization properties. \"infoset\" See the definition of DOMConfiguration for a description of this parameter. Unlike in [DOM Level 3 Core] , this parameter will default to true for LSParser. \"namespaces\" true [required] (default) Perform the namespace processing as defined in [XML Namespaces] and [XML Namespaces 1.1] . false [optional] Do not perform the namespace processing. \"resource-resolver\" [required] A reference to a LSResourceResolver object, or null. If the value of this parameter is not null when an external resource (such as an external XML entity or an XML schema location) is encountered, the implementation will request that the LSResourceResolver referenced in this parameter resolves the resource. \"supported-media-types-only\" true [optional] Check that the media type of the parsed resource is a supported media type. If an unsupported media type is encountered, a fatal error of type \"unsupported-media-type\" will be raised. The media types defined in [IETF RFC 3023] must always be accepted. false [required] (default) Accept any media type. \"validate\" See the definition of DOMConfiguration for a description of this parameter. Unlike in [DOM Level 3 Core] , the processing of the internal subset is always accomplished, even if this parameter is set to false. \"validate-if-schema\" See the definition of DOMConfiguration for a description of this parameter. Unlike in [DOM Level 3 Core] , the processing of the internal subset is always accomplished, even if this parameter is set to false. \"well-formed\" See the definition of DOMConfiguration for a description of this parameter. Unlike in [DOM Level 3 Core] , this parameter cannot be set to false.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.ls.LSParserFilter",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFilter",
      "comment": "When a filter is provided, the implementation will call out to the filter as it is constructing the DOM tree structure. The filter can choose to remove elements from the document being constructed, or to terminate the parsing early. The filter is invoked after the operations requested by the DOMConfiguration parameters have been applied. For example, if \"validate\" is set to true, the validation is done before invoking the filter.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.ls.LSParserFilter",
            "type": "Class"
          },
          "field": {
            "name": "filter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFilter",
      "comment": "When a filter is provided, the implementation will call out to the filter as it is constructing the DOM tree structure. The filter can choose to remove elements from the document being constructed, or to terminate the parsing early. The filter is invoked after the operations requested by the DOMConfiguration parameters have been applied. For example, if \"validate\" is set to true, the validation is done before invoking the filter.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAsync",
      "comment": "true if the LSParser is asynchronous, false if it is synchronous.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBusy",
      "comment": "true if the LSParser is currently busy loading a document, otherwise false.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Document",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        },
        {
          "name": "org.w3c.dom.ls.LSException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.ls.LSInput",
            "type": "Class"
          },
          "field": {
            "name": "input"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "parse",
      "comment": "Parse an XML document from a resource identified by a LSInput.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - The \n\u003ccode\u003eLSInput\u003c/code\u003e from which the source of the document is to be read."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - INVALID_STATE_ERR: Raised if the \n\u003ccode\u003eLSParser\u003c/code\u003e\u0027s \n\u003ccode\u003eLSParser.busy\u003c/code\u003e attribute is \n\u003ccode\u003etrue\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/ls/LSException.html\" title\u003d\"class in org.w3c.dom.ls\"\u003eLSException\u003c/a\u003e\u003c/code\u003e - PARSE_ERR: Raised if the \n\u003ccode\u003eLSParser\u003c/code\u003e was unable to load the XML document. DOM applications should attach a \n\u003ccode\u003eDOMErrorHandler\u003c/code\u003e using the parameter \"\n\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-error-handler\"\u003eerror-handler\u003c/a\u003e\" if they wish to get details on the error."
        ],
        "return": [
          "If the \n\u003ccode\u003eLSParser\u003c/code\u003e is a synchronous \n\u003ccode\u003eLSParser\u003c/code\u003e, the newly created and populated \n\u003ccode\u003eDocument\u003c/code\u003e is returned. If the \n\u003ccode\u003eLSParser\u003c/code\u003e is asynchronous, \n\u003ccode\u003enull\u003c/code\u003e is returned since the document object may not yet be constructed when this method returns."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Document",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        },
        {
          "name": "org.w3c.dom.ls.LSException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "uri"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "parseURI",
      "comment": "Parse an XML document from a location identified by a URI reference [IETF RFC 2396]. If the URI contains a fragment identifier (see section 4.1 in [IETF RFC 2396]), the behavior is not defined by this specification, future versions of this specification may define the behavior.",
      "tagMap": {
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - The location of the XML document to be read."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - INVALID_STATE_ERR: Raised if the \n\u003ccode\u003eLSParser.busy\u003c/code\u003e attribute is \n\u003ccode\u003etrue\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/ls/LSException.html\" title\u003d\"class in org.w3c.dom.ls\"\u003eLSException\u003c/a\u003e\u003c/code\u003e - PARSE_ERR: Raised if the \n\u003ccode\u003eLSParser\u003c/code\u003e was unable to load the XML document. DOM applications should attach a \n\u003ccode\u003eDOMErrorHandler\u003c/code\u003e using the parameter \"\n\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-error-handler\"\u003eerror-handler\u003c/a\u003e\" if they wish to get details on the error."
        ],
        "return": [
          "If the \n\u003ccode\u003eLSParser\u003c/code\u003e is a synchronous \n\u003ccode\u003eLSParser\u003c/code\u003e, the newly created and populated \n\u003ccode\u003eDocument\u003c/code\u003e is returned, or \n\u003ccode\u003enull\u003c/code\u003e if an error occured. If the \n\u003ccode\u003eLSParser\u003c/code\u003e is asynchronous, \n\u003ccode\u003enull\u003c/code\u003e is returned since the document object may not yet be constructed when this method returns."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        },
        {
          "name": "org.w3c.dom.ls.LSException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.ls.LSInput",
            "type": "Class"
          },
          "field": {
            "name": "input"
          }
        },
        {
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "field": {
            "name": "contextArg"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "parseWithContext",
      "comment": "Parse an XML fragment from a resource identified by a LSInput and insert the content into an existing document at the position specified with the context and action arguments. When parsing the input stream, the context node (or its parent, depending on where the result will be inserted) is used for resolving unbound namespace prefixes. The context node\u0027s ownerDocument node (or the node itself if the node of type DOCUMENT_NODE) is used to resolve default attributes and entity references. As the new data is inserted into the document, at least one mutation event is fired per new immediate child or sibling of the context node. If the context node is a Document node and the action is ACTION_REPLACE_CHILDREN, then the document that is passed as the context node will be changed such that its xmlEncoding, documentURI, xmlVersion, inputEncoding, xmlStandalone, and all other such attributes are set to what they would be set to if the input source was parsed using LSParser.parse(). This method is always synchronous, even if the LSParser is asynchronous (LSParser.async is true). If an error occurs while parsing, the caller is notified through the ErrorHandler instance associated with the \"error-handler\" parameter of the DOMConfiguration. When calling parseWithContext, the values of the following configuration parameters will be ignored and their default values will always be used instead: \"validate\", \"validate-if-schema\", and \"element-content-whitespace\". Other parameters will be treated normally, and the parser is expected to call the LSParserFilter just as if a whole document was parsed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - The \n\u003ccode\u003eLSInput\u003c/code\u003e from which the source document is to be read. The source document must be an XML fragment, i.e. anything except a complete XML document (except in the case where the context node of type \n\u003ccode\u003eDOCUMENT_NODE\u003c/code\u003e, and the action is \n\u003ccode\u003eACTION_REPLACE_CHILDREN\u003c/code\u003e), a DOCTYPE (internal subset), entity declaration(s), notation declaration(s), or XML or text declaration(s).",
          "\u003ccode\u003econtextArg\u003c/code\u003e - The node that is used as the context for the data that is being parsed. This node must be a \n\u003ccode\u003eDocument\u003c/code\u003e node, a \n\u003ccode\u003eDocumentFragment\u003c/code\u003e node, or a node of a type that is allowed as a child of an \n\u003ccode\u003eElement\u003c/code\u003e node, e.g. it cannot be an \n\u003ccode\u003eAttribute\u003c/code\u003e node.",
          "\u003ccode\u003eaction\u003c/code\u003e - This parameter describes which action should be taken between the new set of nodes being inserted and the existing children of the context node. The set of possible actions is defined in \n\u003ccode\u003eACTION_TYPES\u003c/code\u003e above."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - HIERARCHY_REQUEST_ERR: Raised if the content cannot replace, be inserted before, after, or as a child of the context node (see also \n\u003ccode\u003eNode.insertBefore\u003c/code\u003e or \n\u003ccode\u003eNode.replaceChild\u003c/code\u003e in [\n\u003ca href\u003d\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407\"\u003eDOM Level 3 Core\u003c/a\u003e] ). \n\u003cbr\u003e NOT_SUPPORTED_ERR: Raised if the \n\u003ccode\u003eLSParser\u003c/code\u003e doesn\u0027t support this method, or if the context node is of type \n\u003ccode\u003eDocument\u003c/code\u003e and the DOM implementation doesn\u0027t support the replacement of the \n\u003ccode\u003eDocumentType\u003c/code\u003e child or \n\u003ccode\u003eElement\u003c/code\u003e child. \n\u003cbr\u003e NO_MODIFICATION_ALLOWED_ERR: Raised if the context node is a read only node and the content is being appended to its child list, or if the parent node of the context node is read only node and the content is being inserted in its child list. \n\u003cbr\u003e INVALID_STATE_ERR: Raised if the \n\u003ccode\u003eLSParser.busy\u003c/code\u003e attribute is \n\u003ccode\u003etrue\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/ls/LSException.html\" title\u003d\"class in org.w3c.dom.ls\"\u003eLSException\u003c/a\u003e\u003c/code\u003e - PARSE_ERR: Raised if the \n\u003ccode\u003eLSParser\u003c/code\u003e was unable to load the XML fragment. DOM applications should attach a \n\u003ccode\u003eDOMErrorHandler\u003c/code\u003e using the parameter \"\n\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-error-handler\"\u003eerror-handler\u003c/a\u003e\" if they wish to get details on the error."
        ],
        "return": [
          "Return the node that is the result of the parse operation. If the result is more than one top-level node, the first one is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "abort",
      "comment": "Abort the loading of the document that is currently being loaded by the LSParser. If the LSParser is currently not busy, a call to this method does nothing.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.ls.LSParser",
  "comment": "An interface to an object that is able to build, or augment, a DOM tree from various input sources. \n\u003cp\u003e \u003ccode\u003eLSParser\u003c/code\u003e provides an API for parsing XML and building the corresponding DOM document structure. A \u003ccode\u003eLSParser\u003c/code\u003e instance can be obtained by invoking the \u003ccode\u003eDOMImplementationLS.createLSParser()\u003c/code\u003e method. \u003c/p\u003e\n\u003cp\u003e As specified in [\u003ca href\u003d\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407\"\u003eDOM Level 3 Core\u003c/a\u003e] , when a document is first made available via the LSParser: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e there will never be two adjacent nodes of type NODE_TEXT, and there will never be empty text nodes. \u003c/li\u003e \n \u003cli\u003e it is expected that the \u003ccode\u003evalue\u003c/code\u003e and \u003ccode\u003enodeValue\u003c/code\u003e attributes of an \u003ccode\u003eAttr\u003c/code\u003e node initially return the \u003ca href\u003d\"http://www.w3.org/TR/2004/REC-xml-20040204#AVNormalize\"\u003eXML 1.0 normalized value\u003c/a\u003e. However, if the parameters \"\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-validate-if-schema\"\u003evalidate-if-schema\u003c/a\u003e\" and \"\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-datatype-normalization\"\u003edatatype-normalization\u003c/a\u003e\" are set to \u003ccode\u003etrue\u003c/code\u003e, depending on the attribute normalization used, the attribute values may differ from the ones obtained by the XML 1.0 attribute normalization. If the parameters \"\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-datatype-normalization\"\u003edatatype-normalization\u003c/a\u003e\" is set to \u003ccode\u003efalse\u003c/code\u003e, the XML 1.0 attribute normalization is guaranteed to occur, and if the attributes list does not contain namespace declarations, the \u003ccode\u003eattributes\u003c/code\u003e attribute on \u003ccode\u003eElement\u003c/code\u003e node represents the property \u003cb\u003e[attributes]\u003c/b\u003e defined in [\u003ca href\u003d\"http://www.w3.org/TR/2004/REC-xml-infoset-20040204/\"\u003eXML Information Set\u003c/a\u003e]. \u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Asynchronous \u003ccode\u003eLSParser\u003c/code\u003e objects are expected to also implement the \u003ccode\u003eevents::EventTarget\u003c/code\u003e interface so that event listeners can be registered on asynchronous \u003ccode\u003eLSParser\u003c/code\u003e objects. \u003c/p\u003e\n\u003cp\u003e Events supported by asynchronous \u003ccode\u003eLSParser\u003c/code\u003e objects are: \u003c/p\u003e\n\u003cdl\u003e \n \u003cdt\u003e\n  load\n \u003c/dt\u003e \n \u003cdd\u003e\n   The \n  \u003ccode\u003eLSParser\u003c/code\u003e finishes to load the document. See also the definition of the \n  \u003ccode\u003eLSLoadEvent\u003c/code\u003e interface. \n \u003c/dd\u003e \n \u003cdt\u003e\n  progress\n \u003c/dt\u003e \n \u003cdd\u003e\n   The \n  \u003ccode\u003eLSParser\u003c/code\u003e signals progress as data is parsed. This specification does not attempt to define exactly when progress events should be dispatched. That is intentionally left as implementation-dependent. Here is one example of how an application might dispatch progress events: Once the parser starts receiving data, a progress event is dispatched to indicate that the parsing starts. From there on, a progress event is dispatched for every 4096 bytes of data that is received and processed. This is only one example, though, and implementations can choose to dispatch progress events at any time while parsing, or not dispatch them at all. See also the definition of the \n  \u003ccode\u003eLSProgressEvent\u003c/code\u003e interface. \n \u003c/dd\u003e \n\u003c/dl\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e All events defined in this specification use the namespace URI \u003ccode\u003e\"http://www.w3.org/2002/DOMLS\"\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e While parsing an input source, errors are reported to the application through the error handler (\u003ccode\u003eLSParser.domConfig\u003c/code\u003e\u0027s \"\u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-error-handler\"\u003eerror-handler\u003c/a\u003e\" parameter). This specification does in no way try to define all possible errors that can occur while parsing XML, or any other markup, but some common error cases are defined. The types (\u003ccode\u003eDOMError.type\u003c/code\u003e) of errors and warnings defined by this specification are: \u003c/p\u003e\n\u003cdl\u003e \n \u003cdt\u003e \n  \u003ccode\u003e\"check-character-normalization-failure\" [error]\u003c/code\u003e \n \u003c/dt\u003e \n \u003cdd\u003e\n   Raised if the parameter \"\n  \u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-check-character-normalization\"\u003echeck-character-normalization\u003c/a\u003e\" is set to true and a string is encountered that fails normalization checking. \n \u003c/dd\u003e \n \u003cdt\u003e\n  \u003ccode\u003e\"doctype-not-allowed\" [fatal]\u003c/code\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   Raised if the configuration parameter \"disallow-doctype\" is set to \n  \u003ccode\u003etrue\u003c/code\u003e and a doctype is encountered. \n \u003c/dd\u003e \n \u003cdt\u003e\n  \u003ccode\u003e\"no-input-specified\" [fatal]\u003c/code\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   Raised when loading a document and no input is specified in the \n  \u003ccode\u003eLSInput\u003c/code\u003e object. \n \u003c/dd\u003e \n \u003cdt\u003e \n  \u003ccode\u003e\"pi-base-uri-not-preserved\" [warning]\u003c/code\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   Raised if a processing instruction is encountered in a location where the base URI of the processing instruction can not be preserved. One example of a case where this warning will be raised is if the configuration parameter \"\n  \u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-entities\"\u003eentities\u003c/a\u003e\" is set to \n  \u003ccode\u003efalse\u003c/code\u003e and the following XML file is parsed: \n  \u003cpre\u003e \u0026lt;!DOCTYPE root [ \u0026lt;!ENTITY e SYSTEM \u0027subdir/myentity.ent\u0027 ]\u0026gt;\n \u0026lt;root\u0026gt; \u0026amp;e; \u0026lt;/root\u0026gt;\u003c/pre\u003e And \n  \u003ccode\u003esubdir/myentity.ent\u003c/code\u003e contains: \n  \u003cpre\u003e\u0026lt;one\u0026gt; \u0026lt;two/\u0026gt; \u0026lt;/one\u0026gt; \u0026lt;?pi 3.14159?\u0026gt;\n \u0026lt;more/\u0026gt;\u003c/pre\u003e \n \u003c/dd\u003e \n \u003cdt\u003e\n  \u003ccode\u003e\"unbound-prefix-in-entity\" [warning]\u003c/code\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   An implementation dependent warning that may be raised if the configuration parameter \"\n  \u003ca href\u003d\"https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-namespaces\"\u003enamespaces\u003c/a\u003e\" is set to \n  \u003ccode\u003etrue\u003c/code\u003e and an unbound namespace prefix is encountered in an entity\u0027s replacement text. Raising this warning is not enforced since some existing parsers may not recognize unbound namespace prefixes in the replacement text of entities. \n \u003c/dd\u003e \n \u003cdt\u003e \n  \u003ccode\u003e\"unknown-character-denormalization\" [fatal]\u003c/code\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   Raised if the configuration parameter \"ignore-unknown-character-denormalizations\" is set to \n  \u003ccode\u003efalse\u003c/code\u003e and a character is encountered for which the processor cannot determine the normalization properties. \n \u003c/dd\u003e \n \u003cdt\u003e \n  \u003ccode\u003e\"unsupported-encoding\" [fatal]\u003c/code\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   Raised if an unsupported encoding is encountered. \n \u003c/dd\u003e \n \u003cdt\u003e\n  \u003ccode\u003e\"unsupported-media-type\" [fatal]\u003c/code\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   Raised if the configuration parameter \"supported-media-types-only\" is set to \n  \u003ccode\u003etrue\u003c/code\u003e and an unsupported media type is encountered. \n \u003c/dd\u003e \n\u003c/dl\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e In addition to raising the defined errors and warnings, implementations are expected to raise implementation specific errors and warnings for any other error and warning cases such as IO errors (file not found, permission denied,...), XML well-formedness errors, and so on. \u003c/p\u003e\n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407\"\u003eDocument Object Model (DOM) Level 3 Load and Save Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}