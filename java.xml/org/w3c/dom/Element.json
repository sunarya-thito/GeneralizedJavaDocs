{
  "packageName": "org.w3c.dom",
  "simpleName": "Element",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.w3c.dom.Node",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTagName",
      "comment": "The name of the element. If Node.localName is different from null, this attribute is a qualified name. For example, in:  \u003celementExample id\u003d\"demo\"\u003e ...\n \u003c/elementExample\u003e , tagName has the value \"elementExample\". Note that this is case-preserving in XML, as are all of the operations of the DOM. The HTML DOM returns the tagName of an HTML element in the canonical uppercase form, regardless of the case in the source HTML document.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttribute",
      "comment": "Retrieves an attribute value by name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the attribute to retrieve."
        ],
        "return": [
          "The \n\u003ccode\u003eAttr\u003c/code\u003e value as a string, or the empty string if that attribute does not have a specified or default value."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAttribute",
      "comment": "Adds a new attribute. If an attribute with that name is already present in the element, its value is changed to be that of the value parameter. This value is a simple string; it is not parsed as it is being set. So any markup (such as syntax to be recognized as an entity reference) is treated as literal text, and needs to be appropriately escaped by the implementation when it is written out. In order to assign an attribute value that contains entity references, the user must create an Attr node plus any Text and EntityReference nodes, build the appropriate subtree, and use setAttributeNode to assign it as the value of an attribute. To set an attribute with a qualified name and namespace URI, use the setAttributeNS method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the attribute to create or alter.",
          "\u003ccode\u003evalue\u003c/code\u003e - Value to set in string form."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - INVALID_CHARACTER_ERR: Raised if the specified name is not an XML name according to the XML version in use specified in the \n\u003ccode\u003eDocument.xmlVersion\u003c/code\u003e attribute. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeAttribute",
      "comment": "Removes an attribute by name. If a default value for the removed attribute is defined in the DTD, a new attribute immediately appears with the default value as well as the corresponding namespace URI, local name, and prefix when applicable. The implementation may handle default values from other schemas similarly but applications should use Document.normalizeDocument() to guarantee this information is up-to-date. If no attribute with this name is found, this method has no effect. To remove an attribute by local name and namespace URI, use the removeAttributeNS method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the attribute to remove."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Attr",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeNode",
      "comment": "Retrieves an attribute node by name. To retrieve an attribute node by qualified name and namespace URI, use the getAttributeNodeNS method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name (\n\u003ccode\u003enodeName\u003c/code\u003e) of the attribute to retrieve."
        ],
        "return": [
          "The \n\u003ccode\u003eAttr\u003c/code\u003e node with the specified name ( \n\u003ccode\u003enodeName\u003c/code\u003e) or \n\u003ccode\u003enull\u003c/code\u003e if there is no such attribute."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Attr",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "org.w3c.dom.Attr",
            "type": "Class"
          },
          "name": "newAttr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAttributeNode",
      "comment": "Adds a new attribute node. If an attribute with that name ( nodeName) is already present in the element, it is replaced by the new one. Replacing an attribute node by itself has no effect. To add a new attribute node with a qualified name and namespace URI, use the setAttributeNodeNS method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewAttr\u003c/code\u003e - The \n\u003ccode\u003eAttr\u003c/code\u003e node to add to the attribute list."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - WRONG_DOCUMENT_ERR: Raised if \n\u003ccode\u003enewAttr\u003c/code\u003e was created from a different document than the one that created the element. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. \n\u003cbr\u003eINUSE_ATTRIBUTE_ERR: Raised if \n\u003ccode\u003enewAttr\u003c/code\u003e is already an attribute of another \n\u003ccode\u003eElement\u003c/code\u003e object. The DOM user must explicitly clone \n\u003ccode\u003eAttr\u003c/code\u003e nodes to re-use them in other elements."
        ],
        "return": [
          "If the \n\u003ccode\u003enewAttr\u003c/code\u003e attribute replaces an existing attribute, the replaced \n\u003ccode\u003eAttr\u003c/code\u003e node is returned, otherwise \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Attr",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "org.w3c.dom.Attr",
            "type": "Class"
          },
          "name": "oldAttr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeAttributeNode",
      "comment": "Removes the specified attribute node. If a default value for the removed Attr node is defined in the DTD, a new node immediately appears with the default value as well as the corresponding namespace URI, local name, and prefix when applicable. The implementation may handle default values from other schemas similarly but applications should use Document.normalizeDocument() to guarantee this information is up-to-date.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eoldAttr\u003c/code\u003e - The \n\u003ccode\u003eAttr\u003c/code\u003e node to remove from the attribute list."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. \n\u003cbr\u003eNOT_FOUND_ERR: Raised if \n\u003ccode\u003eoldAttr\u003c/code\u003e is not an attribute of the element."
        ],
        "return": [
          "The \n\u003ccode\u003eAttr\u003c/code\u003e node that was removed."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.NodeList",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getElementsByTagName",
      "comment": "Returns a NodeList of all descendant Elements with a given tag name, in document order.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the tag to match on. The special value \"*\" matches all tags."
        ],
        "return": [
          "A list of matching \n\u003ccode\u003eElement\u003c/code\u003e nodes."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "namespaceURI",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "localName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeNS",
      "comment": "Retrieves an attribute value by local name and namespace URI. Per [XML Namespaces] , applications must use the value null as the namespaceURI parameter for methods if they wish to have no namespace.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - The namespace URI of the attribute to retrieve.",
          "\u003ccode\u003elocalName\u003c/code\u003e - The local name of the attribute to retrieve."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \n\u003ccode\u003e\"XML\"\u003c/code\u003e and the language exposed through the Document does not support XML Namespaces (such as [\n\u003ca href\u003d\"http://www.w3.org/TR/1999/REC-html401-19991224/\"\u003eHTML 4.01\u003c/a\u003e])."
        ],
        "return": [
          "The \n\u003ccode\u003eAttr\u003c/code\u003e value as a string, or the empty string if that attribute does not have a specified or default value."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "namespaceURI",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "qualifiedName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAttributeNS",
      "comment": "Adds a new attribute. If an attribute with the same local name and namespace URI is already present on the element, its prefix is changed to be the prefix part of the qualifiedName, and its value is changed to be the value parameter. This value is a simple string; it is not parsed as it is being set. So any markup (such as syntax to be recognized as an entity reference) is treated as literal text, and needs to be appropriately escaped by the implementation when it is written out. In order to assign an attribute value that contains entity references, the user must create an Attr node plus any Text and EntityReference nodes, build the appropriate subtree, and use setAttributeNodeNS or setAttributeNode to assign it as the value of an attribute. Per [XML Namespaces] , applications must use the value null as the namespaceURI parameter for methods if they wish to have no namespace.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - The namespace URI of the attribute to create or alter.",
          "\u003ccode\u003equalifiedName\u003c/code\u003e - The qualified name of the attribute to create or alter.",
          "\u003ccode\u003evalue\u003c/code\u003e - The value to set in string form."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - INVALID_CHARACTER_ERR: Raised if the specified qualified name is not an XML name according to the XML version in use specified in the \n\u003ccode\u003eDocument.xmlVersion\u003c/code\u003e attribute. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. \n\u003cbr\u003eNAMESPACE_ERR: Raised if the \n\u003ccode\u003equalifiedName\u003c/code\u003e is malformed per the Namespaces in XML specification, if the \n\u003ccode\u003equalifiedName\u003c/code\u003e has a prefix and the \n\u003ccode\u003enamespaceURI\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, if the \n\u003ccode\u003equalifiedName\u003c/code\u003e has a prefix that is \"xml\" and the \n\u003ccode\u003enamespaceURI\u003c/code\u003e is different from \"\n\u003ca href\u003d\"http://www.w3.org/XML/1998/namespace\"\u003e http://www.w3.org/XML/1998/namespace\u003c/a\u003e\", if the \n\u003ccode\u003equalifiedName\u003c/code\u003e or its prefix is \"xmlns\" and the \n\u003ccode\u003enamespaceURI\u003c/code\u003e is different from \"\n\u003ca href\u003d\"http://www.w3.org/2000/xmlns/\"\u003ehttp://www.w3.org/2000/xmlns/\u003c/a\u003e\", or if the \n\u003ccode\u003enamespaceURI\u003c/code\u003e is \"\n\u003ca href\u003d\"http://www.w3.org/2000/xmlns/\"\u003ehttp://www.w3.org/2000/xmlns/\u003c/a\u003e\" and neither the \n\u003ccode\u003equalifiedName\u003c/code\u003e nor its prefix is \"xmlns\". \n\u003cbr\u003eNOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \n\u003ccode\u003e\"XML\"\u003c/code\u003e and the language exposed through the Document does not support XML Namespaces (such as [\n\u003ca href\u003d\"http://www.w3.org/TR/1999/REC-html401-19991224/\"\u003eHTML 4.01\u003c/a\u003e])."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "namespaceURI",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "localName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeAttributeNS",
      "comment": "Removes an attribute by local name and namespace URI. If a default value for the removed attribute is defined in the DTD, a new attribute immediately appears with the default value as well as the corresponding namespace URI, local name, and prefix when applicable. The implementation may handle default values from other schemas similarly but applications should use Document.normalizeDocument() to guarantee this information is up-to-date. If no attribute with this local name and namespace URI is found, this method has no effect. Per [XML Namespaces] , applications must use the value null as the namespaceURI parameter for methods if they wish to have no namespace.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - The namespace URI of the attribute to remove.",
          "\u003ccode\u003elocalName\u003c/code\u003e - The local name of the attribute to remove."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. \n\u003cbr\u003eNOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \n\u003ccode\u003e\"XML\"\u003c/code\u003e and the language exposed through the Document does not support XML Namespaces (such as [\n\u003ca href\u003d\"http://www.w3.org/TR/1999/REC-html401-19991224/\"\u003eHTML 4.01\u003c/a\u003e])."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Attr",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "namespaceURI",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "localName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributeNodeNS",
      "comment": "Retrieves an Attr node by local name and namespace URI. Per [XML Namespaces] , applications must use the value null as the namespaceURI parameter for methods if they wish to have no namespace.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - The namespace URI of the attribute to retrieve.",
          "\u003ccode\u003elocalName\u003c/code\u003e - The local name of the attribute to retrieve."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \n\u003ccode\u003e\"XML\"\u003c/code\u003e and the language exposed through the Document does not support XML Namespaces (such as [\n\u003ca href\u003d\"http://www.w3.org/TR/1999/REC-html401-19991224/\"\u003eHTML 4.01\u003c/a\u003e])."
        ],
        "return": [
          "The \n\u003ccode\u003eAttr\u003c/code\u003e node with the specified attribute local name and namespace URI or \n\u003ccode\u003enull\u003c/code\u003e if there is no such attribute."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Attr",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "org.w3c.dom.Attr",
            "type": "Class"
          },
          "name": "newAttr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAttributeNodeNS",
      "comment": "Adds a new attribute. If an attribute with that local name and that namespace URI is already present in the element, it is replaced by the new one. Replacing an attribute node by itself has no effect. Per [XML Namespaces] , applications must use the value null as the namespaceURI parameter for methods if they wish to have no namespace.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewAttr\u003c/code\u003e - The \n\u003ccode\u003eAttr\u003c/code\u003e node to add to the attribute list."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - WRONG_DOCUMENT_ERR: Raised if \n\u003ccode\u003enewAttr\u003c/code\u003e was created from a different document than the one that created the element. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. \n\u003cbr\u003eINUSE_ATTRIBUTE_ERR: Raised if \n\u003ccode\u003enewAttr\u003c/code\u003e is already an attribute of another \n\u003ccode\u003eElement\u003c/code\u003e object. The DOM user must explicitly clone \n\u003ccode\u003eAttr\u003c/code\u003e nodes to re-use them in other elements. \n\u003cbr\u003eNOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \n\u003ccode\u003e\"XML\"\u003c/code\u003e and the language exposed through the Document does not support XML Namespaces (such as [\n\u003ca href\u003d\"http://www.w3.org/TR/1999/REC-html401-19991224/\"\u003eHTML 4.01\u003c/a\u003e])."
        ],
        "return": [
          "If the \n\u003ccode\u003enewAttr\u003c/code\u003e attribute replaces an existing attribute with the same local name and namespace URI, the replaced \n\u003ccode\u003eAttr\u003c/code\u003e node is returned, otherwise \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.NodeList",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "namespaceURI",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "localName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getElementsByTagNameNS",
      "comment": "Returns a NodeList of all the descendant Elements with a given local name and namespace URI in document order.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - The namespace URI of the elements to match on. The special value \"*\" matches all namespaces.",
          "\u003ccode\u003elocalName\u003c/code\u003e - The local name of the elements to match on. The special value \"*\" matches all local names."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \n\u003ccode\u003e\"XML\"\u003c/code\u003e and the language exposed through the Document does not support XML Namespaces (such as [\n\u003ca href\u003d\"http://www.w3.org/TR/1999/REC-html401-19991224/\"\u003eHTML 4.01\u003c/a\u003e])."
        ],
        "return": [
          "A new \n\u003ccode\u003eNodeList\u003c/code\u003e object containing all the matched \n\u003ccode\u003eElements\u003c/code\u003e."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasAttribute",
      "comment": "Returns true when an attribute with a given name is specified on this element or has a default value, false otherwise.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the attribute to look for."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if an attribute with the given name is specified on this element or has a default value, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "namespaceURI",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "localName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasAttributeNS",
      "comment": "Returns true when an attribute with a given local name and namespace URI is specified on this element or has a default value, false otherwise. Per [XML Namespaces] , applications must use the value null as the namespaceURI parameter for methods if they wish to have no namespace.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - The namespace URI of the attribute to look for.",
          "\u003ccode\u003elocalName\u003c/code\u003e - The local name of the attribute to look for."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \n\u003ccode\u003e\"XML\"\u003c/code\u003e and the language exposed through the Document does not support XML Namespaces (such as [\n\u003ca href\u003d\"http://www.w3.org/TR/1999/REC-html401-19991224/\"\u003eHTML 4.01\u003c/a\u003e])."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if an attribute with the given local name and namespace URI is specified or has a default value on this element, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.4, DOM Level 2"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.TypeInfo",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSchemaTypeInfo",
      "comment": "The type information associated with this element.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isId",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setIdAttribute",
      "comment": "If the parameter isId is true, this method declares the specified attribute to be a user-determined ID attribute . This affects the value of Attr.isId and the behavior of Document.getElementById, but does not change any schema that may be in use, in particular this does not affect the Attr.schemaTypeInfo of the specified Attr node. Use the value false for the parameter isId to undeclare an attribute for being a user-determined ID attribute. To specify an attribute by local name and namespace URI, use the setIdAttributeNS method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the attribute.",
          "\u003ccode\u003eisId\u003c/code\u003e - Whether the attribute is a of type ID."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. \n\u003cbr\u003eNOT_FOUND_ERR: Raised if the specified node is not an attribute of this element."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "namespaceURI",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "localName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isId",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setIdAttributeNS",
      "comment": "If the parameter isId is true, this method declares the specified attribute to be a user-determined ID attribute . This affects the value of Attr.isId and the behavior of Document.getElementById, but does not change any schema that may be in use, in particular this does not affect the Attr.schemaTypeInfo of the specified Attr node. Use the value false for the parameter isId to undeclare an attribute for being a user-determined ID attribute.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enamespaceURI\u003c/code\u003e - The namespace URI of the attribute.",
          "\u003ccode\u003elocalName\u003c/code\u003e - The local name of the attribute.",
          "\u003ccode\u003eisId\u003c/code\u003e - Whether the attribute is a of type ID."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. \n\u003cbr\u003eNOT_FOUND_ERR: Raised if the specified node is not an attribute of this element."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "org.w3c.dom.Attr",
            "type": "Class"
          },
          "name": "idAttr",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "isId",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setIdAttributeNode",
      "comment": "If the parameter isId is true, this method declares the specified attribute to be a user-determined ID attribute . This affects the value of Attr.isId and the behavior of Document.getElementById, but does not change any schema that may be in use, in particular this does not affect the Attr.schemaTypeInfo of the specified Attr node. Use the value false for the parameter isId to undeclare an attribute for being a user-determined ID attribute.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eidAttr\u003c/code\u003e - The attribute node.",
          "\u003ccode\u003eisId\u003c/code\u003e - Whether the attribute is a of type ID."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. \n\u003cbr\u003eNOT_FOUND_ERR: Raised if the specified node is not an attribute of this element."
        ],
        "since": [
          "1.5, DOM Level 3"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.Element",
  "annotations": [],
  "tagMap": {}
}