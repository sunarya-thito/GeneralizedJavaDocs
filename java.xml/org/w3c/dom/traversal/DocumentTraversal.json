{
  "packageName": "org.w3c.dom.traversal",
  "simpleName": "DocumentTraversal",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "org.w3c.dom.traversal.NodeIterator",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "name": "root",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "whatToShow",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "org.w3c.dom.traversal.NodeFilter",
            "type": "Class"
          },
          "name": "filter",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "entityReferenceExpansion",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createNodeIterator",
      "comment": "Create a new NodeIterator over the subtree rooted at the specified node.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eroot\u003c/code\u003e - The node which will be iterated together with its children. The \n\u003ccode\u003eNodeIterator\u003c/code\u003e is initially positioned just before this node. The \n\u003ccode\u003ewhatToShow\u003c/code\u003e flags and the filter, if any, are not considered when setting this position. The root must not be \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003ewhatToShow\u003c/code\u003e - This flag specifies which node types may appear in the logical view of the tree presented by the \n\u003ccode\u003eNodeIterator\u003c/code\u003e. See the description of \n\u003ccode\u003eNodeFilter\u003c/code\u003e for the set of possible \n\u003ccode\u003eSHOW_\u003c/code\u003e values.These flags can be combined using \n\u003ccode\u003eOR\u003c/code\u003e.",
          "\u003ccode\u003efilter\u003c/code\u003e - The \n\u003ccode\u003eNodeFilter\u003c/code\u003e to be used with this \n\u003ccode\u003eNodeIterator\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e to indicate no filter.",
          "\u003ccode\u003eentityReferenceExpansion\u003c/code\u003e - The value of this flag determines whether entity reference nodes are expanded."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NOT_SUPPORTED_ERR: Raised if the specified \n\u003ccode\u003eroot\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "The newly created \n\u003ccode\u003eNodeIterator\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.traversal.TreeWalker",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "org.w3c.dom.Node",
            "type": "Class"
          },
          "name": "root",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "whatToShow",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "org.w3c.dom.traversal.NodeFilter",
            "type": "Class"
          },
          "name": "filter",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "entityReferenceExpansion",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createTreeWalker",
      "comment": "Create a new TreeWalker over the subtree rooted at the specified node.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eroot\u003c/code\u003e - The node which will serve as the \n\u003ccode\u003eroot\u003c/code\u003e for the \n\u003ccode\u003eTreeWalker\u003c/code\u003e. The \n\u003ccode\u003ewhatToShow\u003c/code\u003e flags and the \n\u003ccode\u003eNodeFilter\u003c/code\u003e are not considered when setting this value; any node type will be accepted as the \n\u003ccode\u003eroot\u003c/code\u003e. The \n\u003ccode\u003ecurrentNode\u003c/code\u003e of the \n\u003ccode\u003eTreeWalker\u003c/code\u003e is initialized to this node, whether or not it is visible. The \n\u003ccode\u003eroot\u003c/code\u003e functions as a stopping point for traversal methods that look upward in the document structure, such as \n\u003ccode\u003eparentNode\u003c/code\u003e and nextNode. The \n\u003ccode\u003eroot\u003c/code\u003e must not be \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003ewhatToShow\u003c/code\u003e - This flag specifies which node types may appear in the logical view of the tree presented by the \n\u003ccode\u003eTreeWalker\u003c/code\u003e. See the description of \n\u003ccode\u003eNodeFilter\u003c/code\u003e for the set of possible \n\u003ccode\u003eSHOW_\u003c/code\u003e values.These flags can be combined using \n\u003ccode\u003eOR\u003c/code\u003e.",
          "\u003ccode\u003efilter\u003c/code\u003e - The \n\u003ccode\u003eNodeFilter\u003c/code\u003e to be used with this \n\u003ccode\u003eTreeWalker\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e to indicate no filter.",
          "\u003ccode\u003eentityReferenceExpansion\u003c/code\u003e - If this flag is false, the contents of \n\u003ccode\u003eEntityReference\u003c/code\u003e nodes are not presented in the logical view."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NOT_SUPPORTED_ERR: Raised if the specified \n\u003ccode\u003eroot\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "The newly created \n\u003ccode\u003eTreeWalker\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.traversal.DocumentTraversal",
  "comment": "\u003ccode\u003eDocumentTraversal\u003c/code\u003e contains methods that create \n\u003ccode\u003eNodeIterators\u003c/code\u003e and \n\u003ccode\u003eTreeWalkers\u003c/code\u003e to traverse a node and its children in document order (depth first, pre-order traversal, which is equivalent to the order in which the start tags occur in the text representation of the document). In DOMs which support the Traversal feature, \n\u003ccode\u003eDocumentTraversal\u003c/code\u003e will be implemented by the same objects that implement the Document interface. \n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113\"\u003eDocument Object Model (DOM) Level 2 Traversal and Range Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "9, DOM Level 2"
    ]
  }
}