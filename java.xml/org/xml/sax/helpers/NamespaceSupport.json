{
  "packageName": "org.xml.sax.helpers",
  "simpleName": "NamespaceSupport",
  "moduleName": "java.xml",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "XMLNS",
      "comment": "The XML Namespace URI as a constant. The value is http://www.w3.org/XML/1998/namespace as defined in the \"Namespaces in XML\" * recommendation. This is the Namespace URI that is automatically mapped to the \"xml\" prefix.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.xml.sax.helpers.NamespaceSupport.XMLNS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NSDECL",
      "comment": "The namespace declaration URI as a constant. The value is http://www.w3.org/xmlns/2000/, as defined in a backwards-incompatible erratum to the \"Namespaces in XML\" recommendation. Because that erratum postdated SAX2, SAX2 defaults to the original recommendation, and does not normally use this URI. This is the Namespace URI that is optionally applied to xmlns and xmlns:* attributes, which are used to declare namespaces.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#setNamespaceDeclUris(boolean)\"\u003e\u003ccode\u003esetNamespaceDeclUris(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#isNamespaceDeclUris()\"\u003e\u003ccode\u003eisNamespaceDeclUris()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.xml.sax.helpers.NamespaceSupport.NSDECL\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5, SAX 2.1alpha"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reset",
      "comment": "Reset this Namespace support object for reuse. It is necessary to invoke this method before reusing the Namespace support object for a new session. If namespace declaration URIs are to be supported, that flag must also be set to a non-default value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#setNamespaceDeclUris(boolean)\"\u003e\u003ccode\u003esetNamespaceDeclUris(boolean)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "pushContext",
      "comment": "Start a new Namespace context. The new context will automatically inherit the declarations of its parent context, but it will also keep track of which declarations were made within this context. Event callback code should start a new context once per element. This means being ready to call this in either of two places. For elements that don\u0027t include namespace declarations, the ContentHandler.startElement() callback is the right place. For elements with such a declaration, it\u0027d done in the first ContentHandler.startPrefixMapping() callback. A boolean flag can be used to track whether a context has been started yet. When either of those methods is called, it checks the flag to see if a new context needs to be started. If so, it starts the context and sets the flag. After ContentHandler.startElement() does that, it always clears the flag. Normally, SAX drivers would push a new context at the beginning of each XML element. Then they perform a first pass over the attributes to process all namespace declarations, making ContentHandler.startPrefixMapping() callbacks. Then a second pass is made, to determine the namespace-qualified names for all attributes and for the element name. Finally all the information for the ContentHandler.startElement() callback is available, so it can then be made. The Namespace support object always starts with a base context already in force: in this context, only the \"xml\" prefix is declared.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/ContentHandler.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eContentHandler\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#popContext()\"\u003e\u003ccode\u003epopContext()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "popContext",
      "comment": "Revert to the previous Namespace context. Normally, you should pop the context at the end of each XML element. After popping the context, all Namespace prefix mappings that were previously in force are restored. You must not attempt to declare additional Namespace prefixes after popping a context, unless you push another context first.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#pushContext()\"\u003e\u003ccode\u003epushContext()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "uri"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "declarePrefix",
      "comment": "Declare a Namespace prefix. All prefixes must be declared before they are referenced. For example, a SAX driver (parser) would scan an element\u0027s attributes in two passes: first for namespace declarations, then a second pass using processName() to interpret prefixes against (potentially redefined) prefixes. This method declares a prefix in the current Namespace context; the prefix will remain in force until this context is popped, unless it is shadowed in a descendant context. To declare the default element Namespace, use the empty string as the prefix. Note that there is an asymmetry in this library: getPrefix will not return the \"\" prefix, even if you have declared a default element namespace. To check for a default namespace, you have to look it up explicitly using getURI. This asymmetry exists to make it easier to look up prefixes for attribute names, where the default prefix is not allowed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#processName(java.lang.String,java.lang.String%5B%5D,boolean)\"\u003e\u003ccode\u003eprocessName(java.lang.String, java.lang.String[], boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#getURI(java.lang.String)\"\u003e\u003ccode\u003egetURI(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#getPrefix(java.lang.String)\"\u003e\u003ccode\u003egetPrefix(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - The prefix to declare, or the empty string to indicate the default element namespace. This may never have the value \"xml\" or \"xmlns\".",
          "\u003ccode\u003euri\u003c/code\u003e - The Namespace URI to associate with the prefix."
        ],
        "return": [
          "true if the prefix was legal, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "qName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "parts"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isAttribute"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "processName",
      "comment": "Process a raw XML qualified name, after all declarations in the current context have been handled by declarePrefix(). This method processes a raw XML qualified name in the current context by removing the prefix and looking it up among the prefixes currently declared. The return value will be the array supplied by the caller, filled in as follows: parts[0] The Namespace URI, or an empty string if none is in use. parts[1] The local name (without prefix). parts[2] The original raw name. All of the strings in the array will be internalized. If the raw name has a prefix that has not been declared, then the return value will be null. Note that attribute names are processed differently than element names: an unprefixed element name will receive the default Namespace (if any), while an unprefixed attribute name will not.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#declarePrefix(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003edeclarePrefix(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#intern()\"\u003e\u003ccode\u003eString.intern()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eqName\u003c/code\u003e - The XML qualified name to be processed.",
          "\u003ccode\u003eparts\u003c/code\u003e - An array supplied by the caller, capable of holding at least three members.",
          "\u003ccode\u003eisAttribute\u003c/code\u003e - A flag indicating whether this is an attribute name (true) or an element name (false)."
        ],
        "return": [
          "The supplied array holding three internalized strings representing the Namespace URI (or empty string), the local name, and the XML qualified name; or null if there is an undeclared prefix."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getURI",
      "comment": "Look up a prefix and get the currently-mapped Namespace URI. This method looks up the prefix in the current context. Use the empty string (\"\") for the default Namespace.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#getPrefix(java.lang.String)\"\u003e\u003ccode\u003egetPrefix(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#getPrefixes()\"\u003e\u003ccode\u003egetPrefixes()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - The prefix to look up."
        ],
        "return": [
          "The associated Namespace URI, or null if the prefix is undeclared in this context."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPrefixes",
      "comment": "Return an enumeration of all prefixes whose declarations are active in the current context. This includes declarations from parent contexts that have not been overridden. Note: if there is a default prefix, it will not be returned in this enumeration; check for the default prefix using the getURI with an argument of \"\".",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#getDeclaredPrefixes()\"\u003e\u003ccode\u003egetDeclaredPrefixes()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#getURI(java.lang.String)\"\u003e\u003ccode\u003egetURI(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "An enumeration of prefixes (never empty)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "uri"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPrefix",
      "comment": "Return one of the prefixes mapped to a Namespace URI. If more than one prefix is currently mapped to the same URI, this method will make an arbitrary selection; if you want all of the prefixes, use the getPrefixes() method instead. Note: this will never return the empty (default) prefix; to check for a default prefix, use the getURI method with an argument of \"\".",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#getPrefixes(java.lang.String)\"\u003e\u003ccode\u003egetPrefixes(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#getURI(java.lang.String)\"\u003e\u003ccode\u003egetURI(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - the namespace URI"
        ],
        "return": [
          "one of the prefixes currently mapped to the URI supplied, or null if none is mapped or if the URI is assigned to the default namespace"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "uri"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPrefixes",
      "comment": "Return an enumeration of all prefixes for a given URI whose declarations are active in the current context. This includes declarations from parent contexts that have not been overridden. This method returns prefixes mapped to a specific Namespace URI. The xml: prefix will be included. If you want only one prefix that\u0027s mapped to the Namespace URI, and you don\u0027t care which one you get, use the getPrefix method instead. Note: the empty (default) prefix is never included in this enumeration; to check for the presence of a default Namespace, use the getURI method with an argument of \"\".",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#getPrefix(java.lang.String)\"\u003e\u003ccode\u003egetPrefix(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#getDeclaredPrefixes()\"\u003e\u003ccode\u003egetDeclaredPrefixes()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#getURI(java.lang.String)\"\u003e\u003ccode\u003egetURI(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - The Namespace URI."
        ],
        "return": [
          "An enumeration of prefixes (never empty)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredPrefixes",
      "comment": "Return an enumeration of all prefixes declared in this context. The empty (default) prefix will be included in this enumeration; note that this behaviour differs from that of getPrefix(java.lang.String) and getPrefixes().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#getPrefixes()\"\u003e\u003ccode\u003egetPrefixes()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#getURI(java.lang.String)\"\u003e\u003ccode\u003egetURI(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "An enumeration of all prefixes declared in this context."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNamespaceDeclUris",
      "comment": "Controls whether namespace declaration attributes are placed into the NSDECL namespace by processName(). This may only be changed before any contexts have been pushed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - a flag indicating whether namespace declaration attributes are placed into the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/NamespaceSupport.html#NSDECL\"\u003e\u003ccode\u003eNSDECL\u003c/code\u003e\u003c/a\u003e namespace"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - when attempting to set this after any context has been pushed."
        ],
        "since": [
          "1.5, SAX 2.1alpha"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isNamespaceDeclUris",
      "comment": "Returns true if namespace declaration attributes are placed into a namespace. This behavior is not the default.",
      "tagMap": {
        "return": [
          "true if namespace declaration attributes are placed into a namespace, false otherwise"
        ],
        "since": [
          "1.5, SAX 2.1alpha"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a new Namespace support object.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "org.xml.sax.helpers.NamespaceSupport",
  "comment": "Encapsulate Namespace logic for use by applications using SAX, or internally by SAX drivers. \n\u003cp\u003eThis class encapsulates the logic of Namespace processing: it tracks the declarations currently in force for each context and automatically processes qualified XML names into their Namespace parts; it can also be used in reverse for generating XML qnames from Namespaces.\u003c/p\u003e \n\u003cp\u003eNamespace support objects are reusable, but the reset method must be invoked between each session.\u003c/p\u003e \n\u003cp\u003eHere is a simple session:\u003c/p\u003e \n\u003cpre\u003e String parts[] \u003d new String[3];\n NamespaceSupport support \u003d new NamespaceSupport();\n\n support.pushContext();\n support.declarePrefix(\"\", \"http://www.w3.org/1999/xhtml\");\n support.declarePrefix(\"dc\", \"http://www.purl.org/dc#\");\n\n parts \u003d support.processName(\"p\", parts, false);\n System.out.println(\"Namespace URI: \" + parts[0]);\n System.out.println(\"Local name: \" + parts[1]);\n System.out.println(\"Raw name: \" + parts[2]);\n\n parts \u003d support.processName(\"dc:title\", parts, false);\n System.out.println(\"Namespace URI: \" + parts[0]);\n System.out.println(\"Local name: \" + parts[1]);\n System.out.println(\"Raw name: \" + parts[2]);\n\n support.popContext();\n \u003c/pre\u003e \n\u003cp\u003eNote that this class is optimized for the use case where most elements do not contain Namespace declarations: if the same prefix/URI mapping is repeated for each context (for example), this class will be somewhat less efficient.\u003c/p\u003e \n\u003cp\u003eAlthough SAX drivers (parsers) may choose to use this class to implement namespace handling, they are not required to do so. Applications must track namespace information themselves if they want to use namespace information.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4, SAX 2.0"
    ]
  }
}