{
  "packageName": "org.xml.sax",
  "simpleName": "AttributeList",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLength",
      "comment": "Return the number of attributes in this list. The SAX parser may provide attributes in any arbitrary order, regardless of the order in which they were declared or specified. The number of attributes may be zero.",
      "tagMap": {
        "return": [
          "The number of attributes in the list."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getName",
      "comment": "Return the name of an attribute in this list (by position). The names must be unique: the SAX parser shall not include the same attribute twice. Attributes without values (those declared #IMPLIED without a value specified in the start tag) will be omitted from the list. If the attribute name has a namespace prefix, the prefix will still be attached.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/AttributeList.html#getLength()\"\u003e\u003ccode\u003egetLength()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - The index of the attribute in the list (starting at 0)."
        ],
        "return": [
          "The name of the indexed attribute, or null if the index is out of range."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getType",
      "comment": "Return the type of an attribute in the list (by position). The attribute type is one of the strings \"CDATA\", \"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\", \"ENTITIES\", or \"NOTATION\" (always in upper case). If the parser has not read a declaration for the attribute, or if the parser does not report attribute types, then it must return the value \"CDATA\" as stated in the XML 1.0 Recommentation (clause 3.3.3, \"Attribute-Value Normalization\"). For an enumerated attribute that is not a notation, the parser will report the type as \"NMTOKEN\".",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/AttributeList.html#getLength()\"\u003e\u003ccode\u003egetLength()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/AttributeList.html#getType(java.lang.String)\"\u003e\u003ccode\u003egetType(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - The index of the attribute in the list (starting at 0)."
        ],
        "return": [
          "The attribute type as a string, or null if the index is out of range."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getValue",
      "comment": "Return the value of an attribute in the list (by position). If the attribute value is a list of tokens (IDREFS, ENTITIES, or NMTOKENS), the tokens will be concatenated into a single string separated by whitespace.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/AttributeList.html#getLength()\"\u003e\u003ccode\u003egetLength()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/AttributeList.html#getValue(java.lang.String)\"\u003e\u003ccode\u003egetValue(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - The index of the attribute in the list (starting at 0)."
        ],
        "return": [
          "The attribute value as a string, or null if the index is out of range."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getType",
      "comment": "Return the type of an attribute in the list (by name). The return value is the same as the return value for getType(int). If the attribute name has a namespace prefix in the document, the application must include the prefix here.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/AttributeList.html#getType(int)\"\u003e\u003ccode\u003egetType(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the attribute."
        ],
        "return": [
          "The attribute type as a string, or null if no such attribute exists."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getValue",
      "comment": "Return the value of an attribute in the list (by name). The return value is the same as the return value for getValue(int). If the attribute name has a namespace prefix in the document, the application must include the prefix here.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/AttributeList.html#getValue(int)\"\u003e\u003ccode\u003egetValue(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the attribute to return"
        ],
        "return": [
          "The attribute value as a string, or null if no such attribute exists."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.xml.sax.AttributeList",
  "comment": "Interface for an element\u0027s attribute specifications. \n\u003cp\u003eThis is the original SAX1 interface for reporting an element\u0027s attributes. Unlike the new \u003ca href\u003d\"Attributes.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eAttributes\u003c/code\u003e\u003c/a\u003e interface, it does not support Namespace-related information. \u003c/p\u003e\n\u003cp\u003eWhen an attribute list is supplied as part of a \u003ca href\u003d\"DocumentHandler.html#startElement(java.lang.String,org.xml.sax.AttributeList)\"\u003e\u003ccode\u003estartElement\u003c/code\u003e\u003c/a\u003e event, the list will return valid results only during the scope of the event; once the event handler returns control to the parser, the attribute list is invalid. To save a persistent copy of the attribute list, use the SAX1 \u003ca href\u003d\"helpers/AttributeListImpl.html\" title\u003d\"class in org.xml.sax.helpers\"\u003e\u003ccode\u003eAttributeListImpl\u003c/code\u003e\u003c/a\u003e helper class. \u003c/p\u003e\n\u003cp\u003eAn attribute list includes only attributes that have been specified or defaulted: #IMPLIED attributes will not be included. \u003c/p\u003e\n\u003cp\u003eThere are two ways for the SAX application to obtain information from the AttributeList. First, it can iterate through the entire list: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n public void startElement (String name, AttributeList atts) {\n   for (int i \u003d 0; i \u0026lt; atts.getLength(); i++) {\n     String name \u003d atts.getName(i);\n     String type \u003d atts.getType(i);\n     String value \u003d atts.getValue(i);\n     [...]\n   }\n }\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e(Note that the result of getLength() will be zero if there are no attributes.) \u003c/p\u003e\n\u003cp\u003eAs an alternative, the application can request the value or type of specific attributes: \u003c/p\u003e\n\u003cpre\u003e public void startElement (String name, AttributeList atts) {\n   String identifier \u003d atts.getValue(\"id\");\n   String label \u003d atts.getValue(\"label\");\n   [...]\n }\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/DocumentHandler.html#startElement(java.lang.String,org.xml.sax.AttributeList)\"\u003e\u003ccode\u003estartElement\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/AttributeListImpl.html\" title\u003d\"class in org.xml.sax.helpers\"\u003e\u003ccode\u003eAttributeListImpl\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4, SAX 1.0"
    ]
  }
}