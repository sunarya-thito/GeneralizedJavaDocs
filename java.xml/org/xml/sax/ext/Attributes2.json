{
  "packageName": "org.xml.sax.ext",
  "simpleName": "Attributes2",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.xml.sax.Attributes",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isDeclared",
      "comment": "Returns false unless the attribute was declared in the DTD. This helps distinguish two kinds of attributes that SAX reports as CDATA: ones that were declared (and hence are usually valid), and those that were not (and which are never valid).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The attribute index (zero-based)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - When the supplied index does not identify an attribute."
        ],
        "return": [
          "true if the attribute was declared in the DTD, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "qName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isDeclared",
      "comment": "Returns false unless the attribute was declared in the DTD. This helps distinguish two kinds of attributes that SAX reports as CDATA: ones that were declared (and hence are usually valid), and those that were not (and which are never valid).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eqName\u003c/code\u003e - The XML qualified (prefixed) name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - When the supplied name does not identify an attribute."
        ],
        "return": [
          "true if the attribute was declared in the DTD, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "uri",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "localName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isDeclared",
      "comment": "Returns false unless the attribute was declared in the DTD. This helps distinguish two kinds of attributes that SAX reports as CDATA: ones that were declared (and hence are usually valid), and those that were not (and which are never valid). Remember that since DTDs do not \"understand\" namespaces, the namespace URI associated with an attribute may not have come from the DTD. The declaration will have applied to the attribute\u0027s qName.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - The Namespace URI, or the empty string if the name has no Namespace URI.",
          "\u003ccode\u003elocalName\u003c/code\u003e - The attribute\u0027s local name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - When the supplied names do not identify an attribute."
        ],
        "return": [
          "true if the attribute was declared in the DTD, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSpecified",
      "comment": "Returns true unless the attribute value was provided by DTD defaulting.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The attribute index (zero-based)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - When the supplied index does not identify an attribute."
        ],
        "return": [
          "true if the value was found in the XML text, false if the value was provided by DTD defaulting."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "uri",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "localName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSpecified",
      "comment": "Returns true unless the attribute value was provided by DTD defaulting. Remember that since DTDs do not \"understand\" namespaces, the namespace URI associated with an attribute may not have come from the DTD. The declaration will have applied to the attribute\u0027s qName.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - The Namespace URI, or the empty string if the name has no Namespace URI.",
          "\u003ccode\u003elocalName\u003c/code\u003e - The attribute\u0027s local name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - When the supplied names do not identify an attribute."
        ],
        "return": [
          "true if the value was found in the XML text, false if the value was provided by DTD defaulting."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "qName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSpecified",
      "comment": "Returns true unless the attribute value was provided by DTD defaulting.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eqName\u003c/code\u003e - The XML qualified (prefixed) name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - When the supplied name does not identify an attribute."
        ],
        "return": [
          "true if the value was found in the XML text, false if the value was provided by DTD defaulting."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.xml.sax.ext.Attributes2",
  "comment": "SAX2 extension to augment the per-attribute information provided through \n\u003ca href\u003d\"../Attributes.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eAttributes\u003c/code\u003e\u003c/a\u003e. If an implementation supports this extension, the attributes provided in \n\u003ca href\u003d\"../ContentHandler.html#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)\"\u003e\u003ccode\u003eContentHandler.startElement() \u003c/code\u003e\u003c/a\u003e will implement this interface, and the \n\u003cem\u003ehttp://xml.org/sax/features/use-attributes2\u003c/em\u003e feature flag will have the value \n\u003cem\u003etrue\u003c/em\u003e. \n\u003cp\u003e XMLReader implementations are not required to support this information, and it is not part of core-only SAX2 distributions.\u003c/p\u003e \n\u003cp\u003eNote that if an attribute was defaulted (\u003cem\u003e!isSpecified()\u003c/em\u003e) it will of necessity also have been declared (\u003cem\u003eisDeclared()\u003c/em\u003e) in the DTD. Similarly if an attribute\u0027s type is anything except CDATA, then it must have been declared. \u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5, SAX 2.0 (extensions 1.1 alpha)"
    ]
  }
}