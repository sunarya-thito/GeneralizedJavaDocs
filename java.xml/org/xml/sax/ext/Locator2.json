{
  "packageName": "org.xml.sax.ext",
  "simpleName": "Locator2",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.xml.sax.Locator",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getXMLVersion",
      "comment": "Returns the version of XML used for the entity. This will normally be the identifier from the current entity\u0027s \u003c?xml version\u003d\u0027...\u0027 ...?\u003e declaration, or be defaulted by the parser.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Identifier for the XML version being used to interpret the entity\u0027s text, or null if that information is not yet available in the current parsing state."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEncoding",
      "comment": "Returns the name of the character encoding for the entity. If the encoding was declared externally (for example, in a MIME Content-Type header), that will be the name returned. Else if there was an \u003c?xml ...encoding\u003d\u0027...\u0027?\u003e declaration at the start of the document, that encoding name will be returned. Otherwise the encoding will been inferred (normally to be UTF-8, or some UTF-16 variant), and that inferred name will be returned. When an InputSource is used to provide an entity\u0027s character stream, this method returns the encoding provided in that input stream. Note that some recent W3C specifications require that text in some encodings be normalized, using Unicode Normalization Form C, before processing. Such normalization must be performed by applications, and would normally be triggered based on the value returned by this method. Encoding names may be those used by the underlying JVM, and comparisons should be case-insensitive.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Name of the character encoding being used to interpret * the entity\u0027s text, or null if this was not provided for a * character stream passed through an InputSource or is otherwise not yet available in the current parsing state."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.xml.sax.ext.Locator2",
  "comment": "SAX2 extension to augment the entity information provided through a \n\u003ca href\u003d\"../Locator.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eLocator\u003c/code\u003e\u003c/a\u003e. If an implementation supports this extension, the Locator provided in \n\u003ca href\u003d\"../ContentHandler.html#setDocumentLocator(org.xml.sax.Locator)\"\u003e\u003ccode\u003eContentHandler.setDocumentLocator() \u003c/code\u003e\u003c/a\u003e will implement this interface, and the \n\u003cem\u003ehttp://xml.org/sax/features/use-locator2\u003c/em\u003e feature flag will have the value \n\u003cem\u003etrue\u003c/em\u003e. \n\u003cp\u003e XMLReader implementations are not required to support this information, and it is not part of core-only SAX2 distributions.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5, SAX 2.0 (extensions 1.1 alpha)"
    ]
  }
}