{
  "packageName": "org.xml.sax",
  "simpleName": "ErrorHandler",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.xml.sax.SAXException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "org.xml.sax.SAXParseException",
            "type": "Class"
          },
          "name": "exception",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "warning",
      "comment": "Receive notification of a warning. SAX parsers will use this method to report conditions that are not errors or fatal errors as defined by the XML recommendation. The default behaviour is to take no action. The SAX parser must continue to provide normal parsing events after invoking this method: it should still be possible for the application to process the document through to the end. Filters may use this method to report other, non-XML warnings as well.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXParseException.html\" title\u003d\"class in org.xml.sax\"\u003e\u003ccode\u003eSAXParseException\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eexception\u003c/code\u003e - The warning information encapsulated in a SAX parse exception."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - Any SAX exception, possibly wrapping another exception."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.xml.sax.SAXException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "org.xml.sax.SAXParseException",
            "type": "Class"
          },
          "name": "exception",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "error",
      "comment": "Receive notification of a recoverable error. This corresponds to the definition of \"error\" in section 1.2 of the W3C XML 1.0 Recommendation. For example, a validating parser would use this callback to report the violation of a validity constraint. The default behaviour is to take no action. The SAX parser must continue to provide normal parsing events after invoking this method: it should still be possible for the application to process the document through to the end. If the application cannot do so, then the parser should report a fatal error even if the XML recommendation does not require it to do so. Filters may use this method to report other, non-XML errors as well.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXParseException.html\" title\u003d\"class in org.xml.sax\"\u003e\u003ccode\u003eSAXParseException\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eexception\u003c/code\u003e - The error information encapsulated in a SAX parse exception."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - Any SAX exception, possibly wrapping another exception."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.xml.sax.SAXException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "org.xml.sax.SAXParseException",
            "type": "Class"
          },
          "name": "exception",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "fatalError",
      "comment": "Receive notification of a non-recoverable, fatal error. As defined in section 1.2 of the W3C XML 1.0 Recommendation, fatal errors are those that would make it impossible for a parser to continue normal processing. These include violation of a well-formedness constraint, invalid encoding, and forbidden structural errors as described in the W3C XML 1.0 Recommendation.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "An application must assume that the parser can no longer perform normal processing after reporting a fatal error and may stop by throwing a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003e\u003ccode\u003eSAXException\u003c/code\u003e\u003c/a\u003e without calling \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/ContentHandler.html#endDocument()\"\u003e\u003ccode\u003eContentHandler.endDocument()\u003c/code\u003e\u003c/a\u003e. In addition, the parser cannot be expected to be able to return accurate information about the logical structure on the rest of the document even if it may be able to resume parsing."
        ],
        "param": [
          "\u003ccode\u003eexception\u003c/code\u003e - The error information encapsulated in a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXParseException.html\" title\u003d\"class in org.xml.sax\"\u003e\u003ccode\u003eSAXParseException\u003c/code\u003e\u003c/a\u003e."
        ],
        "implNote": [
          "After invoking this method, the parser may stop processing by throwing a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003e\u003ccode\u003eSAXException\u003c/code\u003e\u003c/a\u003e, or implement a feature that can direct it to continue after a fatal error. In the later case, it may report events on the rest of the document without any guarantee of correctness."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - if the application chooses to discontinue the parsing"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.xml.sax.ErrorHandler",
  "comment": "Basic interface for SAX error handlers. \n\u003cp\u003eIf a SAX application needs to implement customized error handling, it must implement this interface and then register an instance with the XML reader using the \u003ca href\u003d\"XMLReader.html#setErrorHandler(org.xml.sax.ErrorHandler)\"\u003e\u003ccode\u003esetErrorHandler\u003c/code\u003e\u003c/a\u003e method. The parser will then report all errors and warnings through this interface.\u003c/p\u003e \n\u003cp\u003e\u003cstrong\u003eWARNING:\u003c/strong\u003e If an application does \u003cem\u003enot\u003c/em\u003e register an ErrorHandler, XML parsing errors will go unreported, except that \u003cem\u003eSAXParseException\u003c/em\u003es will be thrown for fatal errors. In order to detect validity errors, an ErrorHandler that does something with \u003ca href\u003d\"#error(org.xml.sax.SAXParseException)\"\u003e\u003ccode\u003eerror()\u003c/code\u003e\u003c/a\u003e calls must be registered.\u003c/p\u003e \n\u003cp\u003eFor XML processing errors, a SAX driver must use this interface in preference to throwing an exception: it is up to the application to decide whether to throw an exception for different types of errors and warnings. Note, however, that there is no requirement that the parser continue to report additional errors after a call to \u003ca href\u003d\"#fatalError(org.xml.sax.SAXParseException)\"\u003e\u003ccode\u003efatalError\u003c/code\u003e\u003c/a\u003e. In other words, a SAX driver class may throw an exception after reporting any fatalError. Also parsers may throw appropriate exceptions for non-XML errors. For example, \u003ca href\u003d\"XMLReader.html#parse(org.xml.sax.InputSource)\"\u003e\u003ccode\u003eXMLReader.parse()\u003c/code\u003e\u003c/a\u003e would throw an IOException for errors accessing entities or the document.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/XMLReader.html#setErrorHandler(org.xml.sax.ErrorHandler)\"\u003e\u003ccode\u003eXMLReader.setErrorHandler(org.xml.sax.ErrorHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXParseException.html\" title\u003d\"class in org.xml.sax\"\u003e\u003ccode\u003eSAXParseException\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4, SAX 1.0"
    ]
  }
}