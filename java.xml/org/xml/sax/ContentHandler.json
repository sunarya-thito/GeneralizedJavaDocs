{
  "packageName": "org.xml.sax",
  "simpleName": "ContentHandler",
  "moduleName": "java.xml",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDocumentLocator",
      "comment": "Receive an object for locating the origin of SAX document events. SAX parsers are strongly encouraged (though not absolutely required) to supply a locator: if it does so, it must supply the locator to the application by invoking this method before invoking any of the other methods in the ContentHandler interface. The locator allows the application to determine the end position of any document-related event, even if the parser is not reporting an error. Typically, the application will use this information for reporting its own errors (such as character content that does not match an application\u0027s business rules). The information returned by the locator is probably not sufficient for use with a search engine. Note that the locator will return correct information only during the invocation SAX event callbacks after startDocument returns and before endDocument is called. The application should not attempt to use it at any other time.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/Locator.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eLocator\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elocator\u003c/code\u003e - an object that can return the location of any SAX document event"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "startDocument",
      "comment": "Receive notification of the beginning of a document. The SAX parser will invoke this method only once, before any other event callbacks (except for setDocumentLocator).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/ContentHandler.html#endDocument()\"\u003e\u003ccode\u003eendDocument()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - any SAX exception, possibly wrapping another exception"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "declaration",
      "comment": "Receives notification of the XML declaration.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation in the SAX API is to do nothing."
        ],
        "param": [
          "\u003ccode\u003eversion\u003c/code\u003e - the version string as in the input document, null if not specified",
          "\u003ccode\u003eencoding\u003c/code\u003e - the encoding string as in the input document, null if not specified",
          "\u003ccode\u003estandalone\u003c/code\u003e - the standalone string as in the input document, null if not specified"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - if the application wants to report an error or interrupt the parsing process"
        ],
        "since": [
          "14"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "endDocument",
      "comment": "Receive notification of the end of a document. This method is invoked by the parser to signal it has reached the end of the document after successfully completing the parsing process. After the event, the parser will return the control to the application.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/ContentHandler.html#startDocument()\"\u003e\u003ccode\u003estartDocument()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "In case of a fatal error, the parser may choose to stop the parsing process with a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003e\u003ccode\u003eSAXException\u003c/code\u003e\u003c/a\u003e, in which case, this method will never be called. Refer to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/ErrorHandler.html#fatalError(org.xml.sax.SAXParseException)\"\u003e\u003ccode\u003eErrorHandler.fatalError(org.xml.sax.SAXParseException)\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - any SAX exception, possibly wrapping another exception"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "startPrefixMapping",
      "comment": "Begin the scope of a prefix-URI Namespace mapping. The information from this event is not necessary for normal Namespace processing: the SAX XML reader will automatically replace prefixes for element and attribute names when the http://xml.org/sax/features/namespaces feature is true (the default). There are cases, however, when applications need to use prefixes in character data or in attribute values, where they cannot safely be expanded automatically; the start/endPrefixMapping event supplies the information to the application to expand prefixes in those contexts itself, if necessary. Note that start/endPrefixMapping events are not guaranteed to be properly nested relative to each other: all startPrefixMapping events will occur immediately before the corresponding startElement event, and all endPrefixMapping events will occur immediately after the corresponding endElement event, but their order is not otherwise guaranteed. There should never be start/endPrefixMapping events for the \"xml\" prefix, since it is predeclared and immutable.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/ContentHandler.html#endPrefixMapping(java.lang.String)\"\u003e\u003ccode\u003eendPrefixMapping(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/ContentHandler.html#startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)\"\u003e\u003ccode\u003estartElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - the Namespace prefix being declared. An empty string is used for the default element namespace, which has no prefix.",
          "\u003ccode\u003euri\u003c/code\u003e - the Namespace URI the prefix is mapped to"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - the client may throw an exception during processing"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "endPrefixMapping",
      "comment": "End the scope of a prefix-URI mapping. See startPrefixMapping for details. These events will always occur immediately after the corresponding endElement event, but the order of endPrefixMapping events is not otherwise guaranteed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/ContentHandler.html#startPrefixMapping(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003estartPrefixMapping(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/ContentHandler.html#endElement(java.lang.String,java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eendElement(java.lang.String, java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix that was being mapped. This is the empty string when a default mapping scope ends."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - the client may throw an exception during processing"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "startElement",
      "comment": "Receive notification of the beginning of an element. The Parser will invoke this method at the beginning of every element in the XML document; there will be a corresponding endElement event for every startElement event (even when the element is empty). All of the element\u0027s content will be reported, in order, before the corresponding endElement event. This event allows up to three name components for each element: the Namespace URI; the local name; and the qualified (prefixed) name. Any or all of these may be provided, depending on the values of the http://xml.org/sax/features/namespaces and the http://xml.org/sax/features/namespace-prefixes properties: the Namespace URI and local name are required when the namespaces property is true (the default), and are optional when the namespaces property is false (if one is specified, both must be); the qualified name is required when the namespace-prefixes property is true, and is optional when the namespace-prefixes property is false (the default). Note that the attribute list provided will contain only attributes with explicit values (specified or defaulted): #IMPLIED attributes will be omitted. The attribute list will contain attributes used for Namespace declarations (xmlns* attributes) only if the http://xml.org/sax/features/namespace-prefixes property is true (it is false by default, and support for a true value is optional). Like characters(), attribute values may have characters that need more than one char value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/ContentHandler.html#endElement(java.lang.String,java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eendElement(java.lang.String, java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/Attributes.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eAttributes\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/helpers/AttributesImpl.html\" title\u003d\"class in org.xml.sax.helpers\"\u003e\u003ccode\u003eAttributesImpl\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - the Namespace URI, or the empty string if the element has no Namespace URI or if Namespace processing is not being performed",
          "\u003ccode\u003elocalName\u003c/code\u003e - the local name (without prefix), or the empty string if Namespace processing is not being performed",
          "\u003ccode\u003eqName\u003c/code\u003e - the qualified name (with prefix), or the empty string if qualified names are not available",
          "\u003ccode\u003eatts\u003c/code\u003e - the attributes attached to the element. If there are no attributes, it shall be an empty Attributes object. The value of this object after startElement returns is undefined"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - any SAX exception, possibly wrapping another exception"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "endElement",
      "comment": "Receive notification of the end of an element. The SAX parser will invoke this method at the end of every element in the XML document; there will be a corresponding startElement event for every endElement event (even when the element is empty). For information on the names, see startElement.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - the Namespace URI, or the empty string if the element has no Namespace URI or if Namespace processing is not being performed",
          "\u003ccode\u003elocalName\u003c/code\u003e - the local name (without prefix), or the empty string if Namespace processing is not being performed",
          "\u003ccode\u003eqName\u003c/code\u003e - the qualified XML name (with prefix), or the empty string if qualified names are not available"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - any SAX exception, possibly wrapping another exception"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "characters",
      "comment": "Receive notification of character data. The Parser will call this method to report each chunk of character data. SAX parsers may return all contiguous character data in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity so that the Locator provides useful information. The application must not attempt to read from the array outside of the specified range. Individual characters may consist of more than one Java char value. There are two important cases where this happens, because characters can\u0027t be represented in just sixteen bits. In one case, characters are represented in a Surrogate Pair, using two special Unicode values. Such characters are in the so-called \"Astral Planes\", with a code point above U+FFFF. A second case involves composite characters, such as a base character combining with one or more accent characters. Your code should not assume that algorithms using char-at-a-time idioms will be working in character units; in some cases they will split characters. This is relevant wherever XML permits arbitrary characters, such as attribute values, processing instruction data, and comments as well as in data reported from this method. It\u0027s also generally relevant whenever Java code manipulates internationalized text; the issue isn\u0027t unique to XML. Note that some parsers will report whitespace in element content using the ignorableWhitespace method rather than this one (validating parsers must do so).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/ContentHandler.html#ignorableWhitespace(char%5B%5D,int,int)\"\u003e\u003ccode\u003eignorableWhitespace(char[], int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/Locator.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eLocator\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the characters from the XML document",
          "\u003ccode\u003estart\u003c/code\u003e - the start position in the array",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters to read from the array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - any SAX exception, possibly wrapping another exception"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "ignorableWhitespace",
      "comment": "Receive notification of ignorable whitespace in element content. Validating Parsers must use this method to report each chunk of whitespace in element content (see the W3C XML 1.0 recommendation, section 2.10): non-validating parsers may also use this method if they are capable of parsing and using content models. SAX parsers may return all contiguous whitespace in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity, so that the Locator provides useful information. The application must not attempt to read from the array outside of the specified range.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/ContentHandler.html#characters(char%5B%5D,int,int)\"\u003e\u003ccode\u003echaracters(char[], int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the characters from the XML document",
          "\u003ccode\u003estart\u003c/code\u003e - the start position in the array",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters to read from the array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - any SAX exception, possibly wrapping another exception"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "processingInstruction",
      "comment": "Receive notification of a processing instruction. The Parser will invoke this method once for each processing instruction found: note that processing instructions may occur before or after the main document element. A SAX parser must never report an XML declaration (XML 1.0, section 2.8) or a text declaration (XML 1.0, section 4.3.1) using this method. Like characters(), processing instruction data may have characters that need more than one char value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the processing instruction target",
          "\u003ccode\u003edata\u003c/code\u003e - the processing instruction data, or null if none was supplied. The data does not include any whitespace separating it from the target"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - any SAX exception, possibly wrapping another exception"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "skippedEntity",
      "comment": "Receive notification of a skipped entity. This is not called for entity references within markup constructs such as element start tags or markup declarations. (The XML recommendation requires reporting skipped external entities. SAX also reports internal entity expansion/non-expansion, except within markup constructs.) The Parser will invoke this method each time the entity is skipped. Non-validating processors may skip entities if they have not seen the declarations (because, for example, the entity was declared in an external DTD subset). All processors may skip external entities, depending on the values of the http://xml.org/sax/features/external-general-entities and the http://xml.org/sax/features/external-parameter-entities properties.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the skipped entity. If it is a parameter entity, the name will begin with \u0027%\u0027, and if it is the external DTD subset, it will be the string \"[dtd]\""
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/SAXException.html\" title\u003d\"class in org.xml.sax\"\u003eSAXException\u003c/a\u003e\u003c/code\u003e - any SAX exception, possibly wrapping another exception"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.xml.sax.ContentHandler",
  "comment": "Receive notification of the logical content of a document. \n\u003cp\u003eThis is the main interface that most SAX applications implement: if the application needs to be informed of basic parsing events, it implements this interface and registers an instance with the SAX parser using the \u003ca href\u003d\"XMLReader.html#setContentHandler(org.xml.sax.ContentHandler)\"\u003e\u003ccode\u003esetContentHandler\u003c/code\u003e\u003c/a\u003e method. The parser uses the instance to report basic document-related events like the start and end of elements and character data.\u003c/p\u003e \n\u003cp\u003eThe order of events in this interface is very important, and mirrors the order of information in the document itself. For example, all of an element\u0027s content (character data, processing instructions, and/or subelements) will appear, in order, between the startElement event and the corresponding endElement event.\u003c/p\u003e \n\u003cp\u003eThis interface is similar to the now-deprecated SAX 1.0 DocumentHandler interface, but it adds support for Namespaces and for reporting skipped entities (in non-validating XML processors).\u003c/p\u003e \n\u003cp\u003eImplementors should note that there is also a \u003ccode\u003eContentHandler\u003c/code\u003e class in the \u003ccode\u003ejava.net\u003c/code\u003e package; that means that it\u0027s probably a bad idea to do\u003c/p\u003e \n\u003cpre\u003eimport java.net.*;\n import org.xml.sax.*;\n \u003c/pre\u003e \n\u003cp\u003eIn fact, \"import ...*\" is usually a sign of sloppy programming anyway, so the user should consider this a feature rather than a bug.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/XMLReader.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eXMLReader\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/DTDHandler.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eDTDHandler\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/xml/sax/ErrorHandler.html\" title\u003d\"interface in org.xml.sax\"\u003e\u003ccode\u003eErrorHandler\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4, SAX 2.0"
    ]
  }
}