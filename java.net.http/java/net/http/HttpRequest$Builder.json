{
  "packageName": "java.net.http",
  "simpleName": "Builder",
  "moduleName": "java.net.http",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.net.http.HttpRequest$Builder",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "uri",
      "comment": "Sets this HttpRequest\u0027s request URI.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - the request URI"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eURI\u003c/code\u003e scheme is not supported"
        ],
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpRequest$Builder",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "expectContinue",
      "comment": "Requests the server to acknowledge the request before sending the body. This is disabled by default. If enabled, the server is requested to send an error response or a 100 Continue response before the client sends the request body. This means the request publisher for the request will not be invoked until this interim response is received.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eenable\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if Expect continue to be sent"
        ],
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpRequest$Builder",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "version",
      "comment": "Sets the preferred HttpClient.Version for this request. The corresponding HttpResponse should be checked for the version that was actually used. If the version is not set in a request, then the version requested will be that of the sending HttpClient.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eversion\u003c/code\u003e - the HTTP protocol version requested"
        ],
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpRequest$Builder",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "header",
      "comment": "Adds the given name value pair to the set of headers for this request. The given value is added to the list of values for that name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the header name",
          "\u003ccode\u003evalue\u003c/code\u003e - the header value"
        ],
        "implNote": [
          "An implementation may choose to restrict some header names or values, as the HTTP Client may determine their value itself. For example, \"Content-Length\", which will be determined by the request Publisher. In such a case, an implementation of \n\u003ccode\u003eHttpRequest.Builder\u003c/code\u003e may choose to throw an \n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e if such a header is passed to the builder."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the header name or value is not valid, see \n\u003ca href\u003d\"https://tools.ietf.org/html/rfc7230#section-3.2\"\u003e RFC 7230 section-3.2\u003c/a\u003e, or the header name or value is restricted by the implementation."
        ],
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpRequest$Builder",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "headers",
      "comment": "Adds the given name value pairs to the set of headers for this request. The supplied String instances must alternate as header names and header values. To add several values to the same name then the same name must be supplied with each new value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eheaders\u003c/code\u003e - the list of name value pairs"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if there are an odd number of parameters, or if a header name or value is not valid, see \n\u003ca href\u003d\"https://tools.ietf.org/html/rfc7230#section-3.2\"\u003e RFC 7230 section-3.2\u003c/a\u003e, or a header name or value is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpRequest.Builder.html#header(java.lang.String,java.lang.String)\"\u003erestricted\u003c/a\u003e by the implementation."
        ],
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpRequest$Builder",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "timeout",
      "comment": "Sets a timeout for this request. If the response is not received within the specified timeout then an HttpTimeoutException is thrown from HttpClient::send or HttpClient::sendAsync completes exceptionally with an HttpTimeoutException. The effect of not setting a timeout is the same as setting an infinite Duration, i.e. block forever.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - the timeout duration"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the duration is non-positive"
        ],
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpRequest$Builder",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setHeader",
      "comment": "Sets the given name value pair to the set of headers for this request. This overwrites any previously set values for name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the header name",
          "\u003ccode\u003evalue\u003c/code\u003e - the header value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the header name or value is not valid, see \n\u003ca href\u003d\"https://tools.ietf.org/html/rfc7230#section-3.2\"\u003e RFC 7230 section-3.2\u003c/a\u003e, or the header name or value is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpRequest.Builder.html#header(java.lang.String,java.lang.String)\"\u003erestricted\u003c/a\u003e by the implementation."
        ],
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpRequest$Builder",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "GET",
      "comment": "Sets the request method of this builder to GET. This is the default.",
      "annotations": [],
      "tagMap": {
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpRequest$Builder",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "POST",
      "comment": "Sets the request method of this builder to POST and sets its request body publisher to the given value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebodyPublisher\u003c/code\u003e - the body publisher"
        ],
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpRequest$Builder",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "PUT",
      "comment": "Sets the request method of this builder to PUT and sets its request body publisher to the given value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebodyPublisher\u003c/code\u003e - the body publisher"
        ],
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpRequest$Builder",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "DELETE",
      "comment": "Sets the request method of this builder to DELETE.",
      "annotations": [],
      "tagMap": {
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpRequest$Builder",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "method",
      "comment": "Sets the request method and request body of this builder to the given values.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpRequest.BodyPublishers.html#noBody()\"\u003e\u003ccode\u003enoBody\u003c/code\u003e\u003c/a\u003e request body publisher can be used where no request body is required or appropriate. Whether a method is restricted, or not, is implementation specific. For example, some implementations may choose to restrict the \n\u003ccode\u003eCONNECT\u003c/code\u003e method."
        ],
        "param": [
          "\u003ccode\u003emethod\u003c/code\u003e - the method to use",
          "\u003ccode\u003ebodyPublisher\u003c/code\u003e - the body publisher"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the method name is not valid, see \n\u003ca href\u003d\"https://tools.ietf.org/html/rfc7230#section-3.1.1\"\u003e RFC 7230 section-3.1.1\u003c/a\u003e, or the method is restricted by the implementation."
        ],
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpRequest",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "build",
      "comment": "Builds and returns an HttpRequest.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if a URI has not been set"
        ],
        "return": [
          "a new \n\u003ccode\u003eHttpRequest\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpRequest$Builder",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "copy",
      "comment": "Returns an exact duplicate copy of this Builder based on current state. The new builder can then be modified independently of this builder.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an exact copy of this builder"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "java.net.http.HttpRequest$Builder",
  "comment": "A builder of \n\u003ca href\u003d\"HttpRequest.html\" title\u003d\"class in java.net.http\"\u003eHTTP requests\u003c/a\u003e. \n\u003cp\u003e Instances of \u003ccode\u003eHttpRequest.Builder\u003c/code\u003e are created by calling \u003ca href\u003d\"HttpRequest.html#newBuilder()\"\u003e\u003ccode\u003eHttpRequest.newBuilder()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"HttpRequest.html#newBuilder(java.net.URI)\"\u003e\u003ccode\u003eHttpRequest.newBuilder(URI)\u003c/code\u003e\u003c/a\u003e, or \u003ca href\u003d\"HttpRequest.html#newBuilder(java.net.http.HttpRequest,java.util.function.BiPredicate)\"\u003e\u003ccode\u003eHttpRequest.newBuilder(HttpRequest, BiPredicate)\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e The builder can be used to configure per-request state, such as: the request URI, the request method (default is GET unless explicitly set), specific request headers, etc. Each of the setter methods modifies the state of the builder and returns the same instance. The methods are not synchronized and should not be called from multiple threads without external synchronization. The \u003ca href\u003d\"#build()\"\u003e\u003ccode\u003ebuild\u003c/code\u003e\u003c/a\u003e method returns a new \u003ccode\u003eHttpRequest\u003c/code\u003e each time it is invoked. Once built an \u003ccode\u003e HttpRequest\u003c/code\u003e is immutable, and can be sent multiple times. \u003c/p\u003e\n\u003cp\u003e Note, that not all request headers may be set by user code. Some are restricted for security reasons and others such as the headers relating to authentication, redirection and cookie management may be managed by specific APIs rather than through directly user set headers.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "11"
    ]
  }
}