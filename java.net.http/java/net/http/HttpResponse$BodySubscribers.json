{
  "packageName": "java.net.http",
  "simpleName": "BodySubscribers",
  "moduleName": "java.net.http",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.Flow$Subscriber",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "java.util.List",
                    "parameters": [
                      {
                        "name": "java.nio.ByteBuffer",
                        "type": "Class"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "subscriber"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fromSubscriber",
      "comment": "Returns a body subscriber that forwards all response body to the given Flow.Subscriber. The completion stage of the returned body subscriber completes after one of the given subscribers onComplete or onError has been invoked.",
      "tagMap": {
        "apiNote": [
          "This method can be used as an adapter between \n\u003ccode\u003e BodySubscriber\u003c/code\u003e and \n\u003ccode\u003eFlow.Subscriber\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003esubscriber\u003c/code\u003e - the subscriber"
        ],
        "return": [
          "a body subscriber"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "S",
            "type": "Class"
          },
          "field": {
            "name": "subscriber"
          }
        },
        {
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "S",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "finisher"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "S",
          "upperBounds": [
            {
              "name": "java.util.concurrent.Flow$Subscriber",
              "parameters": [
                {
                  "lowerBounds": [
                    {
                      "name": "java.util.List",
                      "parameters": [
                        {
                          "name": "java.nio.ByteBuffer",
                          "type": "Class"
                        }
                      ],
                      "type": "Class"
                    }
                  ],
                  "type": "Wildcard"
                }
              ],
              "type": "Class"
            }
          ],
          "type": "Variable"
        },
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fromSubscriber",
      "comment": "Returns a body subscriber that forwards all response body to the given Flow.Subscriber. The completion stage of the returned body subscriber completes after one of the given subscribers onComplete or onError has been invoked. The given finisher function is applied after the given subscriber\u0027s onComplete has been invoked. The finisher function is invoked with the given subscriber, and returns a value that is set as the response\u0027s body.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eS\u003c/code\u003e - the type of the Subscriber",
          "\u003ccode\u003eT\u003c/code\u003e - the type of the response body"
        ],
        "apiNote": [
          "This method can be used as an adapter between \n\u003ccode\u003e BodySubscriber\u003c/code\u003e and \n\u003ccode\u003eFlow.Subscriber\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003esubscriber\u003c/code\u003e - the subscriber",
          "\u003ccode\u003efinisher\u003c/code\u003e - a function to be applied after the subscriber has completed"
        ],
        "return": [
          "a body subscriber"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.Flow$Subscriber",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "java.lang.String",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "subscriber"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fromLineSubscriber",
      "comment": "Returns a body subscriber that forwards all response body to the given Flow.Subscriber, line by line. The completion stage of the returned body subscriber completes after one of the given subscribers onComplete or onError has been invoked. Bytes are decoded using the UTF-8 charset, and lines are delimited in the manner of BufferedReader.readLine().",
      "tagMap": {
        "apiNote": [
          "This method can be used as an adapter between \n\u003ccode\u003e BodySubscriber\u003c/code\u003e and \n\u003ccode\u003eFlow.Subscriber\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003esubscriber\u003c/code\u003e - the subscriber"
        ],
        "implNote": [
          "This is equivalent to calling \n\u003cpre\u003e\u003ccode\u003e\n      fromLineSubscriber(subscriber, s -\u0026gt; null, StandardCharsets.UTF_8, null)\n \u003c/code\u003e\u003c/pre\u003e"
        ],
        "return": [
          "a body subscriber"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "S",
            "type": "Class"
          },
          "field": {
            "name": "subscriber"
          }
        },
        {
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "S",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "finisher"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "charset"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "lineSeparator"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "S",
          "upperBounds": [
            {
              "name": "java.util.concurrent.Flow$Subscriber",
              "parameters": [
                {
                  "lowerBounds": [
                    {
                      "name": "java.lang.String",
                      "type": "Class"
                    }
                  ],
                  "type": "Wildcard"
                }
              ],
              "type": "Class"
            }
          ],
          "type": "Variable"
        },
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fromLineSubscriber",
      "comment": "Returns a body subscriber that forwards all response body to the given Flow.Subscriber, line by line. The completion stage of the returned body subscriber completes after one of the given subscribers onComplete or onError has been invoked. The given finisher function is applied after the given subscriber\u0027s onComplete has been invoked. The finisher function is invoked with the given subscriber, and returns a value that is set as the response\u0027s body.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eS\u003c/code\u003e - the type of the Subscriber",
          "\u003ccode\u003eT\u003c/code\u003e - the type of the response body"
        ],
        "apiNote": [
          "This method can be used as an adapter between \n\u003ccode\u003e BodySubscriber\u003c/code\u003e and \n\u003ccode\u003eFlow.Subscriber\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003esubscriber\u003c/code\u003e - the subscriber",
          "\u003ccode\u003efinisher\u003c/code\u003e - a function to be applied after the subscriber has completed",
          "\u003ccode\u003echarset\u003c/code\u003e - a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharset\u003c/code\u003e\u003c/a\u003e to decode the bytes",
          "\u003ccode\u003elineSeparator\u003c/code\u003e - an optional line separator: can be \n\u003ccode\u003enull\u003c/code\u003e, in which case lines will be delimited in the manner of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html#readLine()\"\u003e\u003ccode\u003eBufferedReader.readLine()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the supplied \n\u003ccode\u003elineSeparator\u003c/code\u003e is the empty string"
        ],
        "return": [
          "a body subscriber"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "charset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofString",
      "comment": "Returns a body subscriber which stores the response body as a String converted using the given Charset. The HttpResponse using this subscriber is available after the entire response has been read.",
      "tagMap": {
        "param": [
          "\u003ccode\u003echarset\u003c/code\u003e - the character set to convert the String with"
        ],
        "return": [
          "a body subscriber"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofByteArray",
      "comment": "Returns a BodySubscriber which stores the response body as a byte array. The HttpResponse using this subscriber is available after the entire response has been read.",
      "tagMap": {
        "return": [
          "a body subscriber"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "java.nio.file.Path",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        },
        {
          "type": {
            "name": "java.nio.file.OpenOption",
            "type": "Class"
          },
          "field": {
            "name": "openOptions"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofFile",
      "comment": "Returns a BodySubscriber which stores the response body in a file opened with the given options and name. The file will be opened with the given options using FileChannel.open just before the body is read. Any exception thrown will be returned or thrown from HttpClient::send or HttpClient::sendAsync as appropriate. The HttpResponse using this subscriber is available after the entire response has been read. In the case of the default file system provider, security manager permission checks are performed in this factory method, when the BodySubscriber is created. Otherwise, permission checks may be performed asynchronously against the caller\u0027s context at file access time. Care must be taken that the BodySubscriber is not shared with untrusted code.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the file to store the body in",
          "\u003ccode\u003eopenOptions\u003c/code\u003e - the list of options to open the file with"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if an invalid set of open options are specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - in the case of the default file system provider, and a security manager is installed, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e is invoked to check write access to the given file"
        ],
        "return": [
          "a body subscriber"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "java.nio.file.Path",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofFile",
      "comment": "Returns a BodySubscriber which stores the response body in a file opened with the given name. Equivalent to: ofFile(file, CREATE, WRITE) In the case of the default file system provider, security manager permission checks are performed in this factory method, when the BodySubscriber is created. Otherwise, permission checks may be performed asynchronously against the caller\u0027s context at file access time. Care must be taken that the BodySubscriber is not shared with untrusted code.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the file to store the body in"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - in the case of the default file system provider, and a security manager is installed, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e is invoked to check write access to the given file"
        ],
        "return": [
          "a body subscriber"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "java.util.Optional",
                "parameters": [
                  {
                    "name": "byte",
                    "type": "Class",
                    "arrayDimensions": [
                      {}
                    ]
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "consumer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofByteArrayConsumer",
      "comment": "Returns a BodySubscriber which provides the incoming body data to the provided Consumer of Optional\u003cbyte[]\u003e. Each call to Consumer.accept() will contain a non empty Optional, except for the final invocation after all body data has been read, when the Optional will be empty. The HttpResponse using this subscriber is available after the entire response has been read.",
      "tagMap": {
        "apiNote": [
          "This subscriber is not flow controlled. Therefore, the supplied consumer must be able to process whatever amount of data is delivered in a timely fashion."
        ],
        "param": [
          "\u003ccode\u003econsumer\u003c/code\u003e - a Consumer of byte arrays"
        ],
        "return": [
          "a BodySubscriber"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "java.io.InputStream",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofInputStream",
      "comment": "Returns a BodySubscriber which streams the response body as an InputStream. The HttpResponse using this subscriber is available immediately after the response headers have been read, without requiring to wait for the entire body to be processed. The response body can then be read directly from the InputStream.",
      "tagMap": {
        "apiNote": [
          "To ensure that all resources associated with the corresponding exchange are properly released the caller must ensure to either read all bytes until EOF is reached, or call \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/InputStream.html#close()\"\u003e\u003ccode\u003eInputStream.close()\u003c/code\u003e\u003c/a\u003e if it is unable or unwilling to do so. Calling \n\u003ccode\u003eclose\u003c/code\u003e before exhausting the stream may cause the underlying HTTP connection to be closed and prevent it from being reused for subsequent operations."
        ],
        "return": [
          "a body subscriber that streams the response body as an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/InputStream.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eInputStream\u003c/code\u003e\u003c/a\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "java.util.stream.Stream",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "charset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofLines",
      "comment": "Returns a BodySubscriber which streams the response body as a Stream\u003cString\u003e, where each string in the stream corresponds to a line as defined by BufferedReader.lines(). The HttpResponse using this subscriber is available immediately after the response headers have been read, without requiring to wait for the entire body to be processed. The response body can then be read directly from the Stream.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html#lines()\"\u003e\u003ccode\u003eBufferedReader.lines()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "To ensure that all resources associated with the corresponding exchange are properly released the caller must ensure to either read all lines until the stream is exhausted, or call \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/BaseStream.html#close()\"\u003e\u003ccode\u003eBaseStream.close()\u003c/code\u003e\u003c/a\u003e if it is unable or unwilling to do so. Calling \n\u003ccode\u003eclose\u003c/code\u003e before exhausting the stream may cause the underlying HTTP connection to be closed and prevent it from being reused for subsequent operations."
        ],
        "param": [
          "\u003ccode\u003echarset\u003c/code\u003e - the character set to use when converting bytes to characters"
        ],
        "return": [
          "a body subscriber that streams the response body as a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Stream.html\" title\u003d\"interface in java.util.stream\"\u003e\u003ccode\u003eStream\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e\u0026lt;String\u0026gt;\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "java.util.concurrent.Flow$Publisher",
            "parameters": [
              {
                "name": "java.util.List",
                "parameters": [
                  {
                    "name": "java.nio.ByteBuffer",
                    "type": "Class"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofPublisher",
      "comment": "Returns a response subscriber which publishes the response body through a Publisher\u003cList\u003cByteBuffer\u003e\u003e. The HttpResponse using this subscriber is available immediately after the response headers have been read, without requiring to wait for the entire body to be processed. The response body bytes can then be obtained by subscribing to the publisher returned by the HttpResponse body method. The publisher returned by the body method can be subscribed to only once. The first subscriber will receive the body response bytes if successfully subscribed, or will cause the subscription to be cancelled otherwise. If more subscriptions are attempted, the subsequent subscribers will be immediately subscribed with an empty subscription and their onError method will be invoked with an IllegalStateException.",
      "tagMap": {
        "apiNote": [
          "To ensure that all resources associated with the corresponding exchange are properly released the caller must ensure that the provided publisher is subscribed once, and either \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Flow.Subscription.html#request(long)\"\u003erequests\u003c/a\u003e all bytes until \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Flow.Subscriber.html#onComplete()\"\u003e\u003ccode\u003eonComplete\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Flow.Subscriber.html#onError(java.lang.Throwable)\"\u003e\u003ccode\u003eonError\u003c/code\u003e\u003c/a\u003e are invoked, or cancel the provided \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Flow.Subscriber.html#onSubscribe(java.util.concurrent.Flow.Subscription)\"\u003esubscription\u003c/a\u003e if it is unable or unwilling to do so. Note that depending on the actual HTTP protocol \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpClient.Version.html\" title\u003d\"enum class in java.net.http\"\u003eversion\u003c/a\u003e used for the exchange, cancelling the subscription instead of exhausting the flow may cause the underlying HTTP connection to be closed and prevent it from being reused for subsequent operations."
        ],
        "return": [
          "A \n\u003ccode\u003eBodySubscriber\u003c/code\u003e which publishes the response body through a \n\u003ccode\u003ePublisher\u0026lt;List\u0026lt;ByteBuffer\u0026gt;\u0026gt;\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "U",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "replacing",
      "comment": "Returns a response subscriber which discards the response body. The supplied value is the value that will be returned from HttpResponse.body().",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the type of the response body"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value to return from HttpResponse.body(), may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eBodySubscriber\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "discarding",
      "comment": "Returns a response subscriber which discards the response body.",
      "tagMap": {
        "return": [
          "a response body subscriber"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.net.http.HttpResponse$BodySubscriber",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "downstream"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bufferSize"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "buffering",
      "comment": "Returns a BodySubscriber which buffers data before delivering it to the given downstream subscriber. The subscriber guarantees to deliver bufferSize bytes of data to each invocation of the downstream\u0027s onNext method, except for the final invocation, just before onComplete is invoked. The final invocation of onNext may contain fewer than bufferSize bytes. The returned subscriber delegates its getBody() method to the downstream subscriber.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the response body"
        ],
        "param": [
          "\u003ccode\u003edownstream\u003c/code\u003e - the downstream subscriber",
          "\u003ccode\u003ebufferSize\u003c/code\u003e - the buffer size"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebufferSize \u0026lt;\u003d 0\u003c/code\u003e"
        ],
        "return": [
          "a buffering body subscriber"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse$BodySubscriber",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.net.http.HttpResponse$BodySubscriber",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "upstream"
          }
        },
        {
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "mapper"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        },
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "mapping",
      "comment": "Returns a BodySubscriber whose response body value is that of the result of applying the given function to the body object of the given upstream BodySubscriber. The mapping function is executed using the client\u0027s executor, and can therefore be used to map any response body type, including blocking InputStream. However, performing any blocking operation in the mapper function runs the risk of blocking the executor\u0027s thread for an unknown amount of time (at least until the blocking operation finishes), which may end up starving the executor of available threads. Therefore, in the case where mapping to the desired type might block (e.g. by reading on the InputStream), then mapping to a Supplier of the desired type and deferring the blocking operation until Supplier::get is invoked by the caller\u0027s thread should be preferred, as shown in the following example which uses a well-known JSON parser to convert an InputStream into any annotated Java type. For example:   public static \u003cW\u003e BodySubscriber\u003cSupplier\u003cW\u003e\u003e asJSON(Class\u003cW\u003e targetType) {\n     BodySubscriber\u003cInputStream\u003e upstream \u003d BodySubscribers.ofInputStream();\n\n     BodySubscriber\u003cSupplier\u003cW\u003e\u003e downstream \u003d BodySubscribers.mapping(\n           upstream,\n           (InputStream is) -\u003e () -\u003e {\n               try (InputStream stream \u003d is) {\n                   ObjectMapper objectMapper \u003d new ObjectMapper();\n                   return objectMapper.readValue(stream, targetType);\n               } catch (IOException e) {\n                   throw new UncheckedIOException(e);\n               }\n           });\n    return downstream;\n  }",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the upstream body type",
          "\u003ccode\u003eU\u003c/code\u003e - the type of the body subscriber returned"
        ],
        "param": [
          "\u003ccode\u003eupstream\u003c/code\u003e - the body subscriber to be mapped",
          "\u003ccode\u003emapper\u003c/code\u003e - the mapping function"
        ],
        "return": [
          "a mapping body subscriber"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "java.net.http.HttpResponse$BodySubscribers",
  "comment": "Implementations of \n\u003ca href\u003d\"HttpResponse.BodySubscriber.html\" title\u003d\"interface in java.net.http\"\u003e\u003ccode\u003eBodySubscriber\u003c/code\u003e\u003c/a\u003e that implement various useful subscribers, such as converting the response body bytes into a String, or streaming the bytes to a file. \n\u003cp\u003eThe following are examples of using the predefined body subscribers to convert a flow of response body data into common high-level Java objects: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   // Streams the response body to a File\n   HttpResponse\u0026lt;Path\u0026gt; response \u003d client\n     .send(request, responseInfo -\u0026gt; BodySubscribers.ofFile(Paths.get(\"example.html\"));\n\n   // Accumulates the response body and returns it as a byte[]\n   HttpResponse\u0026lt;byte[]\u0026gt; response \u003d client\n     .send(request, responseInfo -\u0026gt; BodySubscribers.ofByteArray());\n\n   // Discards the response body\n   HttpResponse\u0026lt;Void\u0026gt; response \u003d client\n     .send(request, responseInfo -\u0026gt; BodySubscribers.discarding());\n\n   // Accumulates the response body as a String then maps it to its bytes\n   HttpResponse\u0026lt;byte[]\u0026gt; response \u003d client\n     .send(request, responseInfo -\u0026gt;\n        BodySubscribers.mapping(BodySubscribers.ofString(UTF_8), String::getBytes));\n \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "11"
    ]
  }
}