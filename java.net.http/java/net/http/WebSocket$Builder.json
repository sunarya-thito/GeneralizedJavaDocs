{
  "packageName": "java.net.http",
  "simpleName": "Builder",
  "moduleName": "java.net.http",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.net.http.WebSocket$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "header",
      "comment": "Adds the given name-value pair to the list of additional HTTP headers sent during the opening handshake. Headers defined in the WebSocket Protocol are illegal. If this method is not invoked, no additional HTTP headers will be sent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the header name",
          "\u003ccode\u003evalue\u003c/code\u003e - the header value"
        ],
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.WebSocket$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.Duration",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "connectTimeout",
      "comment": "Sets a timeout for establishing a WebSocket connection. If the connection is not established within the specified duration then building of the WebSocket will fail with HttpTimeoutException. If this method is not invoked then the infinite timeout is assumed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - the timeout, non-\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/Duration.html#isNegative()\"\u003enegative\u003c/a\u003e, non-\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/Duration.html#ZERO\"\u003eZERO\u003c/a\u003e"
        ],
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.WebSocket$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "mostPreferred"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "lesserPreferred"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subprotocols",
      "comment": "Sets a request for the given subprotocols. After the WebSocket has been built, the actual subprotocol can be queried through WebSocket.getSubprotocol(). Subprotocols are specified in the order of preference. The most preferred subprotocol is specified first. If there are any additional subprotocols they are enumerated from the most preferred to the least preferred. Subprotocols not conforming to the syntax of subprotocol identifiers are illegal. If this method is not invoked then no subprotocols will be requested.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emostPreferred\u003c/code\u003e - the most preferred subprotocol",
          "\u003ccode\u003elesserPreferred\u003c/code\u003e - the lesser preferred subprotocols"
        ],
        "return": [
          "this builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletableFuture",
        "parameters": [
          {
            "name": "java.net.http.WebSocket",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.net.URI",
            "type": "Class"
          },
          "field": {
            "name": "uri"
          }
        },
        {
          "type": {
            "name": "java.net.http.WebSocket$Listener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "buildAsync",
      "comment": "Builds a WebSocket connected to the given URI and associated with the given Listener. Returns a CompletableFuture which will either complete normally with the resulting WebSocket or complete exceptionally with one of the following errors: IOException - if an I/O error occurs WebSocketHandshakeException - if the opening handshake fails HttpTimeoutException - if the opening handshake does not complete within the timeout InterruptedException - if the operation is interrupted SecurityException - if a security manager has been installed and it denies access to uri. Security checks contains more information relating to the security context in which the listener is invoked. IllegalArgumentException - if any of the arguments of this builder\u0027s methods are illegal",
      "tagMap": {
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - the WebSocket URI",
          "\u003ccode\u003elistener\u003c/code\u003e - the listener"
        ],
        "return": [
          "a \n\u003ccode\u003eCompletableFuture\u003c/code\u003e with the \n\u003ccode\u003eWebSocket\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "java.net.http.WebSocket$Builder",
  "comment": "A builder of \n\u003ca href\u003d\"WebSocket.html\" title\u003d\"interface in java.net.http\"\u003eWebSocket Clients\u003c/a\u003e. \n\u003cp\u003e Builders are created by invoking \u003ca href\u003d\"HttpClient.html#newWebSocketBuilder()\"\u003e\u003ccode\u003eHttpClient.newWebSocketBuilder\u003c/code\u003e\u003c/a\u003e. The intermediate (setter-like) methods change the state of the builder and return the same builder they have been invoked on. If an intermediate method is not invoked, an appropriate default value (or behavior) will be assumed. A \u003ccode\u003eBuilder\u003c/code\u003e is not safe for use by multiple threads without external synchronization.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "11"
    ]
  }
}