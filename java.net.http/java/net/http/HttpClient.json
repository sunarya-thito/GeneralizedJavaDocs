{
  "packageName": "java.net.http",
  "simpleName": "HttpClient",
  "moduleName": "java.net.http",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.net.http.HttpClient",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newHttpClient",
      "comment": "Returns a new HttpClient with default settings. Equivalent to newBuilder().build(). The default settings include: the \"GET\" request method, a preference of HTTP/2, a redirection policy of NEVER, the default proxy selector, and the default SSL context.",
      "annotations": [],
      "tagMap": {
        "implNote": [
          "The system-wide default values are retrieved at the time the \n\u003ccode\u003eHttpClient\u003c/code\u003e instance is constructed. Changing the system-wide values after an \n\u003ccode\u003eHttpClient\u003c/code\u003e instance has been built, for instance, by calling \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/ProxySelector.html#setDefault(java.net.ProxySelector)\"\u003e\u003ccode\u003eProxySelector.setDefault(ProxySelector)\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/net/ssl/SSLContext.html#setDefault(javax.net.ssl.SSLContext)\"\u003e\u003ccode\u003eSSLContext.setDefault(SSLContext)\u003c/code\u003e\u003c/a\u003e, has no effect on already built instances."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UncheckedIOException.html\" title\u003d\"class in java.io\"\u003eUncheckedIOException\u003c/a\u003e\u003c/code\u003e - if necessary underlying IO resources required to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpClient.Builder.html#build()\"\u003ebuild a new HttpClient\u003c/a\u003e cannot be allocated."
        ],
        "return": [
          "a new HttpClient"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpClient$Builder",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newBuilder",
      "comment": "Creates a new HttpClient builder. Builders returned by this method create instances of the default HttpClient implementation.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eHttpClient.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.net.CookieHandler",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "cookieHandler",
      "comment": "Returns an Optional containing this client\u0027s CookieHandler. If no CookieHandler was set in this client\u0027s builder, then the Optional is empty.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eOptional\u003c/code\u003e containing this client\u0027s \n\u003ccode\u003eCookieHandler\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.time.Duration",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "connectTimeout",
      "comment": "Returns an Optional containing the connect timeout duration for this client. If the connect timeout duration was not set in the client\u0027s builder, then the Optional is empty.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eOptional\u003c/code\u003e containing this client\u0027s connect timeout duration"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpClient$Redirect",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "followRedirects",
      "comment": "Returns the follow redirects policy for this client. The default value for client\u0027s built by builders that do not specify a redirect policy is NEVER.",
      "annotations": [],
      "tagMap": {
        "return": [
          "this client\u0027s follow redirects setting"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.net.ProxySelector",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "proxy",
      "comment": "Returns an Optional containing the ProxySelector supplied to this client. If no proxy selector was set in this client\u0027s builder, then the Optional is empty. Even though this method may return an empty optional, the HttpClient may still have a non-exposed default proxy selector that is used for sending HTTP requests.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eOptional\u003c/code\u003e containing the proxy selector supplied to this client."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.SSLContext",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "sslContext",
      "comment": "Returns this client\u0027s SSLContext. If no SSLContext was set in this client\u0027s builder, then the default context is returned.",
      "annotations": [],
      "tagMap": {
        "return": [
          "this client\u0027s SSLContext"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.net.ssl.SSLParameters",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "sslParameters",
      "comment": "Returns a copy of this client\u0027s SSLParameters. If no SSLParameters were set in the client\u0027s builder, then an implementation specific default set of parameters, that the client will use, is returned.",
      "annotations": [],
      "tagMap": {
        "return": [
          "this client\u0027s \n\u003ccode\u003eSSLParameters\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.net.Authenticator",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "authenticator",
      "comment": "Returns an Optional containing the Authenticator set on this client. If no Authenticator was set in the client\u0027s builder, then the Optional is empty.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eOptional\u003c/code\u003e containing this client\u0027s \n\u003ccode\u003eAuthenticator\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpClient$Version",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "version",
      "comment": "Returns the preferred HTTP protocol version for this client. The default value is HttpClient.Version.HTTP_2",
      "annotations": [],
      "tagMap": {
        "implNote": [
          "Constraints may also affect the selection of protocol version. For example, if HTTP/2 is requested through a proxy, and if the implementation does not support this mode, then HTTP/1.1 may be used"
        ],
        "return": [
          "the HTTP protocol version requested"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "executor",
      "comment": "Returns an Optional containing this client\u0027s Executor. If no Executor was set in the client\u0027s builder, then the Optional is empty. Even though this method may return an empty optional, the HttpClient may still have an non-exposed default executor that is used for executing asynchronous and dependent tasks.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eOptional\u003c/code\u003e containing this client\u0027s \n\u003ccode\u003eExecutor\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.HttpResponse",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.http.HttpRequest",
            "type": "Class"
          },
          "name": "request",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.net.http.HttpResponse$BodyHandler",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "responseBodyHandler",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "send",
      "comment": "Sends the given request using this client, blocking if necessary to get the response. The returned HttpResponse\u003cT\u003e contains the response status, headers, and body ( as handled by given response body handler ). If the operation is interrupted, the default HttpClient implementation attempts to cancel the HTTP exchange and InterruptedException is thrown. No guarantee is made as to exactly when the cancellation request may be taken into account. In particular, the request might still get sent to the server, as its processing might already have started asynchronously in another thread, and the underlying resources may only be released asynchronously. With HTTP/1.1, an attempt to cancel may cause the underlying connection to be closed abruptly. With HTTP/2, an attempt to cancel may cause the stream to be reset, or in certain circumstances, may also cause the connection to be closed abruptly, if, for instance, the thread is currently trying to write to the underlying socket.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the response body type"
        ],
        "param": [
          "\u003ccode\u003erequest\u003c/code\u003e - the request",
          "\u003ccode\u003eresponseBodyHandler\u003c/code\u003e - the response body handler"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when sending or receiving",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the operation is interrupted",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003erequest\u003c/code\u003e argument is not a request that could have been validly built as specified by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpRequest.Builder.html\" title\u003d\"interface in java.net.http\"\u003e\u003ccode\u003eHttpRequest.Builder\u003c/code\u003e\u003c/a\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager has been installed and it denies \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLPermission.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eaccess\u003c/code\u003e\u003c/a\u003e to the URL in the given request, or proxy if one is configured. See \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpClient.html#securitychecks\"\u003esecurity checks\u003c/a\u003e for further information."
        ],
        "return": [
          "the response"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletableFuture",
        "parameters": [
          {
            "name": "java.net.http.HttpResponse",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.http.HttpRequest",
            "type": "Class"
          },
          "name": "request",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.net.http.HttpResponse$BodyHandler",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "responseBodyHandler",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "sendAsync",
      "comment": "Sends the given request asynchronously using this client with the given response body handler. Equivalent to: sendAsync(request, responseBodyHandler, null).",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the response body type"
        ],
        "param": [
          "\u003ccode\u003erequest\u003c/code\u003e - the request",
          "\u003ccode\u003eresponseBodyHandler\u003c/code\u003e - the response body handler"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003erequest\u003c/code\u003e argument is not a request that could have been validly built as specified by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpRequest.Builder.html\" title\u003d\"interface in java.net.http\"\u003e\u003ccode\u003eHttpRequest.Builder\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eCompletableFuture\u0026lt;HttpResponse\u0026lt;T\u0026gt;\u0026gt;\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletableFuture",
        "parameters": [
          {
            "name": "java.net.http.HttpResponse",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.http.HttpRequest",
            "type": "Class"
          },
          "name": "request",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.net.http.HttpResponse$BodyHandler",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "responseBodyHandler",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.net.http.HttpResponse$PushPromiseHandler",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "pushPromiseHandler",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "sendAsync",
      "comment": "Sends the given request asynchronously using this client with the given response body handler and push promise handler. The returned completable future, if completed successfully, completes with an HttpResponse\u003cT\u003e that contains the response status, headers, and body ( as handled by given response body handler ). Push promises received, if any, are handled by the given pushPromiseHandler. A null valued pushPromiseHandler rejects any push promises. The returned completable future completes exceptionally with: IOException - if an I/O error occurs when sending or receiving SecurityException - If a security manager has been installed and it denies access to the URL in the given request, or proxy if one is configured. See security checks for further information. The default HttpClient implementation returns CompletableFuture objects that are cancelable. CompletableFuture objects derived from cancelable futures are themselves cancelable. Invoking cancel(true) on a cancelable future that is not completed, attempts to cancel the HTTP exchange in an effort to release underlying resources as soon as possible. No guarantee is made as to exactly when the cancellation request may be taken into account. In particular, the request might still get sent to the server, as its processing might already have started asynchronously in another thread, and the underlying resources may only be released asynchronously. With HTTP/1.1, an attempt to cancel may cause the underlying connection to be closed abruptly. With HTTP/2, an attempt to cancel may cause the stream to be reset.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the response body type"
        ],
        "param": [
          "\u003ccode\u003erequest\u003c/code\u003e - the request",
          "\u003ccode\u003eresponseBodyHandler\u003c/code\u003e - the response body handler",
          "\u003ccode\u003epushPromiseHandler\u003c/code\u003e - push promise handler, may be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003erequest\u003c/code\u003e argument is not a request that could have been validly built as specified by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpRequest.Builder.html\" title\u003d\"interface in java.net.http\"\u003e\u003ccode\u003eHttpRequest.Builder\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eCompletableFuture\u0026lt;HttpResponse\u0026lt;T\u0026gt;\u0026gt;\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.http.WebSocket$Builder",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "newWebSocketBuilder",
      "comment": "Creates a new WebSocket builder (optional operation). Example    HttpClient client \u003d HttpClient.newHttpClient();\n   CompletableFuture\u003cWebSocket\u003e ws \u003d client.newWebSocketBuilder()\n           .buildAsync(URI.create(\"ws://websocket.example.com\"), listener); Finer control over the WebSocket Opening Handshake can be achieved by using a custom HttpClient. Example    InetSocketAddress addr \u003d new InetSocketAddress(\"proxy.example.com\", 80);\n   HttpClient client \u003d HttpClient.newBuilder()\n           .proxy(ProxySelector.of(addr))\n           .build();\n   CompletableFuture\u003cWebSocket\u003e ws \u003d client.newWebSocketBuilder()\n           .buildAsync(URI.create(\"ws://websocket.example.com\"), listener);",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation of this method throws \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e. Clients obtained through \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpClient.html#newHttpClient()\"\u003e\u003ccode\u003enewHttpClient()\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpClient.html#newBuilder()\"\u003e\u003ccode\u003enewBuilder()\u003c/code\u003e\u003c/a\u003e return a \n\u003ccode\u003eWebSocket\u003c/code\u003e builder."
        ],
        "implNote": [
          "Both builder and \n\u003ccode\u003eWebSocket\u003c/code\u003es created with it operate in a non-blocking fashion. That is, their methods do not block before returning a \n\u003ccode\u003eCompletableFuture\u003c/code\u003e. Asynchronous tasks are executed in this \n\u003ccode\u003eHttpClient\u003c/code\u003e\u0027s executor. \n\u003cp\u003e When a \u003ccode\u003eCompletionStage\u003c/code\u003e returned from \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/WebSocket.Listener.html#onClose(java.net.http.WebSocket,int,java.lang.String)\"\u003e\u003ccode\u003eListener.onClose\u003c/code\u003e\u003c/a\u003e completes, the \u003ccode\u003eWebSocket\u003c/code\u003e will send a Close message that has the same code the received message has and an empty reason.\u003c/p\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eHttpClient\u003c/code\u003e does not provide WebSocket support"
        ],
        "return": [
          "a \n\u003ccode\u003eWebSocket.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates an HttpClient.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "java.net.http.HttpClient$Builder",
    "java.net.http.HttpClient$Redirect",
    "java.net.http.HttpClient$Version"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.net.http.HttpClient",
  "annotations": [],
  "tagMap": {
    "implNote": [
      "If an explicit \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpClient.Builder.html#executor(java.util.concurrent.Executor)\"\u003eexecutor\u003c/a\u003e has not been set for an \n\u003ccode\u003eHttpClient\u003c/code\u003e, and a security manager has been installed, then the default executor will execute asynchronous and dependent tasks in a context that is granted no permissions. Custom \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpRequest.BodyPublisher.html\" title\u003d\"interface in java.net.http\"\u003erequest body publishers\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpResponse.BodyHandler.html\" title\u003d\"interface in java.net.http\"\u003eresponse body handlers\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscriber.html\" title\u003d\"interface in java.net.http\"\u003eresponse body subscribers\u003c/a\u003e, and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/WebSocket.Listener.html\" title\u003d\"interface in java.net.http\"\u003eWebSocket Listeners\u003c/a\u003e, if executing operations that require privileges, should do so within an appropriate \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction)\"\u003eprivileged context\u003c/a\u003e."
    ],
    "since": [
      "11"
    ]
  }
}