{
  "packageName": "java.net.http",
  "simpleName": "BodySubscriber",
  "moduleName": "java.net.http",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.concurrent.Flow$Subscriber",
    "parameters": [
      {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          }
        ],
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "owner": "java.net.http.HttpResponse$BodySubscriber",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBody",
      "comment": "Returns a CompletionStage which when completed will return the response body object. This method can be called at any time relative to the other Flow.Subscriber methods and is invoked using the client\u0027s executor.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a CompletionStage for the response body"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "java.net.http.HttpResponse$BodySubscriber",
  "comment": "A \n\u003ccode\u003eBodySubscriber\u003c/code\u003e consumes response body bytes and converts them into a higher-level Java type. The class \n\u003ca href\u003d\"HttpResponse.BodySubscribers.html\" title\u003d\"class in java.net.http\"\u003e\u003ccode\u003eBodySubscribers\u003c/code\u003e\u003c/a\u003e provides implementations of many common body subscribers. \n\u003cp\u003e The object acts as a \u003ca href\u003d\"../../../../java.base/java/util/concurrent/Flow.Subscriber.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eFlow.Subscriber\u003c/code\u003e\u003c/a\u003e\u0026lt;\u003ca href\u003d\"../../../../java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eList\u003c/code\u003e\u003c/a\u003e\u0026lt;\u003ca href\u003d\"../../../../java.base/java/nio/ByteBuffer.html\" title\u003d\"class in java.nio\"\u003e\u003ccode\u003eByteBuffer\u003c/code\u003e\u003c/a\u003e\u0026gt;\u0026gt; to the HTTP Client implementation, which publishes lists of ByteBuffers containing the response body. The Flow of data, as well as the order of ByteBuffers in the Flow lists, is a strictly ordered representation of the response body. Both the Lists and the ByteBuffers, once passed to the subscriber, are no longer used by the HTTP Client. The subscriber converts the incoming buffers of data to some higher-level Java type \u003ccode\u003eT\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The \u003ca href\u003d\"#getBody()\"\u003e\u003ccode\u003egetBody()\u003c/code\u003e\u003c/a\u003e method returns a \u003ca href\u003d\"../../../../java.base/java/util/concurrent/CompletionStage.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eCompletionStage\u003c/code\u003e\u003c/a\u003e\u003ccode\u003e\u0026lt;T\u0026gt;\u003c/code\u003e that provides the response body object. The \u003ccode\u003eCompletionStage\u003c/code\u003e must be obtainable at any time. When it completes depends on the nature of type \u003ccode\u003eT\u003c/code\u003e. In many cases, when \u003ccode\u003eT\u003c/code\u003e represents the entire body after being consumed then the \u003ccode\u003eCompletionStage\u003c/code\u003e completes after the body has been consumed. If \u003ccode\u003eT\u003c/code\u003e is a streaming type, such as \u003ca href\u003d\"../../../../java.base/java/io/InputStream.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eInputStream\u003c/code\u003e\u003c/a\u003e, then it completes before the body has been read, because the calling code uses the \u003ccode\u003eInputStream\u003c/code\u003e to consume the data.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.net.http/java/net/http/HttpResponse.BodySubscribers.html\" title\u003d\"class in java.net.http\"\u003e\u003ccode\u003eHttpResponse.BodySubscribers\u003c/code\u003e\u003c/a\u003e"
    ],
    "apiNote": [
      "To ensure that all resources associated with the corresponding HTTP exchange are properly released, an implementation of \n\u003ccode\u003e BodySubscriber\u003c/code\u003e should ensure to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Flow.Subscription.html#request(long)\"\u003erequest\u003c/a\u003e more data until one of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Flow.Subscriber.html#onComplete()\"\u003e\u003ccode\u003eonComplete\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Flow.Subscriber.html#onError(java.lang.Throwable)\"\u003e\u003ccode\u003eonError\u003c/code\u003e\u003c/a\u003e are signalled, or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Flow.Subscription.html#request(long)\"\u003e\u003ccode\u003ecancel\u003c/code\u003e\u003c/a\u003e its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Flow.Subscriber.html#onSubscribe(java.util.concurrent.Flow.Subscription)\"\u003esubscription\u003c/a\u003e if unable or unwilling to do so. Calling \n\u003ccode\u003ecancel\u003c/code\u003e before exhausting the response body data may cause the underlying HTTP connection to be closed and prevent it from being reused for subsequent operations."
    ],
    "implNote": [
      "The flow of data containing the response body is immutable. Specifically, it is a flow of unmodifiable lists of read-only ByteBuffers."
    ],
    "since": [
      "11"
    ]
  }
}