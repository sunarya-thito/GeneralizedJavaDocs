{
  "packageName": "org.bukkit.configuration",
  "simpleName": "ConfigurationSection",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "Set",
        "parameters": [
          {
            "name": "String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "deep",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getKeys",
      "comment": "Gets a set containing all keys in this section. If deep is set to true, then this will contain all the keys within any child ConfigurationSections (and their children, etc). These will be in a valid path notation for you to use. If deep is set to false, then this will contain only the keys of any direct children, and not their own children.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003edeep\u003c/code\u003e - Whether or not to get a deep list, as opposed to a shallow list."
        ],
        "return": [
          "Set of keys contained within this ConfigurationSection."
        ]
      }
    },
    {
      "returnType": {
        "name": "Map",
        "parameters": [
          {
            "name": "String",
            "type": "Class"
          },
          {
            "name": "Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "deep",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getValues",
      "comment": "Gets a Map containing all keys and their values for this section. If deep is set to true, then this will contain all the keys and values within any child ConfigurationSections (and their children, etc). These keys will be in a valid path notation for you to use. If deep is set to false, then this will contain only the keys and values of any direct children, and not their own children.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003edeep\u003c/code\u003e - Whether or not to get a deep list, as opposed to a shallow list."
        ],
        "return": [
          "Map of keys and values of this section."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "contains",
      "comment": "Checks if this ConfigurationSection contains the given path. If the value for the requested path does not exist but a default value has been specified, this will return true.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path to check for existence."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown when path is null."
        ],
        "return": [
          "True if this section contains the requested path, either via default or being set."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "ignoreDefault",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "contains",
      "comment": "Checks if this ConfigurationSection contains the given path. If the value for the requested path does not exist, the boolean parameter of true has been specified, a default value for the path exists, this will return true. If a boolean parameter of false has been specified, true will only be returned if there is a set value for the specified path.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path to check for existence.",
          "\u003ccode\u003eignoreDefault\u003c/code\u003e - Whether or not to ignore if a default value for the specified path exists."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown when path is null."
        ],
        "return": [
          "True if this section contains the requested path, or if a default value exist and the boolean parameter for this method is true."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSet",
      "comment": "Checks if this ConfigurationSection has a value set for the given path. If the value for the requested path does not exist but a default value has been specified, this will still return false.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path to check for existence."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown when path is null."
        ],
        "return": [
          "True if this section contains the requested path, regardless of having a default."
        ]
      }
    },
    {
      "returnType": {
        "name": "String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCurrentPath",
      "comment": "Gets the path of this ConfigurationSection from its root Configuration For any Configuration themselves, this will return an empty string. If the section is no longer contained within its root for any reason, such as being replaced with a different value, this may return null. To retrieve the single name of this section, that is, the final part of the path returned by this method, you may use getName().",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "Path of this section relative to its root"
        ]
      }
    },
    {
      "returnType": {
        "name": "String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getName",
      "comment": "Gets the name of this individual ConfigurationSection, in the path. This will always be the final part of getCurrentPath(), unless the section is orphaned.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "Name of this section"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.configuration.Configuration",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRoot",
      "comment": "Gets the root Configuration that contains this ConfigurationSection For any Configuration themselves, this will return its own object. If the section is no longer contained within its root for any reason, such as being replaced with a different value, this may return null.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "Root configuration containing this section."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.configuration.ConfigurationSection",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getParent",
      "comment": "Gets the parent ConfigurationSection that directly contains this ConfigurationSection. For any Configuration themselves, this will return null. If the section is no longer contained within its parent for any reason, such as being replaced with a different value, this may return null.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "Parent section containing this section."
        ]
      }
    },
    {
      "returnType": {
        "name": "Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "get",
      "comment": "Gets the requested Object by path. If the Object does not exist but a default value has been specified, this will return the default value. If the Object does not exist and no default value was specified, this will return null.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the Object to get."
        ],
        "return": [
          "Requested Object."
        ]
      }
    },
    {
      "returnType": {
        "name": "Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Object",
            "type": "Class"
          },
          "name": "def",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "get",
      "comment": "Gets the requested Object by path, returning a default value if not found. If the Object does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
      "annotations": [
        {
          "type": {
            "name": "Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "_, !null -\u003e !null"
            }
          ]
        },
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the Object to get.",
          "\u003ccode\u003edef\u003c/code\u003e - The default value to return if the path is not found."
        ],
        "return": [
          "Requested Object."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Object",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "set",
      "comment": "Sets the specified path to the given value. If value is null, the entry will be removed. Any existing entry will be replaced, regardless of what the new value is. Some implementations may have limitations on what you may store. See their individual javadocs for details. No implementations should allow you to store Configurations or ConfigurationSections, please use createSection(java.lang.String) for that.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the object to set.",
          "\u003ccode\u003evalue\u003c/code\u003e - New value to set the path to."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.configuration.ConfigurationSection",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createSection",
      "comment": "Creates an empty ConfigurationSection at the specified path. Any value that was previously set at this path will be overwritten. If the previous value was itself a ConfigurationSection, it will be orphaned.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path to create the section at."
        ],
        "return": [
          "Newly created section"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.configuration.ConfigurationSection",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Map",
            "parameters": [
              {
                "type": "Wildcard"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "map",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createSection",
      "comment": "Creates a ConfigurationSection at the specified path, with specified values. Any value that was previously set at this path will be overwritten. If the previous value was itself a ConfigurationSection, it will be orphaned.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path to create the section at.",
          "\u003ccode\u003emap\u003c/code\u003e - The values to used."
        ],
        "return": [
          "Newly created section"
        ]
      }
    },
    {
      "returnType": {
        "name": "String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getString",
      "comment": "Gets the requested String by path. If the String does not exist but a default value has been specified, this will return the default value. If the String does not exist and no default value was specified, this will return null.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the String to get."
        ],
        "return": [
          "Requested String."
        ]
      }
    },
    {
      "returnType": {
        "name": "String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "def",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getString",
      "comment": "Gets the requested String by path, returning a default value if not found. If the String does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
      "annotations": [
        {
          "type": {
            "name": "Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "_, !null -\u003e !null"
            }
          ]
        },
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the String to get.",
          "\u003ccode\u003edef\u003c/code\u003e - The default value to return if the path is not found or is not a String."
        ],
        "return": [
          "Requested String."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isString",
      "comment": "Checks if the specified path is a String. If the path exists but is not a String, this will return false. If the path does not exist, this will return false. If the path does not exist but a default value has been specified, this will check if that default value is a String and return appropriately.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the String to check."
        ],
        "return": [
          "Whether or not the specified path is a String."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getInt",
      "comment": "Gets the requested int by path. If the int does not exist but a default value has been specified, this will return the default value. If the int does not exist and no default value was specified, this will return 0.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the int to get."
        ],
        "return": [
          "Requested int."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "def",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getInt",
      "comment": "Gets the requested int by path, returning a default value if not found. If the int does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the int to get.",
          "\u003ccode\u003edef\u003c/code\u003e - The default value to return if the path is not found or is not an int."
        ],
        "return": [
          "Requested int."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isInt",
      "comment": "Checks if the specified path is an int. If the path exists but is not a int, this will return false. If the path does not exist, this will return false. If the path does not exist but a default value has been specified, this will check if that default value is a int and return appropriately.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the int to check."
        ],
        "return": [
          "Whether or not the specified path is an int."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBoolean",
      "comment": "Gets the requested boolean by path. If the boolean does not exist but a default value has been specified, this will return the default value. If the boolean does not exist and no default value was specified, this will return false.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the boolean to get."
        ],
        "return": [
          "Requested boolean."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "def",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBoolean",
      "comment": "Gets the requested boolean by path, returning a default value if not found. If the boolean does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the boolean to get.",
          "\u003ccode\u003edef\u003c/code\u003e - The default value to return if the path is not found or is not a boolean."
        ],
        "return": [
          "Requested boolean."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isBoolean",
      "comment": "Checks if the specified path is a boolean. If the path exists but is not a boolean, this will return false. If the path does not exist, this will return false. If the path does not exist but a default value has been specified, this will check if that default value is a boolean and return appropriately.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the boolean to check."
        ],
        "return": [
          "Whether or not the specified path is a boolean."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDouble",
      "comment": "Gets the requested double by path. If the double does not exist but a default value has been specified, this will return the default value. If the double does not exist and no default value was specified, this will return 0.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the double to get."
        ],
        "return": [
          "Requested double."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "def",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDouble",
      "comment": "Gets the requested double by path, returning a default value if not found. If the double does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the double to get.",
          "\u003ccode\u003edef\u003c/code\u003e - The default value to return if the path is not found or is not a double."
        ],
        "return": [
          "Requested double."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isDouble",
      "comment": "Checks if the specified path is a double. If the path exists but is not a double, this will return false. If the path does not exist, this will return false. If the path does not exist but a default value has been specified, this will check if that default value is a double and return appropriately.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the double to check."
        ],
        "return": [
          "Whether or not the specified path is a double."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLong",
      "comment": "Gets the requested long by path. If the long does not exist but a default value has been specified, this will return the default value. If the long does not exist and no default value was specified, this will return 0.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the long to get."
        ],
        "return": [
          "Requested long."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "def",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLong",
      "comment": "Gets the requested long by path, returning a default value if not found. If the long does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the long to get.",
          "\u003ccode\u003edef\u003c/code\u003e - The default value to return if the path is not found or is not a long."
        ],
        "return": [
          "Requested long."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isLong",
      "comment": "Checks if the specified path is a long. If the path exists but is not a long, this will return false. If the path does not exist, this will return false. If the path does not exist but a default value has been specified, this will check if that default value is a long and return appropriately.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the long to check."
        ],
        "return": [
          "Whether or not the specified path is a long."
        ]
      }
    },
    {
      "returnType": {
        "name": "List",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getList",
      "comment": "Gets the requested List by path. If the List does not exist but a default value has been specified, this will return the default value. If the List does not exist and no default value was specified, this will return null.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the List to get."
        ],
        "return": [
          "Requested List."
        ]
      }
    },
    {
      "returnType": {
        "name": "List",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "List",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "def",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getList",
      "comment": "Gets the requested List by path, returning a default value if not found. If the List does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
      "annotations": [
        {
          "type": {
            "name": "Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "_, !null -\u003e !null"
            }
          ]
        },
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the List to get.",
          "\u003ccode\u003edef\u003c/code\u003e - The default value to return if the path is not found or is not a List."
        ],
        "return": [
          "Requested List."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isList",
      "comment": "Checks if the specified path is a List. If the path exists but is not a List, this will return false. If the path does not exist, this will return false. If the path does not exist but a default value has been specified, this will check if that default value is a List and return appropriately.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the List to check."
        ],
        "return": [
          "Whether or not the specified path is a List."
        ]
      }
    },
    {
      "returnType": {
        "name": "List",
        "parameters": [
          {
            "name": "String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getStringList",
      "comment": "Gets the requested List of String by path. If the List does not exist but a default value has been specified, this will return the default value. If the List does not exist and no default value was specified, this will return an empty List. This method will attempt to cast any values into a String if possible, but may miss any values out if they are not compatible.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the List to get."
        ],
        "return": [
          "Requested List of String."
        ]
      }
    },
    {
      "returnType": {
        "name": "List",
        "parameters": [
          {
            "name": "Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getIntegerList",
      "comment": "Gets the requested List of Integer by path. If the List does not exist but a default value has been specified, this will return the default value. If the List does not exist and no default value was specified, this will return an empty List. This method will attempt to cast any values into a Integer if possible, but may miss any values out if they are not compatible.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the List to get."
        ],
        "return": [
          "Requested List of Integer."
        ]
      }
    },
    {
      "returnType": {
        "name": "List",
        "parameters": [
          {
            "name": "Boolean",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBooleanList",
      "comment": "Gets the requested List of Boolean by path. If the List does not exist but a default value has been specified, this will return the default value. If the List does not exist and no default value was specified, this will return an empty List. This method will attempt to cast any values into a Boolean if possible, but may miss any values out if they are not compatible.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the List to get."
        ],
        "return": [
          "Requested List of Boolean."
        ]
      }
    },
    {
      "returnType": {
        "name": "List",
        "parameters": [
          {
            "name": "Double",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDoubleList",
      "comment": "Gets the requested List of Double by path. If the List does not exist but a default value has been specified, this will return the default value. If the List does not exist and no default value was specified, this will return an empty List. This method will attempt to cast any values into a Double if possible, but may miss any values out if they are not compatible.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the List to get."
        ],
        "return": [
          "Requested List of Double."
        ]
      }
    },
    {
      "returnType": {
        "name": "List",
        "parameters": [
          {
            "name": "Float",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFloatList",
      "comment": "Gets the requested List of Float by path. If the List does not exist but a default value has been specified, this will return the default value. If the List does not exist and no default value was specified, this will return an empty List. This method will attempt to cast any values into a Float if possible, but may miss any values out if they are not compatible.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the List to get."
        ],
        "return": [
          "Requested List of Float."
        ]
      }
    },
    {
      "returnType": {
        "name": "List",
        "parameters": [
          {
            "name": "Long",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLongList",
      "comment": "Gets the requested List of Long by path. If the List does not exist but a default value has been specified, this will return the default value. If the List does not exist and no default value was specified, this will return an empty List. This method will attempt to cast any values into a Long if possible, but may miss any values out if they are not compatible.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the List to get."
        ],
        "return": [
          "Requested List of Long."
        ]
      }
    },
    {
      "returnType": {
        "name": "List",
        "parameters": [
          {
            "name": "Byte",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getByteList",
      "comment": "Gets the requested List of Byte by path. If the List does not exist but a default value has been specified, this will return the default value. If the List does not exist and no default value was specified, this will return an empty List. This method will attempt to cast any values into a Byte if possible, but may miss any values out if they are not compatible.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the List to get."
        ],
        "return": [
          "Requested List of Byte."
        ]
      }
    },
    {
      "returnType": {
        "name": "List",
        "parameters": [
          {
            "name": "Character",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCharacterList",
      "comment": "Gets the requested List of Character by path. If the List does not exist but a default value has been specified, this will return the default value. If the List does not exist and no default value was specified, this will return an empty List. This method will attempt to cast any values into a Character if possible, but may miss any values out if they are not compatible.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the List to get."
        ],
        "return": [
          "Requested List of Character."
        ]
      }
    },
    {
      "returnType": {
        "name": "List",
        "parameters": [
          {
            "name": "Short",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getShortList",
      "comment": "Gets the requested List of Short by path. If the List does not exist but a default value has been specified, this will return the default value. If the List does not exist and no default value was specified, this will return an empty List. This method will attempt to cast any values into a Short if possible, but may miss any values out if they are not compatible.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the List to get."
        ],
        "return": [
          "Requested List of Short."
        ]
      }
    },
    {
      "returnType": {
        "name": "List",
        "parameters": [
          {
            "name": "Map",
            "parameters": [
              {
                "type": "Wildcard"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMapList",
      "comment": "Gets the requested List of Maps by path. If the List does not exist but a default value has been specified, this will return the default value. If the List does not exist and no default value was specified, this will return an empty List. This method will attempt to cast any values into a Map if possible, but may miss any values out if they are not compatible.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the List to get."
        ],
        "return": [
          "Requested List of Maps."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObject",
      "comment": "Gets the requested object at the given path. If the Object does not exist but a default value has been specified, this will return the default value. If the Object does not exist and no default value was specified, this will return null. Note: For example #getObject(path, String.class) is not equivalent to #getString(path) because #getString(path) converts internally all Objects to Strings. However, #getObject(path, Boolean.class) is equivalent to #getBoolean(path) for example.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the requested object"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the object.",
          "\u003ccode\u003eclazz\u003c/code\u003e - the type of the requested object"
        ],
        "return": [
          "Requested object"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "def",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObject",
      "comment": "Gets the requested object at the given path, returning a default value if not found If the Object does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration. Note: For example #getObject(path, String.class, def) is not equivalent to #getString(path, def) because #getString(path, def) converts internally all Objects to Strings. However, #getObject(path, Boolean.class, def) is equivalent to #getBoolean(path, def) for example.",
      "annotations": [
        {
          "type": {
            "name": "Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "_, _, !null -\u003e !null"
            }
          ]
        },
        {
          "type": {
            "name": "Nullable",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the requested object"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the object.",
          "\u003ccode\u003eclazz\u003c/code\u003e - the type of the requested object",
          "\u003ccode\u003edef\u003c/code\u003e - the default object to return if the object is not present at the path"
        ],
        "return": [
          "Requested object"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.configuration.serialization.ConfigurationSerializable",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSerializable",
      "comment": "Gets the requested ConfigurationSerializable object at the given path. If the Object does not exist but a default value has been specified, this will return the default value. If the Object does not exist and no default value was specified, this will return null.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the object.",
          "\u003ccode\u003eclazz\u003c/code\u003e - the type of \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "Requested \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "def",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.configuration.serialization.ConfigurationSerializable",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSerializable",
      "comment": "Gets the requested ConfigurationSerializable object at the given path, returning a default value if not found If the Object does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
      "annotations": [
        {
          "type": {
            "name": "Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "_, _, !null -\u003e !null"
            }
          ]
        },
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the object.",
          "\u003ccode\u003eclazz\u003c/code\u003e - the type of \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003edef\u003c/code\u003e - the default object to return if the object is not present at the path"
        ],
        "return": [
          "Requested \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getVector",
      "comment": "Gets the requested Vector by path. If the Vector does not exist but a default value has been specified, this will return the default value. If the Vector does not exist and no default value was specified, this will return null.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the Vector to get."
        ],
        "return": [
          "Requested Vector."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.Vector",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "name": "def",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getVector",
      "comment": "Gets the requested Vector by path, returning a default value if not found. If the Vector does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
      "annotations": [
        {
          "type": {
            "name": "Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "_, !null -\u003e !null"
            }
          ]
        },
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the Vector to get.",
          "\u003ccode\u003edef\u003c/code\u003e - The default value to return if the path is not found or is not a Vector."
        ],
        "return": [
          "Requested Vector."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isVector",
      "comment": "Checks if the specified path is a Vector. If the path exists but is not a Vector, this will return false. If the path does not exist, this will return false. If the path does not exist but a default value has been specified, this will check if that default value is a Vector and return appropriately.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the Vector to check."
        ],
        "return": [
          "Whether or not the specified path is a Vector."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.OfflinePlayer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOfflinePlayer",
      "comment": "Gets the requested OfflinePlayer by path. If the OfflinePlayer does not exist but a default value has been specified, this will return the default value. If the OfflinePlayer does not exist and no default value was specified, this will return null.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the OfflinePlayer to get."
        ],
        "return": [
          "Requested OfflinePlayer."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.OfflinePlayer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.OfflinePlayer",
            "type": "Class"
          },
          "name": "def",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOfflinePlayer",
      "comment": "Gets the requested OfflinePlayer by path, returning a default value if not found. If the OfflinePlayer does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
      "annotations": [
        {
          "type": {
            "name": "Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "_, !null -\u003e !null"
            }
          ]
        },
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the OfflinePlayer to get.",
          "\u003ccode\u003edef\u003c/code\u003e - The default value to return if the path is not found or is not an OfflinePlayer."
        ],
        "return": [
          "Requested OfflinePlayer."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isOfflinePlayer",
      "comment": "Checks if the specified path is an OfflinePlayer. If the path exists but is not a OfflinePlayer, this will return false. If the path does not exist, this will return false. If the path does not exist but a default value has been specified, this will check if that default value is a OfflinePlayer and return appropriately.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the OfflinePlayer to check."
        ],
        "return": [
          "Whether or not the specified path is an OfflinePlayer."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getItemStack",
      "comment": "Gets the requested ItemStack by path. If the ItemStack does not exist but a default value has been specified, this will return the default value. If the ItemStack does not exist and no default value was specified, this will return null.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the ItemStack to get."
        ],
        "return": [
          "Requested ItemStack."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.inventory.ItemStack",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "name": "def",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getItemStack",
      "comment": "Gets the requested ItemStack by path, returning a default value if not found. If the ItemStack does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
      "annotations": [
        {
          "type": {
            "name": "Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "_, !null -\u003e !null"
            }
          ]
        },
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the ItemStack to get.",
          "\u003ccode\u003edef\u003c/code\u003e - The default value to return if the path is not found or is not an ItemStack."
        ],
        "return": [
          "Requested ItemStack."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isItemStack",
      "comment": "Checks if the specified path is an ItemStack. If the path exists but is not a ItemStack, this will return false. If the path does not exist, this will return false. If the path does not exist but a default value has been specified, this will check if that default value is a ItemStack and return appropriately.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the ItemStack to check."
        ],
        "return": [
          "Whether or not the specified path is an ItemStack."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Color",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getColor",
      "comment": "Gets the requested Color by path. If the Color does not exist but a default value has been specified, this will return the default value. If the Color does not exist and no default value was specified, this will return null.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the Color to get."
        ],
        "return": [
          "Requested Color."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Color",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Color",
            "type": "Class"
          },
          "name": "def",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getColor",
      "comment": "Gets the requested Color by path, returning a default value if not found. If the Color does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
      "annotations": [
        {
          "type": {
            "name": "Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "_, !null -\u003e !null"
            }
          ]
        },
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the Color to get.",
          "\u003ccode\u003edef\u003c/code\u003e - The default value to return if the path is not found or is not a Color."
        ],
        "return": [
          "Requested Color."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isColor",
      "comment": "Checks if the specified path is a Color. If the path exists but is not a Color, this will return false. If the path does not exist, this will return false. If the path does not exist but a default value has been specified, this will check if that default value is a Color and return appropriately.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the Color to check."
        ],
        "return": [
          "Whether or not the specified path is a Color."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocation",
      "comment": "Gets the requested Location by path. If the Location does not exist but a default value has been specified, this will return the default value. If the Location does not exist and no default value was specified, this will return null.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the Location to get."
        ],
        "return": [
          "Requested Location."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "def",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocation",
      "comment": "Gets the requested Location by path, returning a default value if not found. If the Location does not exist then the specified default value will returned regardless of if a default has been identified in the root Configuration.",
      "annotations": [
        {
          "type": {
            "name": "Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "_, !null -\u003e !null"
            }
          ]
        },
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the Location to get.",
          "\u003ccode\u003edef\u003c/code\u003e - The default value to return if the path is not found or is not a Location."
        ],
        "return": [
          "Requested Location."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isLocation",
      "comment": "Checks if the specified path is a Location. If the path exists but is not a Location, this will return false. If the path does not exist, this will return false. If the path does not exist but a default value has been specified, this will check if that default value is a Location and return appropriately.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the Location to check."
        ],
        "return": [
          "Whether or not the specified path is a Location."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.configuration.ConfigurationSection",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getConfigurationSection",
      "comment": "Gets the requested ConfigurationSection by path. If the ConfigurationSection does not exist but a default value has been specified, this will return the default value. If the ConfigurationSection does not exist and no default value was specified, this will return null.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the ConfigurationSection to get."
        ],
        "return": [
          "Requested ConfigurationSection."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isConfigurationSection",
      "comment": "Checks if the specified path is a ConfigurationSection. If the path exists but is not a ConfigurationSection, this will return false. If the path does not exist, this will return false. If the path does not exist but a default value has been specified, this will check if that default value is a ConfigurationSection and return appropriately.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the ConfigurationSection to check."
        ],
        "return": [
          "Whether or not the specified path is a ConfigurationSection."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.configuration.ConfigurationSection",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDefaultSection",
      "comment": "Gets the equivalent ConfigurationSection from the default Configuration defined in getRoot(). If the root contains no defaults, or the defaults doesn\u0027t contain a value for this path, or the value at this path is not a ConfigurationSection then this will return null.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "Equivalent section in root configuration"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "String",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Object",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addDefault",
      "comment": "Sets the default value in the root at the given path as provided. If no source Configuration was provided as a default collection, then a new MemoryConfiguration will be created to hold the new default value. If value is null, the value will be removed from the default Configuration source. If the value as returned by getDefaultSection() is null, then this will create a new section at the path, replacing anything that may have existed there previously.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - Path of the value to set.",
          "\u003ccode\u003evalue\u003c/code\u003e - Value to set the default to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - Thrown if path is null."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.configuration.ConfigurationSection",
  "annotations": [],
  "tagMap": {}
}