{
  "packageName": "org.bukkit.block",
  "simpleName": "Block",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.bukkit.metadata.Metadatable",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getData",
      "comment": "Gets the metadata for this block",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "block specific metadata"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockData",
      "comment": "Gets the complete block data for this block",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "block specific data"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "modX",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "modY",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "modZ",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRelative",
      "comment": "Gets the block at the given offsets",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003emodX\u003c/code\u003e - X-coordinate offset",
          "\u003ccode\u003emodY\u003c/code\u003e - Y-coordinate offset",
          "\u003ccode\u003emodZ\u003c/code\u003e - Z-coordinate offset"
        ],
        "return": [
          "Block at the given offsets"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "BlockFace",
            "type": "Class"
          },
          "name": "face",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRelative",
      "comment": "Gets the block at the given face This method is equal to getRelative(face, 1)",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/block/Block.html#getRelative(org.bukkit.block.BlockFace,int)\"\u003e\u003ccode\u003egetRelative(BlockFace, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eface\u003c/code\u003e - Face of this block to return"
        ],
        "return": [
          "Block at the given face"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.Block",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "BlockFace",
            "type": "Class"
          },
          "name": "face",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "distance",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRelative",
      "comment": "Gets the block at the given distance of the given face For example, the following method places water at 100,102,100; two blocks above 100,100,100.  Block block \u003d world.getBlockAt(100, 100, 100);\n Block shower \u003d block.getRelative(BlockFace.UP, 2);\n shower.setType(Material.WATER);",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eface\u003c/code\u003e - Face of this block to return",
          "\u003ccode\u003edistance\u003c/code\u003e - Distance to get the block at"
        ],
        "return": [
          "Block at the given face"
        ]
      }
    },
    {
      "returnType": {
        "name": "Material",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getType",
      "comment": "Gets the type of this block",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "block type"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLightLevel",
      "comment": "Gets the light level between 0-15",
      "annotations": [],
      "tagMap": {
        "return": [
          "light level"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLightFromSky",
      "comment": "Get the amount of light at this block from the sky. Any light given from other sources (such as blocks like torches) will be ignored.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Sky light level"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLightFromBlocks",
      "comment": "Get the amount of light at this block from nearby blocks. Any light given from other sources (such as the sun) will be ignored.",
      "annotations": [],
      "tagMap": {
        "return": [
          "Block light level"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.World",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWorld",
      "comment": "Gets the world which contains this Block",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "World containing this block"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getX",
      "comment": "Gets the x-coordinate of this block",
      "annotations": [],
      "tagMap": {
        "return": [
          "x-coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getY",
      "comment": "Gets the y-coordinate of this block",
      "annotations": [],
      "tagMap": {
        "return": [
          "y-coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getZ",
      "comment": "Gets the z-coordinate of this block",
      "annotations": [],
      "tagMap": {
        "return": [
          "z-coordinate"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocation",
      "comment": "Gets the Location of the block",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "Location of block"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "loc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLocation",
      "comment": "Stores the location of the block in the provided Location object. If the provided Location is null this method does nothing and returns null.",
      "annotations": [
        {
          "type": {
            "name": "Contract",
            "type": "Class"
          },
          "values": [
            {
              "name": "value",
              "value": "null -\u003e null; !null -\u003e !null"
            }
          ]
        },
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - the location to copy into"
        ],
        "return": [
          "The Location object provided or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.Chunk",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChunk",
      "comment": "Gets the chunk which contains this block",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "Containing Chunk"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.block.data.BlockData",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlockData",
      "comment": "Sets the complete data for this block",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - new block specific data"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.block.data.BlockData",
            "type": "Class"
          },
          "name": "data",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "applyPhysics",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlockData",
      "comment": "Sets the complete data for this block Note that applyPhysics \u003d false is not in general safe. It should only be used when you need to avoid triggering a physics update of neighboring blocks, for example when creating a Bisected block. If you are using a custom populator, then this parameter may also be required to prevent triggering infinite chunk loads on border blocks. This method should NOT be used to \"hack\" physics by placing blocks in impossible locations. Such blocks are liable to be removed on various events such as world upgrades. Furthermore setting large amounts of such blocks in close proximity may overload the server physics engine if an update is triggered at a later point. If this occurs, the resulting behavior is undefined.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - new block specific data",
          "\u003ccode\u003eapplyPhysics\u003c/code\u003e - false to cancel physics from the changed block"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Material",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setType",
      "comment": "Sets the type of this block",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - Material to change this block to"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Material",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "applyPhysics",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setType",
      "comment": "Sets the type of this block Note that applyPhysics \u003d false is not in general safe. It should only be used when you need to avoid triggering a physics update of neighboring blocks, for example when creating a Bisected block. If you are using a custom populator, then this parameter may also be required to prevent triggering infinite chunk loads on border blocks. This method should NOT be used to \"hack\" physics by placing blocks in impossible locations. Such blocks are liable to be removed on various events such as world upgrades. Furthermore setting large amounts of such blocks in close proximity may overload the server physics engine if an update is triggered at a later point. If this occurs, the resulting behavior is undefined.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - Material to change this block to",
          "\u003ccode\u003eapplyPhysics\u003c/code\u003e - False to cancel physics on the changed block."
        ]
      }
    },
    {
      "returnType": {
        "name": "BlockFace",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.block.Block",
            "type": "Class"
          },
          "name": "block",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFace",
      "comment": "Gets the face relation of this block compared to the given block. For example: \n Block current \u003d world.getBlockAt(100, 100, 100);\n Block target \u003d world.getBlockAt(100, 101, 100);\n\n current.getFace(target) \u003d\u003d BlockFace.Up;\n If the given block is not connected to this block, null may be returned",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eblock\u003c/code\u003e - Block to compare against this block"
        ],
        "return": [
          "BlockFace of this block which has the requested block, or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.BlockState",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getState",
      "comment": "Captures the current state of this block. You may then cast that state into any accepted type, such as Furnace or Sign. The returned object will never be updated, and you are not guaranteed that (for example) a sign is still a sign after you capture its state.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "BlockState with the current state of this block."
        ]
      }
    },
    {
      "returnType": {
        "name": "Biome",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBiome",
      "comment": "Returns the biome that this block resides in",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "Biome type containing this block"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Biome",
            "type": "Class"
          },
          "name": "bio",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBiome",
      "comment": "Sets the biome that this block resides in",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebio\u003c/code\u003e - new Biome type for this block"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isBlockPowered",
      "comment": "Returns true if the block is being powered by Redstone.",
      "annotations": [],
      "tagMap": {
        "return": [
          "True if the block is powered."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isBlockIndirectlyPowered",
      "comment": "Returns true if the block is being indirectly powered by Redstone.",
      "annotations": [],
      "tagMap": {
        "return": [
          "True if the block is indirectly powered."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "BlockFace",
            "type": "Class"
          },
          "name": "face",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isBlockFacePowered",
      "comment": "Returns true if the block face is being powered by Redstone.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eface\u003c/code\u003e - The block face"
        ],
        "return": [
          "True if the block face is powered."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "BlockFace",
            "type": "Class"
          },
          "name": "face",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isBlockFaceIndirectlyPowered",
      "comment": "Returns true if the block face is being indirectly powered by Redstone.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eface\u003c/code\u003e - The block face"
        ],
        "return": [
          "True if the block face is indirectly powered."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "BlockFace",
            "type": "Class"
          },
          "name": "face",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockPower",
      "comment": "Returns the redstone power being provided to this block face",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eface\u003c/code\u003e - the face of the block to query or BlockFace.SELF for the block itself"
        ],
        "return": [
          "The power level."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockPower",
      "comment": "Returns the redstone power being provided to this block",
      "annotations": [],
      "tagMap": {
        "return": [
          "The power level."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEmpty",
      "comment": "Checks if this block is empty. A block is considered empty when getType() returns Material.AIR.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this block is empty"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isLiquid",
      "comment": "Checks if this block is liquid. A block is considered liquid when getType() returns Material.WATER or Material.LAVA.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this block is liquid"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTemperature",
      "comment": "Gets the temperature of this block. If the raw biome temperature without adjusting for height effects is required then please use World.getTemperature(int, int).",
      "annotations": [],
      "tagMap": {
        "return": [
          "Temperature of this block"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHumidity",
      "comment": "Gets the humidity of the biome of this block",
      "annotations": [],
      "tagMap": {
        "return": [
          "Humidity of this block"
        ]
      }
    },
    {
      "returnType": {
        "name": "PistonMoveReaction",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPistonMoveReaction",
      "comment": "Returns the reaction of the block when moved by a piston",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "reaction"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "breakNaturally",
      "comment": "Breaks the block and spawns items as if a player had digged it regardless of the tool.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the block was destroyed"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "name": "tool",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "breakNaturally",
      "comment": "Breaks the block and spawns items as if a player had digged it with a specific tool",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etool\u003c/code\u003e - The tool or item in hand used for digging"
        ],
        "return": [
          "true if the block was destroyed"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "BlockFace",
            "type": "Class"
          },
          "name": "face",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "applyBoneMeal",
      "comment": "Simulate bone meal application to this block (if possible).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eface\u003c/code\u003e - the face on which bonemeal should be applied"
        ],
        "return": [
          "true if the block was bonemealed, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "Collection",
        "parameters": [
          {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDrops",
      "comment": "Returns a list of items which would drop by destroying this block",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a list of dropped items for this type of block"
        ]
      }
    },
    {
      "returnType": {
        "name": "Collection",
        "parameters": [
          {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "name": "tool",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDrops",
      "comment": "Returns a list of items which would drop by destroying this block with a specific tool",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etool\u003c/code\u003e - The tool or item in hand used for digging"
        ],
        "return": [
          "a list of dropped items for this type of block"
        ]
      }
    },
    {
      "returnType": {
        "name": "Collection",
        "parameters": [
          {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "name": "tool",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          },
          "name": "entity",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDrops",
      "comment": "Returns a list of items which would drop by the entity destroying this block with a specific tool",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003etool\u003c/code\u003e - The tool or item in hand used for digging",
          "\u003ccode\u003eentity\u003c/code\u003e - the entity destroying the block"
        ],
        "return": [
          "a list of dropped items for this type of block"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.inventory.ItemStack",
            "type": "Class"
          },
          "name": "tool",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isPreferredTool",
      "comment": "Returns if the given item is a preferred choice to break this Block. In some cases this determines if a block will drop anything or extra loot.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etool\u003c/code\u003e - The tool or item used for breaking this block"
        ],
        "return": [
          "true if the tool is preferred for breaking this block."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.entity.Player",
            "type": "Class"
          },
          "name": "player",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBreakSpeed",
      "comment": "Gets the speed at which the given player would break this block, taking into account tools, potion effects, whether or not the player is in water, enchantments, etc. The returned value is the amount of progress made in breaking the block. When the total breaking progress reaches 1.0f, the block is broken. Note that the break speed can change in the course of breaking a block, e.g. if a potion effect is applied or expires, or the player jumps/enters water.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eplayer\u003c/code\u003e - player breaking the block"
        ],
        "return": [
          "the speed at which the player breaks this block"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isPassable",
      "comment": "Checks if this block is passable. A block is passable if it has no colliding parts that would prevent players from moving through it. Examples: Tall grass, flowers, signs, etc. are passable, but open doors, fence gates, trap doors, etc. are not because they still have parts that can be collided with.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if passable"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.RayTraceResult",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Vector",
            "type": "Class"
          },
          "name": "direction",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "maxDistance",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "FluidCollisionMode",
            "type": "Class"
          },
          "name": "fluidCollisionMode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rayTrace",
      "comment": "Performs a ray trace that checks for collision with this specific block in its current state using its precise collision shape.",
      "annotations": [
        {
          "type": {
            "name": "Nullable",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the start location",
          "\u003ccode\u003edirection\u003c/code\u003e - the ray direction",
          "\u003ccode\u003emaxDistance\u003c/code\u003e - the maximum distance",
          "\u003ccode\u003efluidCollisionMode\u003c/code\u003e - the fluid collision mode"
        ],
        "return": [
          "the ray trace hit result, or \n\u003ccode\u003enull\u003c/code\u003e if there is no hit"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.BoundingBox",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBoundingBox",
      "comment": "Gets the approximate bounding box for this block. This isn\u0027t exact as some blocks Stairs contain many bounding boxes to establish their complete form. Also, the box may not be exactly the same as the collision shape (such as cactus, which is 16/16 of a block with 15/16 collisional bounds). This method will return an empty bounding box if the geometric shape of the block is empty (such as air blocks).",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "the approximate bounding box of the block"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.util.VoxelShape",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCollisionShape",
      "comment": "Gets the collision shape of this block.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "a \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/util/VoxelShape.html\" title\u003d\"interface in org.bukkit.util\"\u003e\u003ccode\u003eVoxelShape\u003c/code\u003e\u003c/a\u003e representing the collision shape of this block."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.block.Block",
  "annotations": [],
  "tagMap": {}
}