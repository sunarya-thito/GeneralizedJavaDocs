{
  "packageName": "org.bukkit",
  "simpleName": "RegionAccessor",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "Biome",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBiome",
      "comment": "Gets the Biome at the given Location.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the location of the biome"
        ],
        "return": [
          "Biome at the given location"
        ]
      }
    },
    {
      "returnType": {
        "name": "Biome",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBiome",
      "comment": "Gets the Biome at the given coordinates.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the block",
          "\u003ccode\u003ey\u003c/code\u003e - Y-coordinate of the block",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the block"
        ],
        "return": [
          "Biome at the given coordinates"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Biome",
            "type": "Class"
          },
          "name": "biome",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBiome",
      "comment": "Sets the Biome at the given Location.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the location of the biome",
          "\u003ccode\u003ebiome\u003c/code\u003e - New Biome type for this block"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Biome",
            "type": "Class"
          },
          "name": "biome",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBiome",
      "comment": "Sets the Biome for the given block coordinates",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the block",
          "\u003ccode\u003ey\u003c/code\u003e - Y-coordinate of the block",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the block",
          "\u003ccode\u003ebiome\u003c/code\u003e - New Biome type for this block"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.BlockState",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockState",
      "comment": "Gets the BlockState at the given Location.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The location of the block state"
        ],
        "return": [
          "Block state at the given location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.BlockState",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockState",
      "comment": "Gets the BlockState at the given coordinates.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the block state",
          "\u003ccode\u003ey\u003c/code\u003e - Y-coordinate of the block state",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the block state"
        ],
        "return": [
          "Block state at the given coordinates"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockData",
      "comment": "Gets the BlockData at the given Location.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The location of the block data"
        ],
        "return": [
          "Block data at the given location"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.block.data.BlockData",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlockData",
      "comment": "Gets the BlockData at the given coordinates.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the block data",
          "\u003ccode\u003ey\u003c/code\u003e - Y-coordinate of the block data",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the block data"
        ],
        "return": [
          "Block data at the given coordinates"
        ]
      }
    },
    {
      "returnType": {
        "name": "Material",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getType",
      "comment": "Gets the type of the block at the given Location.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The location of the block"
        ],
        "return": [
          "Material at the given coordinates"
        ]
      }
    },
    {
      "returnType": {
        "name": "Material",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getType",
      "comment": "Gets the type of the block at the given coordinates.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the block",
          "\u003ccode\u003ey\u003c/code\u003e - Y-coordinate of the block",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the block"
        ],
        "return": [
          "Material at the given coordinates"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.block.data.BlockData",
            "type": "Class"
          },
          "name": "blockData",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlockData",
      "comment": "Sets the BlockData at the given Location.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The location of the block",
          "\u003ccode\u003eblockData\u003c/code\u003e - The block data to set the block to"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.block.data.BlockData",
            "type": "Class"
          },
          "name": "blockData",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlockData",
      "comment": "Sets the BlockData at the given coordinates.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the block",
          "\u003ccode\u003ey\u003c/code\u003e - Y-coordinate of the block",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the block",
          "\u003ccode\u003eblockData\u003c/code\u003e - The block data to set the block to"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Material",
            "type": "Class"
          },
          "name": "material",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setType",
      "comment": "Sets the Material at the given Location.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The location of the block",
          "\u003ccode\u003ematerial\u003c/code\u003e - The type to set the block to"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "z",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Material",
            "type": "Class"
          },
          "name": "material",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setType",
      "comment": "Sets the Material at the given coordinates.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - X-coordinate of the block",
          "\u003ccode\u003ey\u003c/code\u003e - Y-coordinate of the block",
          "\u003ccode\u003ez\u003c/code\u003e - Z-coordinate of the block",
          "\u003ccode\u003ematerial\u003c/code\u003e - The type to set the block to"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Random",
            "type": "Class"
          },
          "name": "random",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "TreeType",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "generateTree",
      "comment": "Creates a tree at the given Location",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location to spawn the tree",
          "\u003ccode\u003erandom\u003c/code\u003e - Random to use to generated the tree",
          "\u003ccode\u003etype\u003c/code\u003e - Type of the tree to create"
        ],
        "return": [
          "true if the tree was created successfully, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Random",
            "type": "Class"
          },
          "name": "random",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "TreeType",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Consumer",
            "parameters": [
              {
                "name": "org.bukkit.block.BlockState",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "stateConsumer",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "generateTree",
      "comment": "Creates a tree at the given Location The provided consumer gets called for every block which gets changed as a result of the tree generation. When the consumer gets called no modifications to the world are done yet. Which means, that calling getBlockState(Location) in the consumer while return the state of the block before the generation. Modifications done to the BlockState in the consumer are respected, which means that it is not necessary to call BlockState.update()",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - Location to spawn the tree",
          "\u003ccode\u003erandom\u003c/code\u003e - Random to use to generated the tree",
          "\u003ccode\u003etype\u003c/code\u003e - Type of the tree to create",
          "\u003ccode\u003estateConsumer\u003c/code\u003e - The consumer which should get called for every block which gets changed"
        ],
        "return": [
          "true if the tree was created successfully, otherwise false"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "EntityType",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnEntity",
      "comment": "Creates a entity at the given Location",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - The location to spawn the entity",
          "\u003ccode\u003etype\u003c/code\u003e - The entity to spawn"
        ],
        "return": [
          "Resulting Entity of this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "org.bukkit.entity.Entity",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "loc",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "EntityType",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "randomizeData",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawnEntity",
      "comment": "Creates a new entity at the given Location.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloc\u003c/code\u003e - the location at which the entity will be spawned.",
          "\u003ccode\u003etype\u003c/code\u003e - the entity type that determines the entity to spawn.",
          "\u003ccode\u003erandomizeData\u003c/code\u003e - whether or not the entity\u0027s data should be randomised before spawning. By default entities are randomised before spawning in regards to their equipment, age, attributes, etc. An example of this randomization would be the color of a sheep, random enchantments on the equipment of mobs or even a zombie becoming a chicken jockey. If set to false, the entity will not be randomised before spawning, meaning all their data will remain in their default state and not further modifications to the entity will be made. Notably only entities that extend the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/Mob.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eMob\u003c/code\u003e\u003c/a\u003e interface provide randomisation logic for their spawn. This parameter is hence useless for any other type of entity."
        ],
        "return": [
          "the spawned entity instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "List",
        "parameters": [
          {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEntities",
      "comment": "Get a list of all entities in this RegionAccessor",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "A List of all Entities currently residing in this world accessor"
        ]
      }
    },
    {
      "returnType": {
        "name": "List",
        "parameters": [
          {
            "name": "org.bukkit.entity.LivingEntity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLivingEntities",
      "comment": "Get a list of all living entities in this RegionAccessor",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "return": [
          "A List of all LivingEntities currently residing in this world accessor"
        ]
      }
    },
    {
      "returnType": {
        "name": "Collection",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "cls",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEntitiesByClass",
      "comment": "Get a collection of all entities in this RegionAccessor matching the given class/interface",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - an entity subclass"
        ],
        "param": [
          "\u003ccode\u003ecls\u003c/code\u003e - The class representing the type of entity to match"
        ],
        "return": [
          "A List of all Entities currently residing in this world accessor that match the given class/interface"
        ]
      }
    },
    {
      "returnType": {
        "name": "Collection",
        "parameters": [
          {
            "name": "org.bukkit.entity.Entity",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "classes",
          "varargs": true
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEntitiesByClasses",
      "comment": "Get a collection of all entities in this RegionAccessor matching any of the given classes/interfaces",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclasses\u003c/code\u003e - The classes representing the types of entity to match"
        ],
        "return": [
          "A List of all Entities currently residing in this world accessor that match one or more of the given classes/interfaces"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawn",
      "comment": "Spawn an entity of a specific class at the given Location",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e to spawn"
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e to spawn the entity at",
          "\u003ccode\u003eclazz\u003c/code\u003e - the class of the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e to spawn"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either parameter is null or the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e requested cannot be spawned"
        ],
        "return": [
          "an instance of the spawned \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Consumer",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "function",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawn",
      "comment": "Spawn an entity of a specific class at the given Location, with the supplied function run before the entity is added to the world. Note that when the function is run, the entity will not be actually in the world. Any operation involving such as teleporting the entity is undefined until after this function returns.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e to spawn"
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e to spawn the entity at",
          "\u003ccode\u003eclazz\u003c/code\u003e - the class of the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e to spawn",
          "\u003ccode\u003efunction\u003c/code\u003e - the function to be run before the entity is spawned."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either parameter is null or the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e requested cannot be spawned"
        ],
        "return": [
          "an instance of the spawned \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.Location",
            "type": "Class"
          },
          "name": "location",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "NotNull",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "clazz",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "randomizeData",
          "varargs": false
        },
        {
          "annotations": [
            {
              "type": {
                "name": "Nullable",
                "type": "Class"
              }
            }
          ],
          "type": {
            "name": "org.bukkit.util.Consumer",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "function",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "org.bukkit.entity.Entity",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spawn",
      "comment": "Creates a new entity at the given Location with the supplied function run before the entity is added to the world. Note that when the function is run, the entity will not be actually in the world. Any operation involving such as teleporting the entity is undefined until after this function returns. The passed function however is run after the potential entity\u0027s spawn randomization and hence already allows access to the values of the mob, whether or not those were randomized, such as attributes or the entity equipment.",
      "annotations": [
        {
          "type": {
            "name": "NotNull",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the generic type of the entity that is being created."
        ],
        "param": [
          "\u003ccode\u003elocation\u003c/code\u003e - the location at which the entity will be spawned.",
          "\u003ccode\u003eclazz\u003c/code\u003e - the class of the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e that is to be spawned.",
          "\u003ccode\u003erandomizeData\u003c/code\u003e - whether or not the entity\u0027s data should be randomised before spawning. By default entities are randomised before spawning in regards to their equipment, age, attributes, etc. An example of this randomization would be the color of a sheep, random enchantments on the equipment of mobs or even a zombie becoming a chicken jockey. If set to false, the entity will not be randomised before spawning, meaning all their data will remain in their default state and not further modifications to the entity will be made. Notably only entities that extend the \n\u003ca href\u003d\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/entity/Mob.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eMob\u003c/code\u003e\u003c/a\u003e interface provide randomisation logic for their spawn. This parameter is hence useless for any other type of entity.",
          "\u003ccode\u003efunction\u003c/code\u003e - the function to be run before the entity is spawned."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if either the world or clazz parameter are null."
        ],
        "return": [
          "the spawned entity instance."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.bukkit.RegionAccessor",
  "annotations": [],
  "tagMap": {}
}